
ClapClap_Ledscontrol_HWv0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b24  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08008be0  08008be0  00009be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009300  08009300  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009300  08009300  0000a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009308  08009308  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009308  08009308  0000a308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800930c  0800930c  0000a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009310  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  20000068  08009378  0000b068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  08009378  0000b748  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce76  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eeb  00000000  00000000  00027f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0002bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121a  00000000  00000000  0002d588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206dc  00000000  00000000  0002e7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e479  00000000  00000000  0004ee7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9ba3  00000000  00000000  0006d2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136e9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005610  00000000  00000000  00136ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0013c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008bc8 	.word	0x08008bc8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08008bc8 	.word	0x08008bc8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	@ (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	@ (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 fb78 	bl	8000b54 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 fb73 	bl	8000b54 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__aeabi_fdiv>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	464f      	mov	r7, r9
 80005dc:	4646      	mov	r6, r8
 80005de:	46d6      	mov	lr, sl
 80005e0:	0244      	lsls	r4, r0, #9
 80005e2:	b5c0      	push	{r6, r7, lr}
 80005e4:	0047      	lsls	r7, r0, #1
 80005e6:	1c0e      	adds	r6, r1, #0
 80005e8:	0a64      	lsrs	r4, r4, #9
 80005ea:	0e3f      	lsrs	r7, r7, #24
 80005ec:	0fc5      	lsrs	r5, r0, #31
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d03c      	beq.n	800066c <__aeabi_fdiv+0x94>
 80005f2:	2fff      	cmp	r7, #255	@ 0xff
 80005f4:	d042      	beq.n	800067c <__aeabi_fdiv+0xa4>
 80005f6:	2300      	movs	r3, #0
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	4699      	mov	r9, r3
 80005fc:	469a      	mov	sl, r3
 80005fe:	00e4      	lsls	r4, r4, #3
 8000600:	04d2      	lsls	r2, r2, #19
 8000602:	4314      	orrs	r4, r2
 8000604:	3f7f      	subs	r7, #127	@ 0x7f
 8000606:	0273      	lsls	r3, r6, #9
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	4698      	mov	r8, r3
 800060c:	0073      	lsls	r3, r6, #1
 800060e:	0e1b      	lsrs	r3, r3, #24
 8000610:	0ff6      	lsrs	r6, r6, #31
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01b      	beq.n	800064e <__aeabi_fdiv+0x76>
 8000616:	2bff      	cmp	r3, #255	@ 0xff
 8000618:	d013      	beq.n	8000642 <__aeabi_fdiv+0x6a>
 800061a:	4642      	mov	r2, r8
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	00d2      	lsls	r2, r2, #3
 8000620:	04c9      	lsls	r1, r1, #19
 8000622:	4311      	orrs	r1, r2
 8000624:	4688      	mov	r8, r1
 8000626:	2000      	movs	r0, #0
 8000628:	3b7f      	subs	r3, #127	@ 0x7f
 800062a:	0029      	movs	r1, r5
 800062c:	1aff      	subs	r7, r7, r3
 800062e:	464b      	mov	r3, r9
 8000630:	4071      	eors	r1, r6
 8000632:	b2c9      	uxtb	r1, r1
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d900      	bls.n	800063a <__aeabi_fdiv+0x62>
 8000638:	e0b5      	b.n	80007a6 <__aeabi_fdiv+0x1ce>
 800063a:	4a74      	ldr	r2, [pc, #464]	@ (800080c <__aeabi_fdiv+0x234>)
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	58d3      	ldr	r3, [r2, r3]
 8000640:	469f      	mov	pc, r3
 8000642:	4643      	mov	r3, r8
 8000644:	2b00      	cmp	r3, #0
 8000646:	d13f      	bne.n	80006c8 <__aeabi_fdiv+0xf0>
 8000648:	3fff      	subs	r7, #255	@ 0xff
 800064a:	3302      	adds	r3, #2
 800064c:	e003      	b.n	8000656 <__aeabi_fdiv+0x7e>
 800064e:	4643      	mov	r3, r8
 8000650:	2b00      	cmp	r3, #0
 8000652:	d12d      	bne.n	80006b0 <__aeabi_fdiv+0xd8>
 8000654:	2301      	movs	r3, #1
 8000656:	0029      	movs	r1, r5
 8000658:	464a      	mov	r2, r9
 800065a:	4071      	eors	r1, r6
 800065c:	b2c9      	uxtb	r1, r1
 800065e:	431a      	orrs	r2, r3
 8000660:	2a0e      	cmp	r2, #14
 8000662:	d838      	bhi.n	80006d6 <__aeabi_fdiv+0xfe>
 8000664:	486a      	ldr	r0, [pc, #424]	@ (8000810 <__aeabi_fdiv+0x238>)
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	5882      	ldr	r2, [r0, r2]
 800066a:	4697      	mov	pc, r2
 800066c:	2c00      	cmp	r4, #0
 800066e:	d113      	bne.n	8000698 <__aeabi_fdiv+0xc0>
 8000670:	2304      	movs	r3, #4
 8000672:	4699      	mov	r9, r3
 8000674:	3b03      	subs	r3, #3
 8000676:	2700      	movs	r7, #0
 8000678:	469a      	mov	sl, r3
 800067a:	e7c4      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800067c:	2c00      	cmp	r4, #0
 800067e:	d105      	bne.n	800068c <__aeabi_fdiv+0xb4>
 8000680:	2308      	movs	r3, #8
 8000682:	4699      	mov	r9, r3
 8000684:	3b06      	subs	r3, #6
 8000686:	27ff      	movs	r7, #255	@ 0xff
 8000688:	469a      	mov	sl, r3
 800068a:	e7bc      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800068c:	230c      	movs	r3, #12
 800068e:	4699      	mov	r9, r3
 8000690:	3b09      	subs	r3, #9
 8000692:	27ff      	movs	r7, #255	@ 0xff
 8000694:	469a      	mov	sl, r3
 8000696:	e7b6      	b.n	8000606 <__aeabi_fdiv+0x2e>
 8000698:	0020      	movs	r0, r4
 800069a:	f000 fa3d 	bl	8000b18 <__clzsi2>
 800069e:	2776      	movs	r7, #118	@ 0x76
 80006a0:	1f43      	subs	r3, r0, #5
 80006a2:	409c      	lsls	r4, r3
 80006a4:	2300      	movs	r3, #0
 80006a6:	427f      	negs	r7, r7
 80006a8:	4699      	mov	r9, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	1a3f      	subs	r7, r7, r0
 80006ae:	e7aa      	b.n	8000606 <__aeabi_fdiv+0x2e>
 80006b0:	4640      	mov	r0, r8
 80006b2:	f000 fa31 	bl	8000b18 <__clzsi2>
 80006b6:	4642      	mov	r2, r8
 80006b8:	1f43      	subs	r3, r0, #5
 80006ba:	409a      	lsls	r2, r3
 80006bc:	2376      	movs	r3, #118	@ 0x76
 80006be:	425b      	negs	r3, r3
 80006c0:	1a1b      	subs	r3, r3, r0
 80006c2:	4690      	mov	r8, r2
 80006c4:	2000      	movs	r0, #0
 80006c6:	e7b0      	b.n	800062a <__aeabi_fdiv+0x52>
 80006c8:	2303      	movs	r3, #3
 80006ca:	464a      	mov	r2, r9
 80006cc:	431a      	orrs	r2, r3
 80006ce:	4691      	mov	r9, r2
 80006d0:	2003      	movs	r0, #3
 80006d2:	33fc      	adds	r3, #252	@ 0xfc
 80006d4:	e7a9      	b.n	800062a <__aeabi_fdiv+0x52>
 80006d6:	000d      	movs	r5, r1
 80006d8:	20ff      	movs	r0, #255	@ 0xff
 80006da:	2200      	movs	r2, #0
 80006dc:	05c0      	lsls	r0, r0, #23
 80006de:	07ed      	lsls	r5, r5, #31
 80006e0:	4310      	orrs	r0, r2
 80006e2:	4328      	orrs	r0, r5
 80006e4:	bce0      	pop	{r5, r6, r7}
 80006e6:	46ba      	mov	sl, r7
 80006e8:	46b1      	mov	r9, r6
 80006ea:	46a8      	mov	r8, r5
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ee:	000d      	movs	r5, r1
 80006f0:	2000      	movs	r0, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	e7f2      	b.n	80006dc <__aeabi_fdiv+0x104>
 80006f6:	4653      	mov	r3, sl
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d0ed      	beq.n	80006d8 <__aeabi_fdiv+0x100>
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d033      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000700:	46a0      	mov	r8, r4
 8000702:	2b01      	cmp	r3, #1
 8000704:	d105      	bne.n	8000712 <__aeabi_fdiv+0x13a>
 8000706:	2000      	movs	r0, #0
 8000708:	2200      	movs	r2, #0
 800070a:	e7e7      	b.n	80006dc <__aeabi_fdiv+0x104>
 800070c:	0035      	movs	r5, r6
 800070e:	2803      	cmp	r0, #3
 8000710:	d07a      	beq.n	8000808 <__aeabi_fdiv+0x230>
 8000712:	003b      	movs	r3, r7
 8000714:	337f      	adds	r3, #127	@ 0x7f
 8000716:	2b00      	cmp	r3, #0
 8000718:	dd2d      	ble.n	8000776 <__aeabi_fdiv+0x19e>
 800071a:	4642      	mov	r2, r8
 800071c:	0752      	lsls	r2, r2, #29
 800071e:	d007      	beq.n	8000730 <__aeabi_fdiv+0x158>
 8000720:	220f      	movs	r2, #15
 8000722:	4641      	mov	r1, r8
 8000724:	400a      	ands	r2, r1
 8000726:	2a04      	cmp	r2, #4
 8000728:	d002      	beq.n	8000730 <__aeabi_fdiv+0x158>
 800072a:	2204      	movs	r2, #4
 800072c:	4694      	mov	ip, r2
 800072e:	44e0      	add	r8, ip
 8000730:	4642      	mov	r2, r8
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	d505      	bpl.n	8000742 <__aeabi_fdiv+0x16a>
 8000736:	4642      	mov	r2, r8
 8000738:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <__aeabi_fdiv+0x23c>)
 800073a:	401a      	ands	r2, r3
 800073c:	003b      	movs	r3, r7
 800073e:	4690      	mov	r8, r2
 8000740:	3380      	adds	r3, #128	@ 0x80
 8000742:	2bfe      	cmp	r3, #254	@ 0xfe
 8000744:	dcc8      	bgt.n	80006d8 <__aeabi_fdiv+0x100>
 8000746:	4642      	mov	r2, r8
 8000748:	0192      	lsls	r2, r2, #6
 800074a:	0a52      	lsrs	r2, r2, #9
 800074c:	b2d8      	uxtb	r0, r3
 800074e:	e7c5      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	2500      	movs	r5, #0
 8000754:	20ff      	movs	r0, #255	@ 0xff
 8000756:	03d2      	lsls	r2, r2, #15
 8000758:	e7c0      	b.n	80006dc <__aeabi_fdiv+0x104>
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	4214      	tst	r4, r2
 8000760:	d002      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000762:	4643      	mov	r3, r8
 8000764:	4213      	tst	r3, r2
 8000766:	d049      	beq.n	80007fc <__aeabi_fdiv+0x224>
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	03d2      	lsls	r2, r2, #15
 800076c:	4322      	orrs	r2, r4
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	20ff      	movs	r0, #255	@ 0xff
 8000772:	0a52      	lsrs	r2, r2, #9
 8000774:	e7b2      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000776:	2201      	movs	r2, #1
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b1b      	cmp	r3, #27
 800077c:	dcc3      	bgt.n	8000706 <__aeabi_fdiv+0x12e>
 800077e:	4642      	mov	r2, r8
 8000780:	40da      	lsrs	r2, r3
 8000782:	4643      	mov	r3, r8
 8000784:	379e      	adds	r7, #158	@ 0x9e
 8000786:	40bb      	lsls	r3, r7
 8000788:	1e59      	subs	r1, r3, #1
 800078a:	418b      	sbcs	r3, r1
 800078c:	431a      	orrs	r2, r3
 800078e:	0753      	lsls	r3, r2, #29
 8000790:	d004      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 8000792:	230f      	movs	r3, #15
 8000794:	4013      	ands	r3, r2
 8000796:	2b04      	cmp	r3, #4
 8000798:	d000      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 800079a:	3204      	adds	r2, #4
 800079c:	0153      	lsls	r3, r2, #5
 800079e:	d529      	bpl.n	80007f4 <__aeabi_fdiv+0x21c>
 80007a0:	2001      	movs	r0, #1
 80007a2:	2200      	movs	r2, #0
 80007a4:	e79a      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007a6:	4642      	mov	r2, r8
 80007a8:	0163      	lsls	r3, r4, #5
 80007aa:	0155      	lsls	r5, r2, #5
 80007ac:	42ab      	cmp	r3, r5
 80007ae:	d215      	bcs.n	80007dc <__aeabi_fdiv+0x204>
 80007b0:	201b      	movs	r0, #27
 80007b2:	2200      	movs	r2, #0
 80007b4:	3f01      	subs	r7, #1
 80007b6:	2601      	movs	r6, #1
 80007b8:	001c      	movs	r4, r3
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2c00      	cmp	r4, #0
 80007c0:	db01      	blt.n	80007c6 <__aeabi_fdiv+0x1ee>
 80007c2:	429d      	cmp	r5, r3
 80007c4:	d801      	bhi.n	80007ca <__aeabi_fdiv+0x1f2>
 80007c6:	1b5b      	subs	r3, r3, r5
 80007c8:	4332      	orrs	r2, r6
 80007ca:	3801      	subs	r0, #1
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d1f3      	bne.n	80007b8 <__aeabi_fdiv+0x1e0>
 80007d0:	1e58      	subs	r0, r3, #1
 80007d2:	4183      	sbcs	r3, r0
 80007d4:	4313      	orrs	r3, r2
 80007d6:	4698      	mov	r8, r3
 80007d8:	000d      	movs	r5, r1
 80007da:	e79a      	b.n	8000712 <__aeabi_fdiv+0x13a>
 80007dc:	201a      	movs	r0, #26
 80007de:	2201      	movs	r2, #1
 80007e0:	1b5b      	subs	r3, r3, r5
 80007e2:	e7e8      	b.n	80007b6 <__aeabi_fdiv+0x1de>
 80007e4:	3b02      	subs	r3, #2
 80007e6:	425a      	negs	r2, r3
 80007e8:	4153      	adcs	r3, r2
 80007ea:	425b      	negs	r3, r3
 80007ec:	0035      	movs	r5, r6
 80007ee:	2200      	movs	r2, #0
 80007f0:	b2d8      	uxtb	r0, r3
 80007f2:	e773      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007f4:	0192      	lsls	r2, r2, #6
 80007f6:	2000      	movs	r0, #0
 80007f8:	0a52      	lsrs	r2, r2, #9
 80007fa:	e76f      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007fc:	431a      	orrs	r2, r3
 80007fe:	0252      	lsls	r2, r2, #9
 8000800:	0035      	movs	r5, r6
 8000802:	20ff      	movs	r0, #255	@ 0xff
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	e769      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000808:	4644      	mov	r4, r8
 800080a:	e7ad      	b.n	8000768 <__aeabi_fdiv+0x190>
 800080c:	08008ed8 	.word	0x08008ed8
 8000810:	08008f18 	.word	0x08008f18
 8000814:	f7ffffff 	.word	0xf7ffffff

08000818 <__aeabi_fmul>:
 8000818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081a:	464f      	mov	r7, r9
 800081c:	4646      	mov	r6, r8
 800081e:	46d6      	mov	lr, sl
 8000820:	0243      	lsls	r3, r0, #9
 8000822:	0a5b      	lsrs	r3, r3, #9
 8000824:	0045      	lsls	r5, r0, #1
 8000826:	b5c0      	push	{r6, r7, lr}
 8000828:	4699      	mov	r9, r3
 800082a:	1c0f      	adds	r7, r1, #0
 800082c:	0e2d      	lsrs	r5, r5, #24
 800082e:	0fc6      	lsrs	r6, r0, #31
 8000830:	2d00      	cmp	r5, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fmul+0x1e>
 8000834:	e088      	b.n	8000948 <__aeabi_fmul+0x130>
 8000836:	2dff      	cmp	r5, #255	@ 0xff
 8000838:	d100      	bne.n	800083c <__aeabi_fmul+0x24>
 800083a:	e08d      	b.n	8000958 <__aeabi_fmul+0x140>
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	04d2      	lsls	r2, r2, #19
 8000842:	431a      	orrs	r2, r3
 8000844:	2300      	movs	r3, #0
 8000846:	4691      	mov	r9, r2
 8000848:	4698      	mov	r8, r3
 800084a:	469a      	mov	sl, r3
 800084c:	3d7f      	subs	r5, #127	@ 0x7f
 800084e:	027c      	lsls	r4, r7, #9
 8000850:	007b      	lsls	r3, r7, #1
 8000852:	0a64      	lsrs	r4, r4, #9
 8000854:	0e1b      	lsrs	r3, r3, #24
 8000856:	0fff      	lsrs	r7, r7, #31
 8000858:	2b00      	cmp	r3, #0
 800085a:	d068      	beq.n	800092e <__aeabi_fmul+0x116>
 800085c:	2bff      	cmp	r3, #255	@ 0xff
 800085e:	d021      	beq.n	80008a4 <__aeabi_fmul+0x8c>
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	00e4      	lsls	r4, r4, #3
 8000864:	04d2      	lsls	r2, r2, #19
 8000866:	4314      	orrs	r4, r2
 8000868:	4642      	mov	r2, r8
 800086a:	3b7f      	subs	r3, #127	@ 0x7f
 800086c:	195b      	adds	r3, r3, r5
 800086e:	2100      	movs	r1, #0
 8000870:	1c5d      	adds	r5, r3, #1
 8000872:	2a0a      	cmp	r2, #10
 8000874:	dc2e      	bgt.n	80008d4 <__aeabi_fmul+0xbc>
 8000876:	407e      	eors	r6, r7
 8000878:	4642      	mov	r2, r8
 800087a:	2a02      	cmp	r2, #2
 800087c:	dc23      	bgt.n	80008c6 <__aeabi_fmul+0xae>
 800087e:	3a01      	subs	r2, #1
 8000880:	2a01      	cmp	r2, #1
 8000882:	d900      	bls.n	8000886 <__aeabi_fmul+0x6e>
 8000884:	e0bd      	b.n	8000a02 <__aeabi_fmul+0x1ea>
 8000886:	2902      	cmp	r1, #2
 8000888:	d06e      	beq.n	8000968 <__aeabi_fmul+0x150>
 800088a:	2901      	cmp	r1, #1
 800088c:	d12c      	bne.n	80008e8 <__aeabi_fmul+0xd0>
 800088e:	2000      	movs	r0, #0
 8000890:	2200      	movs	r2, #0
 8000892:	05c0      	lsls	r0, r0, #23
 8000894:	07f6      	lsls	r6, r6, #31
 8000896:	4310      	orrs	r0, r2
 8000898:	4330      	orrs	r0, r6
 800089a:	bce0      	pop	{r5, r6, r7}
 800089c:	46ba      	mov	sl, r7
 800089e:	46b1      	mov	r9, r6
 80008a0:	46a8      	mov	r8, r5
 80008a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a4:	002b      	movs	r3, r5
 80008a6:	33ff      	adds	r3, #255	@ 0xff
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	d065      	beq.n	8000978 <__aeabi_fmul+0x160>
 80008ac:	2203      	movs	r2, #3
 80008ae:	4641      	mov	r1, r8
 80008b0:	4311      	orrs	r1, r2
 80008b2:	0032      	movs	r2, r6
 80008b4:	3501      	adds	r5, #1
 80008b6:	4688      	mov	r8, r1
 80008b8:	407a      	eors	r2, r7
 80008ba:	35ff      	adds	r5, #255	@ 0xff
 80008bc:	290a      	cmp	r1, #10
 80008be:	dd00      	ble.n	80008c2 <__aeabi_fmul+0xaa>
 80008c0:	e0d8      	b.n	8000a74 <__aeabi_fmul+0x25c>
 80008c2:	0016      	movs	r6, r2
 80008c4:	2103      	movs	r1, #3
 80008c6:	4640      	mov	r0, r8
 80008c8:	2201      	movs	r2, #1
 80008ca:	4082      	lsls	r2, r0
 80008cc:	20a6      	movs	r0, #166	@ 0xa6
 80008ce:	00c0      	lsls	r0, r0, #3
 80008d0:	4202      	tst	r2, r0
 80008d2:	d020      	beq.n	8000916 <__aeabi_fmul+0xfe>
 80008d4:	4653      	mov	r3, sl
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d046      	beq.n	8000968 <__aeabi_fmul+0x150>
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fmul+0xc8>
 80008de:	e0bb      	b.n	8000a58 <__aeabi_fmul+0x240>
 80008e0:	4651      	mov	r1, sl
 80008e2:	464c      	mov	r4, r9
 80008e4:	2901      	cmp	r1, #1
 80008e6:	d0d2      	beq.n	800088e <__aeabi_fmul+0x76>
 80008e8:	002b      	movs	r3, r5
 80008ea:	337f      	adds	r3, #127	@ 0x7f
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	dd70      	ble.n	80009d2 <__aeabi_fmul+0x1ba>
 80008f0:	0762      	lsls	r2, r4, #29
 80008f2:	d004      	beq.n	80008fe <__aeabi_fmul+0xe6>
 80008f4:	220f      	movs	r2, #15
 80008f6:	4022      	ands	r2, r4
 80008f8:	2a04      	cmp	r2, #4
 80008fa:	d000      	beq.n	80008fe <__aeabi_fmul+0xe6>
 80008fc:	3404      	adds	r4, #4
 80008fe:	0122      	lsls	r2, r4, #4
 8000900:	d503      	bpl.n	800090a <__aeabi_fmul+0xf2>
 8000902:	4b63      	ldr	r3, [pc, #396]	@ (8000a90 <__aeabi_fmul+0x278>)
 8000904:	401c      	ands	r4, r3
 8000906:	002b      	movs	r3, r5
 8000908:	3380      	adds	r3, #128	@ 0x80
 800090a:	2bfe      	cmp	r3, #254	@ 0xfe
 800090c:	dc2c      	bgt.n	8000968 <__aeabi_fmul+0x150>
 800090e:	01a2      	lsls	r2, r4, #6
 8000910:	0a52      	lsrs	r2, r2, #9
 8000912:	b2d8      	uxtb	r0, r3
 8000914:	e7bd      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000916:	2090      	movs	r0, #144	@ 0x90
 8000918:	0080      	lsls	r0, r0, #2
 800091a:	4202      	tst	r2, r0
 800091c:	d127      	bne.n	800096e <__aeabi_fmul+0x156>
 800091e:	38b9      	subs	r0, #185	@ 0xb9
 8000920:	38ff      	subs	r0, #255	@ 0xff
 8000922:	4210      	tst	r0, r2
 8000924:	d06d      	beq.n	8000a02 <__aeabi_fmul+0x1ea>
 8000926:	003e      	movs	r6, r7
 8000928:	46a1      	mov	r9, r4
 800092a:	468a      	mov	sl, r1
 800092c:	e7d2      	b.n	80008d4 <__aeabi_fmul+0xbc>
 800092e:	2c00      	cmp	r4, #0
 8000930:	d141      	bne.n	80009b6 <__aeabi_fmul+0x19e>
 8000932:	2301      	movs	r3, #1
 8000934:	4642      	mov	r2, r8
 8000936:	431a      	orrs	r2, r3
 8000938:	4690      	mov	r8, r2
 800093a:	002b      	movs	r3, r5
 800093c:	4642      	mov	r2, r8
 800093e:	2101      	movs	r1, #1
 8000940:	1c5d      	adds	r5, r3, #1
 8000942:	2a0a      	cmp	r2, #10
 8000944:	dd97      	ble.n	8000876 <__aeabi_fmul+0x5e>
 8000946:	e7c5      	b.n	80008d4 <__aeabi_fmul+0xbc>
 8000948:	2b00      	cmp	r3, #0
 800094a:	d126      	bne.n	800099a <__aeabi_fmul+0x182>
 800094c:	2304      	movs	r3, #4
 800094e:	4698      	mov	r8, r3
 8000950:	3b03      	subs	r3, #3
 8000952:	2500      	movs	r5, #0
 8000954:	469a      	mov	sl, r3
 8000956:	e77a      	b.n	800084e <__aeabi_fmul+0x36>
 8000958:	2b00      	cmp	r3, #0
 800095a:	d118      	bne.n	800098e <__aeabi_fmul+0x176>
 800095c:	2308      	movs	r3, #8
 800095e:	4698      	mov	r8, r3
 8000960:	3b06      	subs	r3, #6
 8000962:	25ff      	movs	r5, #255	@ 0xff
 8000964:	469a      	mov	sl, r3
 8000966:	e772      	b.n	800084e <__aeabi_fmul+0x36>
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	2200      	movs	r2, #0
 800096c:	e791      	b.n	8000892 <__aeabi_fmul+0x7a>
 800096e:	2280      	movs	r2, #128	@ 0x80
 8000970:	2600      	movs	r6, #0
 8000972:	20ff      	movs	r0, #255	@ 0xff
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	e78c      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000978:	4641      	mov	r1, r8
 800097a:	2202      	movs	r2, #2
 800097c:	3501      	adds	r5, #1
 800097e:	4311      	orrs	r1, r2
 8000980:	4688      	mov	r8, r1
 8000982:	35ff      	adds	r5, #255	@ 0xff
 8000984:	290a      	cmp	r1, #10
 8000986:	dca5      	bgt.n	80008d4 <__aeabi_fmul+0xbc>
 8000988:	2102      	movs	r1, #2
 800098a:	407e      	eors	r6, r7
 800098c:	e774      	b.n	8000878 <__aeabi_fmul+0x60>
 800098e:	230c      	movs	r3, #12
 8000990:	4698      	mov	r8, r3
 8000992:	3b09      	subs	r3, #9
 8000994:	25ff      	movs	r5, #255	@ 0xff
 8000996:	469a      	mov	sl, r3
 8000998:	e759      	b.n	800084e <__aeabi_fmul+0x36>
 800099a:	0018      	movs	r0, r3
 800099c:	f000 f8bc 	bl	8000b18 <__clzsi2>
 80009a0:	464a      	mov	r2, r9
 80009a2:	1f43      	subs	r3, r0, #5
 80009a4:	2576      	movs	r5, #118	@ 0x76
 80009a6:	409a      	lsls	r2, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	426d      	negs	r5, r5
 80009ac:	4691      	mov	r9, r2
 80009ae:	4698      	mov	r8, r3
 80009b0:	469a      	mov	sl, r3
 80009b2:	1a2d      	subs	r5, r5, r0
 80009b4:	e74b      	b.n	800084e <__aeabi_fmul+0x36>
 80009b6:	0020      	movs	r0, r4
 80009b8:	f000 f8ae 	bl	8000b18 <__clzsi2>
 80009bc:	4642      	mov	r2, r8
 80009be:	1f43      	subs	r3, r0, #5
 80009c0:	409c      	lsls	r4, r3
 80009c2:	1a2b      	subs	r3, r5, r0
 80009c4:	3b76      	subs	r3, #118	@ 0x76
 80009c6:	2100      	movs	r1, #0
 80009c8:	1c5d      	adds	r5, r3, #1
 80009ca:	2a0a      	cmp	r2, #10
 80009cc:	dc00      	bgt.n	80009d0 <__aeabi_fmul+0x1b8>
 80009ce:	e752      	b.n	8000876 <__aeabi_fmul+0x5e>
 80009d0:	e780      	b.n	80008d4 <__aeabi_fmul+0xbc>
 80009d2:	2201      	movs	r2, #1
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b1b      	cmp	r3, #27
 80009d8:	dd00      	ble.n	80009dc <__aeabi_fmul+0x1c4>
 80009da:	e758      	b.n	800088e <__aeabi_fmul+0x76>
 80009dc:	359e      	adds	r5, #158	@ 0x9e
 80009de:	0022      	movs	r2, r4
 80009e0:	40ac      	lsls	r4, r5
 80009e2:	40da      	lsrs	r2, r3
 80009e4:	1e63      	subs	r3, r4, #1
 80009e6:	419c      	sbcs	r4, r3
 80009e8:	4322      	orrs	r2, r4
 80009ea:	0753      	lsls	r3, r2, #29
 80009ec:	d004      	beq.n	80009f8 <__aeabi_fmul+0x1e0>
 80009ee:	230f      	movs	r3, #15
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d000      	beq.n	80009f8 <__aeabi_fmul+0x1e0>
 80009f6:	3204      	adds	r2, #4
 80009f8:	0153      	lsls	r3, r2, #5
 80009fa:	d537      	bpl.n	8000a6c <__aeabi_fmul+0x254>
 80009fc:	2001      	movs	r0, #1
 80009fe:	2200      	movs	r2, #0
 8000a00:	e747      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000a02:	0c21      	lsrs	r1, r4, #16
 8000a04:	464a      	mov	r2, r9
 8000a06:	0424      	lsls	r4, r4, #16
 8000a08:	0c24      	lsrs	r4, r4, #16
 8000a0a:	0027      	movs	r7, r4
 8000a0c:	0c10      	lsrs	r0, r2, #16
 8000a0e:	0412      	lsls	r2, r2, #16
 8000a10:	0c12      	lsrs	r2, r2, #16
 8000a12:	4344      	muls	r4, r0
 8000a14:	4357      	muls	r7, r2
 8000a16:	4348      	muls	r0, r1
 8000a18:	4351      	muls	r1, r2
 8000a1a:	0c3a      	lsrs	r2, r7, #16
 8000a1c:	1909      	adds	r1, r1, r4
 8000a1e:	1852      	adds	r2, r2, r1
 8000a20:	4294      	cmp	r4, r2
 8000a22:	d903      	bls.n	8000a2c <__aeabi_fmul+0x214>
 8000a24:	2180      	movs	r1, #128	@ 0x80
 8000a26:	0249      	lsls	r1, r1, #9
 8000a28:	468c      	mov	ip, r1
 8000a2a:	4460      	add	r0, ip
 8000a2c:	043f      	lsls	r7, r7, #16
 8000a2e:	0411      	lsls	r1, r2, #16
 8000a30:	0c3f      	lsrs	r7, r7, #16
 8000a32:	19c9      	adds	r1, r1, r7
 8000a34:	018c      	lsls	r4, r1, #6
 8000a36:	1e67      	subs	r7, r4, #1
 8000a38:	41bc      	sbcs	r4, r7
 8000a3a:	0c12      	lsrs	r2, r2, #16
 8000a3c:	0e89      	lsrs	r1, r1, #26
 8000a3e:	1812      	adds	r2, r2, r0
 8000a40:	430c      	orrs	r4, r1
 8000a42:	0192      	lsls	r2, r2, #6
 8000a44:	4314      	orrs	r4, r2
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	d50e      	bpl.n	8000a68 <__aeabi_fmul+0x250>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	0862      	lsrs	r2, r4, #1
 8000a4e:	401c      	ands	r4, r3
 8000a50:	4314      	orrs	r4, r2
 8000a52:	e749      	b.n	80008e8 <__aeabi_fmul+0xd0>
 8000a54:	003e      	movs	r6, r7
 8000a56:	46a1      	mov	r9, r4
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	464b      	mov	r3, r9
 8000a5c:	03d2      	lsls	r2, r2, #15
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	0252      	lsls	r2, r2, #9
 8000a62:	20ff      	movs	r0, #255	@ 0xff
 8000a64:	0a52      	lsrs	r2, r2, #9
 8000a66:	e714      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000a68:	001d      	movs	r5, r3
 8000a6a:	e73d      	b.n	80008e8 <__aeabi_fmul+0xd0>
 8000a6c:	0192      	lsls	r2, r2, #6
 8000a6e:	2000      	movs	r0, #0
 8000a70:	0a52      	lsrs	r2, r2, #9
 8000a72:	e70e      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000a74:	290f      	cmp	r1, #15
 8000a76:	d1ed      	bne.n	8000a54 <__aeabi_fmul+0x23c>
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	464b      	mov	r3, r9
 8000a7c:	03d2      	lsls	r2, r2, #15
 8000a7e:	4213      	tst	r3, r2
 8000a80:	d0ea      	beq.n	8000a58 <__aeabi_fmul+0x240>
 8000a82:	4214      	tst	r4, r2
 8000a84:	d1e8      	bne.n	8000a58 <__aeabi_fmul+0x240>
 8000a86:	003e      	movs	r6, r7
 8000a88:	20ff      	movs	r0, #255	@ 0xff
 8000a8a:	4322      	orrs	r2, r4
 8000a8c:	e701      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	f7ffffff 	.word	0xf7ffffff

08000a94 <__aeabi_ui2f>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	1e04      	subs	r4, r0, #0
 8000a98:	d00e      	beq.n	8000ab8 <__aeabi_ui2f+0x24>
 8000a9a:	f000 f83d 	bl	8000b18 <__clzsi2>
 8000a9e:	239e      	movs	r3, #158	@ 0x9e
 8000aa0:	0001      	movs	r1, r0
 8000aa2:	1a1b      	subs	r3, r3, r0
 8000aa4:	2b96      	cmp	r3, #150	@ 0x96
 8000aa6:	dc0c      	bgt.n	8000ac2 <__aeabi_ui2f+0x2e>
 8000aa8:	2808      	cmp	r0, #8
 8000aaa:	d02f      	beq.n	8000b0c <__aeabi_ui2f+0x78>
 8000aac:	3908      	subs	r1, #8
 8000aae:	408c      	lsls	r4, r1
 8000ab0:	0264      	lsls	r4, r4, #9
 8000ab2:	0a64      	lsrs	r4, r4, #9
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	e001      	b.n	8000abc <__aeabi_ui2f+0x28>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	2400      	movs	r4, #0
 8000abc:	05c0      	lsls	r0, r0, #23
 8000abe:	4320      	orrs	r0, r4
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
 8000ac2:	2b99      	cmp	r3, #153	@ 0x99
 8000ac4:	dc16      	bgt.n	8000af4 <__aeabi_ui2f+0x60>
 8000ac6:	1f42      	subs	r2, r0, #5
 8000ac8:	2805      	cmp	r0, #5
 8000aca:	d000      	beq.n	8000ace <__aeabi_ui2f+0x3a>
 8000acc:	4094      	lsls	r4, r2
 8000ace:	0022      	movs	r2, r4
 8000ad0:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <__aeabi_ui2f+0x80>)
 8000ad2:	4002      	ands	r2, r0
 8000ad4:	0765      	lsls	r5, r4, #29
 8000ad6:	d009      	beq.n	8000aec <__aeabi_ui2f+0x58>
 8000ad8:	250f      	movs	r5, #15
 8000ada:	402c      	ands	r4, r5
 8000adc:	2c04      	cmp	r4, #4
 8000ade:	d005      	beq.n	8000aec <__aeabi_ui2f+0x58>
 8000ae0:	3204      	adds	r2, #4
 8000ae2:	0154      	lsls	r4, r2, #5
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_ui2f+0x58>
 8000ae6:	239f      	movs	r3, #159	@ 0x9f
 8000ae8:	4002      	ands	r2, r0
 8000aea:	1a5b      	subs	r3, r3, r1
 8000aec:	0192      	lsls	r2, r2, #6
 8000aee:	0a54      	lsrs	r4, r2, #9
 8000af0:	b2d8      	uxtb	r0, r3
 8000af2:	e7e3      	b.n	8000abc <__aeabi_ui2f+0x28>
 8000af4:	0002      	movs	r2, r0
 8000af6:	0020      	movs	r0, r4
 8000af8:	321b      	adds	r2, #27
 8000afa:	4090      	lsls	r0, r2
 8000afc:	0002      	movs	r2, r0
 8000afe:	1e50      	subs	r0, r2, #1
 8000b00:	4182      	sbcs	r2, r0
 8000b02:	2005      	movs	r0, #5
 8000b04:	1a40      	subs	r0, r0, r1
 8000b06:	40c4      	lsrs	r4, r0
 8000b08:	4314      	orrs	r4, r2
 8000b0a:	e7e0      	b.n	8000ace <__aeabi_ui2f+0x3a>
 8000b0c:	0264      	lsls	r4, r4, #9
 8000b0e:	2096      	movs	r0, #150	@ 0x96
 8000b10:	0a64      	lsrs	r4, r4, #9
 8000b12:	e7d3      	b.n	8000abc <__aeabi_ui2f+0x28>
 8000b14:	fbffffff 	.word	0xfbffffff

08000b18 <__clzsi2>:
 8000b18:	211c      	movs	r1, #28
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	041b      	lsls	r3, r3, #16
 8000b1e:	4298      	cmp	r0, r3
 8000b20:	d301      	bcc.n	8000b26 <__clzsi2+0xe>
 8000b22:	0c00      	lsrs	r0, r0, #16
 8000b24:	3910      	subs	r1, #16
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	d301      	bcc.n	8000b30 <__clzsi2+0x18>
 8000b2c:	0a00      	lsrs	r0, r0, #8
 8000b2e:	3908      	subs	r1, #8
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	4298      	cmp	r0, r3
 8000b34:	d301      	bcc.n	8000b3a <__clzsi2+0x22>
 8000b36:	0900      	lsrs	r0, r0, #4
 8000b38:	3904      	subs	r1, #4
 8000b3a:	a202      	add	r2, pc, #8	@ (adr r2, 8000b44 <__clzsi2+0x2c>)
 8000b3c:	5c10      	ldrb	r0, [r2, r0]
 8000b3e:	1840      	adds	r0, r0, r1
 8000b40:	4770      	bx	lr
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	02020304 	.word	0x02020304
 8000b48:	01010101 	.word	0x01010101
	...

08000b54 <__clzdi2>:
 8000b54:	b510      	push	{r4, lr}
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d103      	bne.n	8000b62 <__clzdi2+0xe>
 8000b5a:	f7ff ffdd 	bl	8000b18 <__clzsi2>
 8000b5e:	3020      	adds	r0, #32
 8000b60:	e002      	b.n	8000b68 <__clzdi2+0x14>
 8000b62:	0008      	movs	r0, r1
 8000b64:	f7ff ffd8 	bl	8000b18 <__clzsi2>
 8000b68:	bd10      	pop	{r4, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)

08000b6c <CC_APP_Nop>:
uint8_t CC_APP_BlinkCnts=CC_APP_LED_BOARD_FREQ_DEFAULT;		//Variable used to set the board's led blink frequency.
CC_APP_Config_t CC_APP_BoardData;							//Board's data

//FUNCTIONS
void CC_APP_Nop(void* param1, void* param2, void* param3)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	__asm__("nop");
 8000b78:	46c0      	nop			@ (mov r8, r8)
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <CC_APP_BoardLedBlinking>:

void CC_APP_BoardLedBlinking(void* const param1, void* param2, void* param3)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	uint8_t TotalCounts;					//Value who defines the frequency
	static uint8_t counts=0;				//Static var to keep the value between entries.

	TotalCounts=*((uint8_t*)param1);
 8000b90:	2117      	movs	r1, #23
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	7812      	ldrb	r2, [r2, #0]
 8000b98:	701a      	strb	r2, [r3, #0]
	if(counts<TotalCounts)					//Same TotalCounts on and off
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <CC_APP_BoardLedBlinking+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	187a      	adds	r2, r7, r1
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d906      	bls.n	8000bb4 <CC_APP_BoardLedBlinking+0x30>
	{
		counts++;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <CC_APP_BoardLedBlinking+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <CC_APP_BoardLedBlinking+0x44>)
 8000bb0:	701a      	strb	r2, [r3, #0]
	else
	{
		CC_ML_LedBoardToggle();
		counts=0;
	}
}
 8000bb2:	e004      	b.n	8000bbe <CC_APP_BoardLedBlinking+0x3a>
		CC_ML_LedBoardToggle();
 8000bb4:	f001 fe74 	bl	80028a0 <CC_ML_LedBoardToggle>
		counts=0;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <CC_APP_BoardLedBlinking+0x44>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b006      	add	sp, #24
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	200000e0 	.word	0x200000e0

08000bcc <CC_APP_SetBoardParam>:

void CC_APP_SetBoardParam(CC_APP_Config_t* const SysData)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	size_t  length;

	length=sizeof(SysData->HwCode);							//Extract the length of the array (already defined like a vector of sizeof(constant to store) length)
 8000bd4:	2311      	movs	r3, #17
 8000bd6:	60fb      	str	r3, [r7, #12]
	strncpy(SysData->HwCode,CC_APP_BOARDHWCODE, length);	//Stores the "constant" string into the system's struct
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4920      	ldr	r1, [pc, #128]	@ (8000c60 <CC_APP_SetBoardParam+0x94>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f007 ffaa 	bl	8008b38 <strncpy>
	SysData->HwCode[length-1]='\0';							//Ensures null terminator (to avoid problems)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	2100      	movs	r1, #0
 8000bec:	54d1      	strb	r1, [r2, r3]

	length=sizeof(SysData->SwVer);
 8000bee:	2313      	movs	r3, #19
 8000bf0:	60fb      	str	r3, [r7, #12]
	strncpy(SysData->SwVer,CC_APP_FWVER, length);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3311      	adds	r3, #17
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	491a      	ldr	r1, [pc, #104]	@ (8000c64 <CC_APP_SetBoardParam+0x98>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f007 ff9c 	bl	8008b38 <strncpy>
	SysData->SwVer[length-1]='\0';
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	18d3      	adds	r3, r2, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	745a      	strb	r2, [r3, #17]

	length=sizeof(SysData->HwCode);
 8000c0c:	2311      	movs	r3, #17
 8000c0e:	60fb      	str	r3, [r7, #12]
	strncpy(SysData->Summary,CC_APP_SUMMARY, length);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3324      	adds	r3, #36	@ 0x24
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	4914      	ldr	r1, [pc, #80]	@ (8000c68 <CC_APP_SetBoardParam+0x9c>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f007 ff8d 	bl	8008b38 <strncpy>
	SysData->Summary[length-1]='\0';
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	2124      	movs	r1, #36	@ 0x24
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	185b      	adds	r3, r3, r1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]

	length=sizeof(SysData->uC);
 8000c2e:	230e      	movs	r3, #14
 8000c30:	60fb      	str	r3, [r7, #12]
	strncpy(SysData->uC,CC_APP_MICROCONTROLLER, length);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	334d      	adds	r3, #77	@ 0x4d
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <CC_APP_SetBoardParam+0xa0>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f007 ff7c 	bl	8008b38 <strncpy>
	SysData->uC[length-1]='\0';
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	214d      	movs	r1, #77	@ 0x4d
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	185b      	adds	r3, r3, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]

	SysData->id=0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	225b      	movs	r2, #91	@ 0x5b
 8000c54:	2100      	movs	r1, #0
 8000c56:	5499      	strb	r1, [r3, r2]
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b004      	add	sp, #16
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	08008be0 	.word	0x08008be0
 8000c64:	08008bf4 	.word	0x08008bf4
 8000c68:	08008c08 	.word	0x08008c08
 8000c6c:	08008c34 	.word	0x08008c34

08000c70 <CC_LEDPWM_Init>:


//FUNCTIONS
void CC_LEDPWM_Init(CC_LEDPWM_SoftPwm_t* const pStripControl)
//Initializing the strip's control structure
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]

	pStripControl->Control.BaseCounts=CC_LEDPWM_SOFTPWMBASECOUNTS;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	22a4      	movs	r2, #164	@ 0xa4
 8000c84:	2164      	movs	r1, #100	@ 0x64
 8000c86:	5099      	str	r1, [r3, r2]
	pStripControl->Control.Counter=0;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	22a0      	movs	r2, #160	@ 0xa0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	5099      	str	r1, [r3, r2]

	while(i<CC_LEDPWM_TOTALSTRIPS)
 8000c90:	e01c      	b.n	8000ccc <CC_LEDPWM_Init+0x5c>
	{
		pStripControl->Strip[i].RedDuty=CC_LEDPWM_INITDUTY;
 8000c92:	200f      	movs	r0, #15
 8000c94:	183b      	adds	r3, r7, r0
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	54d1      	strb	r1, [r2, r3]
		pStripControl->Strip[i].GreenDuty=CC_LEDPWM_INITDUTY;
 8000ca0:	0001      	movs	r1, r0
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	18d3      	adds	r3, r2, r3
 8000cac:	3301      	adds	r3, #1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
		pStripControl->Strip[i].BlueDuty=CC_LEDPWM_INITDUTY;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	18d3      	adds	r3, r2, r3
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
		i++;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	3201      	adds	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
	while(i<CC_LEDPWM_TOTALSTRIPS)
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b09      	cmp	r3, #9
 8000cd4:	d9dd      	bls.n	8000c92 <CC_LEDPWM_Init+0x22>
	}
}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b004      	add	sp, #16
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <CC_LEDPWM_CntrCalculus>:

void CC_LEDPWM_CntrCalculus(void* const param1, void* const param2, void* const param3)
//Calculus of the equivalent counts to be reached to accomplish with the given duty
//1st parameter is the struct to manage the strips and 2nd is the number of strips
{
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	CC_LEDPWM_SoftPwm_t* const pStripData=(CC_LEDPWM_SoftPwm_t*)param1;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	61bb      	str	r3, [r7, #24]
	const uint8_t NumStrips=*((uint8_t*)param2);					// Casting and dereference
 8000cf0:	2317      	movs	r3, #23
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 8000cfa:	231f      	movs	r3, #31
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]

	while (i<NumStrips)
 8000d02:	e056      	b.n	8000db2 <CC_LEDPWM_CntrCalculus+0xd2>
	{
		pStripData->Strip[i].RedCounts=(pStripData->Strip[i].RedDuty*pStripData->Control.BaseCounts)/100;
 8000d04:	201f      	movs	r0, #31
 8000d06:	183b      	adds	r3, r7, r0
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	0019      	movs	r1, r3
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	22a4      	movs	r2, #164	@ 0xa4
 8000d16:	589b      	ldr	r3, [r3, r2]
 8000d18:	434b      	muls	r3, r1
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	0005      	movs	r5, r0
 8000d1e:	183b      	adds	r3, r7, r0
 8000d20:	781c      	ldrb	r4, [r3, #0]
 8000d22:	2164      	movs	r1, #100	@ 0x64
 8000d24:	0010      	movs	r0, r2
 8000d26:	f7ff f9f5 	bl	8000114 <__udivsi3>
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	0123      	lsls	r3, r4, #4
 8000d32:	18d3      	adds	r3, r2, r3
 8000d34:	3304      	adds	r3, #4
 8000d36:	6019      	str	r1, [r3, #0]
		pStripData->Strip[i].GreenCounts=(pStripData->Strip[i].GreenDuty*pStripData->Control.BaseCounts)/100;
 8000d38:	0028      	movs	r0, r5
 8000d3a:	183b      	adds	r3, r7, r0
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	18d3      	adds	r3, r2, r3
 8000d44:	3301      	adds	r3, #1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	0019      	movs	r1, r3
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	22a4      	movs	r2, #164	@ 0xa4
 8000d4e:	589b      	ldr	r3, [r3, r2]
 8000d50:	434b      	muls	r3, r1
 8000d52:	001a      	movs	r2, r3
 8000d54:	0005      	movs	r5, r0
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	781c      	ldrb	r4, [r3, #0]
 8000d5a:	2164      	movs	r1, #100	@ 0x64
 8000d5c:	0010      	movs	r0, r2
 8000d5e:	f7ff f9d9 	bl	8000114 <__udivsi3>
 8000d62:	0003      	movs	r3, r0
 8000d64:	0019      	movs	r1, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	0123      	lsls	r3, r4, #4
 8000d6a:	18d3      	adds	r3, r2, r3
 8000d6c:	3308      	adds	r3, #8
 8000d6e:	6019      	str	r1, [r3, #0]
		pStripData->Strip[i].BlueCounts=(pStripData->Strip[i].BlueDuty*pStripData->Control.BaseCounts)/100;
 8000d70:	0028      	movs	r0, r5
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	18d3      	adds	r3, r2, r3
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	0019      	movs	r1, r3
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	22a4      	movs	r2, #164	@ 0xa4
 8000d86:	589b      	ldr	r3, [r3, r2]
 8000d88:	434b      	muls	r3, r1
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	0005      	movs	r5, r0
 8000d8e:	183b      	adds	r3, r7, r0
 8000d90:	781c      	ldrb	r4, [r3, #0]
 8000d92:	2164      	movs	r1, #100	@ 0x64
 8000d94:	0010      	movs	r0, r2
 8000d96:	f7ff f9bd 	bl	8000114 <__udivsi3>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	0123      	lsls	r3, r4, #4
 8000da2:	18d3      	adds	r3, r2, r3
 8000da4:	330c      	adds	r3, #12
 8000da6:	6019      	str	r1, [r3, #0]
		i++;
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	197b      	adds	r3, r7, r5
 8000dae:	3201      	adds	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
	while (i<NumStrips)
 8000db2:	231f      	movs	r3, #31
 8000db4:	18fa      	adds	r2, r7, r3
 8000db6:	2317      	movs	r3, #23
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	7812      	ldrb	r2, [r2, #0]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3a0      	bcc.n	8000d04 <CC_LEDPWM_CntrCalculus+0x24>
	}
}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b008      	add	sp, #32
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}

08000dcc <CC_LEDPWM_IncreaseCntr>:

void CC_LEDPWM_IncreaseCntr(void* const param1, void* const param2, void* const param3)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	CC_LEDPWM_SoftPwm_t* const pStripData=(CC_LEDPWM_SoftPwm_t*) param1;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	617b      	str	r3, [r7, #20]
	pStripData->Control.Counter++;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	22a0      	movs	r2, #160	@ 0xa0
 8000de0:	589b      	ldr	r3, [r3, r2]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	21a0      	movs	r1, #160	@ 0xa0
 8000de8:	505a      	str	r2, [r3, r1]
	if (pStripData->Control.Counter>pStripData->Control.BaseCounts)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	22a0      	movs	r2, #160	@ 0xa0
 8000dee:	589a      	ldr	r2, [r3, r2]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	21a4      	movs	r1, #164	@ 0xa4
 8000df4:	585b      	ldr	r3, [r3, r1]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d903      	bls.n	8000e02 <CC_LEDPWM_IncreaseCntr+0x36>
	{
		pStripData->Control.Counter=0;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	22a0      	movs	r2, #160	@ 0xa0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	5099      	str	r1, [r3, r2]
	}
}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b006      	add	sp, #24
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <CC_LEDPWM_UpdatePwms>:

void CC_LEDPWM_UpdatePwms(void* const param1, void* const param2, void* const param3)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b088      	sub	sp, #32
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
	const CC_LEDPWM_SoftPwm_t* const pStripData=(CC_LEDPWM_SoftPwm_t*)param1;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
	const CC_LED_StripLedFuncts_t* const pStripFuncts=(CC_LED_StripLedFuncts_t*)param2;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	617b      	str	r3, [r7, #20]
	uint8_t i=0;
 8000e1e:	231f      	movs	r3, #31
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]

	while(i<CC_LEDPWM_TOTALSTRIPS)
 8000e26:	e05b      	b.n	8000ee0 <CC_LEDPWM_UpdatePwms+0xd6>
	{
		if (pStripData->Control.Counter<pStripData->Strip[i].RedCounts)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	22a0      	movs	r2, #160	@ 0xa0
 8000e2c:	589a      	ldr	r2, [r3, r2]
 8000e2e:	201f      	movs	r0, #31
 8000e30:	183b      	adds	r3, r7, r0
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	69b9      	ldr	r1, [r7, #24]
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	18cb      	adds	r3, r1, r3
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d206      	bcs.n	8000e50 <CC_LEDPWM_UpdatePwms+0x46>
		{
			(*pStripFuncts->pRedLedOnFunction[i])();
 8000e42:	183b      	adds	r3, r7, r0
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	58d3      	ldr	r3, [r2, r3]
 8000e4c:	4798      	blx	r3
 8000e4e:	e007      	b.n	8000e60 <CC_LEDPWM_UpdatePwms+0x56>
		}
		else
		{
			(*pStripFuncts->pRedLedOffFunction[i])();
 8000e50:	231f      	movs	r3, #31
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	320a      	adds	r2, #10
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	58d3      	ldr	r3, [r2, r3]
 8000e5e:	4798      	blx	r3
		}
		if (pStripData->Control.Counter<pStripData->Strip[i].GreenCounts)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	22a0      	movs	r2, #160	@ 0xa0
 8000e64:	589a      	ldr	r2, [r3, r2]
 8000e66:	201f      	movs	r0, #31
 8000e68:	183b      	adds	r3, r7, r0
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	69b9      	ldr	r1, [r7, #24]
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	18cb      	adds	r3, r1, r3
 8000e72:	3308      	adds	r3, #8
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d207      	bcs.n	8000e8a <CC_LEDPWM_UpdatePwms+0x80>
		{
			(*pStripFuncts->pGreenLedOnFunction[i])();
 8000e7a:	183b      	adds	r3, r7, r0
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3214      	adds	r2, #20
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	58d3      	ldr	r3, [r2, r3]
 8000e86:	4798      	blx	r3
 8000e88:	e007      	b.n	8000e9a <CC_LEDPWM_UpdatePwms+0x90>
		}
		else
		{
			(*pStripFuncts->pGreenLedOffFunction[i])();
 8000e8a:	231f      	movs	r3, #31
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	321e      	adds	r2, #30
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	58d3      	ldr	r3, [r2, r3]
 8000e98:	4798      	blx	r3
		}
		if (pStripData->Control.Counter<pStripData->Strip[i].BlueCounts)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	22a0      	movs	r2, #160	@ 0xa0
 8000e9e:	589a      	ldr	r2, [r3, r2]
 8000ea0:	201f      	movs	r0, #31
 8000ea2:	183b      	adds	r3, r7, r0
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	69b9      	ldr	r1, [r7, #24]
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	18cb      	adds	r3, r1, r3
 8000eac:	330c      	adds	r3, #12
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <CC_LEDPWM_UpdatePwms+0xba>
		{
			(*pStripFuncts->pBlueLedOnFunction[i])();
 8000eb4:	183b      	adds	r3, r7, r0
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3228      	adds	r2, #40	@ 0x28
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	58d3      	ldr	r3, [r2, r3]
 8000ec0:	4798      	blx	r3
 8000ec2:	e007      	b.n	8000ed4 <CC_LEDPWM_UpdatePwms+0xca>
		}
		else
		{
			(*pStripFuncts->pBlueLedOffFunction[i])();
 8000ec4:	231f      	movs	r3, #31
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3232      	adds	r2, #50	@ 0x32
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	58d3      	ldr	r3, [r2, r3]
 8000ed2:	4798      	blx	r3
		}
		i++;
 8000ed4:	211f      	movs	r1, #31
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	3201      	adds	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
	while(i<CC_LEDPWM_TOTALSTRIPS)
 8000ee0:	231f      	movs	r3, #31
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b09      	cmp	r3, #9
 8000ee8:	d99e      	bls.n	8000e28 <CC_LEDPWM_UpdatePwms+0x1e>
	}
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b008      	add	sp, #32
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <CC_SCHDLR_Scheduler>:
//Procedure thought to be executed over a non-stop timer interruption.
//Every time it triggers a task is executed (function or procedures).
//and next execution it will execute next task.
//Up to CC_SCHDLR_MAX_THREADS tasks. Only one every time, but restarting
//when the last is done.
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	CC_SCHDLR_Scheduler_t* pSchedulerData;

	pSchedulerData = (CC_SCHDLR_Scheduler_t*)pSchedulerStruct;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	617b      	str	r3, [r7, #20]
	((void (*)(void*, void*, void*))pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].function)	//Task pSchedulerData->TaskOngoing dereferencing and calling
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	22b0      	movs	r2, #176	@ 0xb0
 8000f08:	5c9b      	ldrb	r3, [r3, r2]
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	58d3      	ldr	r3, [r2, r3]
 8000f12:	001c      	movs	r4, r3
	(
		pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].input_param1,							//Task pSchedulerData->TaskOngoing parameter 1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	22b0      	movs	r2, #176	@ 0xb0
 8000f18:	5c9b      	ldrb	r3, [r3, r2]
	((void (*)(void*, void*, void*))pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].function)	//Task pSchedulerData->TaskOngoing dereferencing and calling
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	18d3      	adds	r3, r2, r3
 8000f20:	3304      	adds	r3, #4
 8000f22:	6818      	ldr	r0, [r3, #0]
		pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].input_param2, 							//Task pSchedulerData->TaskOngoing parameter 2
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	22b0      	movs	r2, #176	@ 0xb0
 8000f28:	5c9b      	ldrb	r3, [r3, r2]
	((void (*)(void*, void*, void*))pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].function)	//Task pSchedulerData->TaskOngoing dereferencing and calling
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	18d3      	adds	r3, r2, r3
 8000f30:	3308      	adds	r3, #8
 8000f32:	6819      	ldr	r1, [r3, #0]
		pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].input_param3 							//Task pSchedulerData->TaskOngoing parameter 3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	22b0      	movs	r2, #176	@ 0xb0
 8000f38:	5c9b      	ldrb	r3, [r3, r2]
	((void (*)(void*, void*, void*))pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].function)	//Task pSchedulerData->TaskOngoing dereferencing and calling
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	18d3      	adds	r3, r2, r3
 8000f40:	330c      	adds	r3, #12
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	001a      	movs	r2, r3
 8000f46:	47a0      	blx	r4
	);
	pSchedulerData->IntCount++;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	33a8      	adds	r3, #168	@ 0xa8
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2001      	movs	r0, #1
 8000f52:	2100      	movs	r1, #0
 8000f54:	1812      	adds	r2, r2, r0
 8000f56:	414b      	adcs	r3, r1
 8000f58:	6979      	ldr	r1, [r7, #20]
 8000f5a:	31a8      	adds	r1, #168	@ 0xa8
 8000f5c:	600a      	str	r2, [r1, #0]
 8000f5e:	604b      	str	r3, [r1, #4]
	pSchedulerData->TaskOngoing++;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	22b0      	movs	r2, #176	@ 0xb0
 8000f64:	5c9b      	ldrb	r3, [r3, r2]
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2d9      	uxtb	r1, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	22b0      	movs	r2, #176	@ 0xb0
 8000f6e:	5499      	strb	r1, [r3, r2]
	if(pSchedulerData->TaskOngoing==CC_SCHDLR_MAX_THREADS)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	22b0      	movs	r2, #176	@ 0xb0
 8000f74:	5c9b      	ldrb	r3, [r3, r2]
 8000f76:	2b0a      	cmp	r3, #10
 8000f78:	d103      	bne.n	8000f82 <CC_SCHDLR_Scheduler+0x8e>
	{
		pSchedulerData->TaskOngoing=0;		//Restart tasks
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	22b0      	movs	r2, #176	@ 0xb0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	5499      	strb	r1, [r3, r2]
	}
	CC_SCHDLR_CheckForSchedulerOverflow(pSchedulerData);
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 f805 	bl	8000f94 <CC_SCHDLR_CheckForSchedulerOverflow>
}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b007      	add	sp, #28
 8000f90:	bd90      	pop	{r4, r7, pc}
	...

08000f94 <CC_SCHDLR_CheckForSchedulerOverflow>:

void CC_SCHDLR_CheckForSchedulerOverflow(CC_SCHDLR_Scheduler_t* const pSchedulerData)
//It is checked if an interrupt happened while ISR is attended.
//It should be used inside the timer's ISR.
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if (CC_ML_CheckTimIntFlag(&CC_ML_SCHEDULER_BASETIME_HANDLER)==1)
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <CC_SCHDLR_CheckForSchedulerOverflow+0x38>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f001 fc71 	bl	8002886 <CC_ML_CheckTimIntFlag>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10b      	bne.n	8000fc2 <CC_SCHDLR_CheckForSchedulerOverflow+0x2e>
	{
		pSchedulerData->MissIntCnt++;  		//Overflow count
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	33b8      	adds	r3, #184	@ 0xb8
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	1812      	adds	r2, r2, r0
 8000fb8:	414b      	adcs	r3, r1
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	31b8      	adds	r1, #184	@ 0xb8
 8000fbe:	600a      	str	r2, [r1, #0]
 8000fc0:	604b      	str	r3, [r1, #4]
	}
}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	2000052c 	.word	0x2000052c

08000fd0 <CC_SCHDLR_SchedulerUsage>:
//ISR starting, and stop before that.
//Then both counts are compared and the % of time used to execute the current
//scheduler's task is calculated.
//If needed this calculus could be done outside the ISR as it is a float calculus
//and therefore it is slow.
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	000a      	movs	r2, r1
 8000fda:	1cfb      	adds	r3, r7, #3
 8000fdc:	701a      	strb	r2, [r3, #0]
	uint32_t ControllerTimerCounts;
	uint32_t SchedulerTimerTotalCounts;
	float usage;

	ControllerTimerCounts=CC_ML_GetTimerElapsedCounts(&CC_ML_SCHEDULER_CHRONO_HANDLER);
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <CC_SCHDLR_SchedulerUsage+0x80>)
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f001 fc01 	bl	80027e8 <CC_ML_GetTimerElapsedCounts>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	617b      	str	r3, [r7, #20]
	pSchedulerControl->TaskUsageCounts[task_number]=ControllerTimerCounts;
 8000fea:	1cfb      	adds	r3, r7, #3
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	320a      	adds	r2, #10
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	6979      	ldr	r1, [r7, #20]
 8000ff6:	50d1      	str	r1, [r2, r3]
	SchedulerTimerTotalCounts=CC_ML_GetTimerLimitCounts(&CC_ML_SCHEDULER_BASETIME_HANDLER);
 8000ff8:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <CC_SCHDLR_SchedulerUsage+0x84>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f001 fc01 	bl	8002802 <CC_ML_GetTimerLimitCounts>
 8001000:	0003      	movs	r3, r0
 8001002:	613b      	str	r3, [r7, #16]
	pSchedulerControl->TotalAvailableCounts[task_number]=SchedulerTimerTotalCounts;
 8001004:	1cfb      	adds	r3, r7, #3
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3214      	adds	r2, #20
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	50d1      	str	r1, [r2, r3]
	usage=((float)ControllerTimerCounts)/((float)SchedulerTimerTotalCounts);
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff fd3e 	bl	8000a94 <__aeabi_ui2f>
 8001018:	1c04      	adds	r4, r0, #0
 800101a:	6938      	ldr	r0, [r7, #16]
 800101c:	f7ff fd3a 	bl	8000a94 <__aeabi_ui2f>
 8001020:	1c03      	adds	r3, r0, #0
 8001022:	1c19      	adds	r1, r3, #0
 8001024:	1c20      	adds	r0, r4, #0
 8001026:	f7ff fad7 	bl	80005d8 <__aeabi_fdiv>
 800102a:	1c03      	adds	r3, r0, #0
 800102c:	60fb      	str	r3, [r7, #12]
	usage=usage*100.0;
 800102e:	490a      	ldr	r1, [pc, #40]	@ (8001058 <CC_SCHDLR_SchedulerUsage+0x88>)
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff fbf1 	bl	8000818 <__aeabi_fmul>
 8001036:	1c03      	adds	r3, r0, #0
 8001038:	60fb      	str	r3, [r7, #12]
	pSchedulerControl->TaskUsageRatio[task_number]=usage;
 800103a:	1cfb      	adds	r3, r7, #3
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	68f9      	ldr	r1, [r7, #12]
 8001044:	50d1      	str	r1, [r2, r3]
}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b007      	add	sp, #28
 800104c:	bd90      	pop	{r4, r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	20000494 	.word	0x20000494
 8001054:	2000052c 	.word	0x2000052c
 8001058:	42c80000 	.word	0x42c80000

0800105c <CC_SCHDLR_InitScheduler>:

void CC_SCHDLR_InitScheduler(CC_SCHDLR_Scheduler_t* const data)
//Loading the scheduler's structure with functions and/or procedures to launch,
//and also their parameters.
//Void pointers to be able to launch different kinds of functions.
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	void (*pfunction) (void*, void*, void*);		//Pointer to void function with 3 void pointers as a parameters
	CC_SCHDLR_Scheduler_t* pNestedScheduler;	//Pointer to nested scheduler data

	data->TaskOngoing=0;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	22b0      	movs	r2, #176	@ 0xb0
 8001068:	2100      	movs	r1, #0
 800106a:	5499      	strb	r1, [r3, r2]
	data->IntCount=0;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	33a8      	adds	r3, #168	@ 0xa8
 8001070:	0019      	movs	r1, r3
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	600a      	str	r2, [r1, #0]
 8001078:	604b      	str	r3, [r1, #4]
	data->MissIntCnt=0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	33b8      	adds	r3, #184	@ 0xb8
 800107e:	0019      	movs	r1, r3
 8001080:	2200      	movs	r2, #0
 8001082:	2300      	movs	r3, #0
 8001084:	600a      	str	r2, [r1, #0]
 8001086:	604b      	str	r3, [r1, #4]
	data->BaseTimems=CC_SCHDLR_BASE_TIME;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	22a0      	movs	r2, #160	@ 0xa0
 800108c:	2101      	movs	r1, #1
 800108e:	5499      	strb	r1, [r3, r2]

	pfunction=&CC_APP_Nop;										//Task0 initialization
 8001090:	4b4c      	ldr	r3, [pc, #304]	@ (80011c4 <CC_SCHDLR_InitScheduler+0x168>)
 8001092:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[0].function=(void*)pfunction;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	601a      	str	r2, [r3, #0]
	data->Task2Launch[0].input_param1=(void*)NULL;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
	data->Task2Launch[0].input_param2=(void*)NULL;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
	data->Task2Launch[0].input_param3=(void*)NULL;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]

	pfunction=&CC_APP_Nop;										//Task1 initialization
 80010ac:	4b45      	ldr	r3, [pc, #276]	@ (80011c4 <CC_SCHDLR_InitScheduler+0x168>)
 80010ae:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[1].function=(void*)pfunction;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	611a      	str	r2, [r3, #16]
	data->Task2Launch[1].input_param1=(void*)NULL;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
	data->Task2Launch[1].input_param2=(void*)NULL;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
	data->Task2Launch[1].input_param3=(void*)NULL;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]

	pfunction=&CC_APP_Nop;										//Task2 initialization
 80010c8:	4b3e      	ldr	r3, [pc, #248]	@ (80011c4 <CC_SCHDLR_InitScheduler+0x168>)
 80010ca:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[2].function=(void*)pfunction;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	621a      	str	r2, [r3, #32]
	data->Task2Launch[2].input_param1=(void*)NULL;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	@ 0x24
	data->Task2Launch[2].input_param2=(void*)NULL;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	629a      	str	r2, [r3, #40]	@ 0x28
	data->Task2Launch[2].input_param3=(void*)NULL;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	62da      	str	r2, [r3, #44]	@ 0x2c

	pfunction=&CC_APP_Nop;										//Task3 initialization
 80010e4:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <CC_SCHDLR_InitScheduler+0x168>)
 80010e6:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[3].function=(void*)pfunction;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	631a      	str	r2, [r3, #48]	@ 0x30
	data->Task2Launch[3].input_param1=(void*)NULL;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	635a      	str	r2, [r3, #52]	@ 0x34
	data->Task2Launch[3].input_param2=(void*)NULL;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	639a      	str	r2, [r3, #56]	@ 0x38
	data->Task2Launch[3].input_param3=(void*)NULL;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	@ 0x3c

	pfunction=&CC_APP_Nop;										//Task4 initialization
 8001100:	4b30      	ldr	r3, [pc, #192]	@ (80011c4 <CC_SCHDLR_InitScheduler+0x168>)
 8001102:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[4].function=(void*)pfunction;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	641a      	str	r2, [r3, #64]	@ 0x40
	data->Task2Launch[4].input_param1=(void*)NULL;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	645a      	str	r2, [r3, #68]	@ 0x44
	data->Task2Launch[4].input_param2=(void*)NULL;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	649a      	str	r2, [r3, #72]	@ 0x48
	data->Task2Launch[4].input_param3=(void*)NULL;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	64da      	str	r2, [r3, #76]	@ 0x4c

	pfunction=&CC_APP_Nop;										//Task5 initialization
 800111c:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <CC_SCHDLR_InitScheduler+0x168>)
 800111e:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[5].function=(void*)pfunction;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	651a      	str	r2, [r3, #80]	@ 0x50
	data->Task2Launch[5].input_param1=(void*)NULL;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	655a      	str	r2, [r3, #84]	@ 0x54
	data->Task2Launch[5].input_param2=(void*)NULL;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	659a      	str	r2, [r3, #88]	@ 0x58
	data->Task2Launch[5].input_param3=(void*)NULL;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	65da      	str	r2, [r3, #92]	@ 0x5c

	pfunction=&CC_APP_Nop;										//Task6 initialization
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <CC_SCHDLR_InitScheduler+0x168>)
 800113a:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[6].function=(void*)pfunction;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	661a      	str	r2, [r3, #96]	@ 0x60
	data->Task2Launch[6].input_param1=(void*)NULL;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	665a      	str	r2, [r3, #100]	@ 0x64
	data->Task2Launch[6].input_param2=(void*)NULL;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	669a      	str	r2, [r3, #104]	@ 0x68
	data->Task2Launch[6].input_param3=(void*)NULL;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	66da      	str	r2, [r3, #108]	@ 0x6c

	pfunction=&CC_APP_Nop;										//Task7 initialization
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <CC_SCHDLR_InitScheduler+0x168>)
 8001156:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[7].function=(void*)pfunction;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	671a      	str	r2, [r3, #112]	@ 0x70
	data->Task2Launch[7].input_param1=(void*)NULL;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	675a      	str	r2, [r3, #116]	@ 0x74
	data->Task2Launch[7].input_param2=(void*)NULL;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	679a      	str	r2, [r3, #120]	@ 0x78
	data->Task2Launch[7].input_param3=(void*)NULL;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	67da      	str	r2, [r3, #124]	@ 0x7c

	pfunction=&CC_APP_Nop;										//Task8 initialization
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <CC_SCHDLR_InitScheduler+0x168>)
 8001172:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[8].function=(void*)pfunction;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	505a      	str	r2, [r3, r1]
	data->Task2Launch[8].input_param1=(void*)NULL;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2284      	movs	r2, #132	@ 0x84
 8001180:	2100      	movs	r1, #0
 8001182:	5099      	str	r1, [r3, r2]
	data->Task2Launch[8].input_param2=(void*)NULL;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2288      	movs	r2, #136	@ 0x88
 8001188:	2100      	movs	r1, #0
 800118a:	5099      	str	r1, [r3, r2]
	data->Task2Launch[8].input_param3=(void*)NULL;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	228c      	movs	r2, #140	@ 0x8c
 8001190:	2100      	movs	r1, #0
 8001192:	5099      	str	r1, [r3, r2]


	pfunction=&CC_SCHDLR_Scheduler;								//Task9 initialization. Nested scheduler
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <CC_SCHDLR_InitScheduler+0x16c>)
 8001196:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[9].function=(void*)pfunction;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2190      	movs	r1, #144	@ 0x90
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	505a      	str	r2, [r3, r1]
	pNestedScheduler=&CC_SCHDLR_NestedScheduler;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <CC_SCHDLR_InitScheduler+0x170>)
 80011a2:	60bb      	str	r3, [r7, #8]
	data->Task2Launch[9].input_param1=(void*)pNestedScheduler;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2194      	movs	r1, #148	@ 0x94
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	505a      	str	r2, [r3, r1]
	data->Task2Launch[9].input_param2=(void*)NULL;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2298      	movs	r2, #152	@ 0x98
 80011b0:	2100      	movs	r1, #0
 80011b2:	5099      	str	r1, [r3, r2]
	data->Task2Launch[9].input_param3=(void*)NULL;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	229c      	movs	r2, #156	@ 0x9c
 80011b8:	2100      	movs	r1, #0
 80011ba:	5099      	str	r1, [r3, r2]
}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b004      	add	sp, #16
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	08000b6d 	.word	0x08000b6d
 80011c8:	08000ef5 	.word	0x08000ef5
 80011cc:	20000250 	.word	0x20000250

080011d0 <CC_SCHDLR_InitNestedScheduler>:

void CC_SCHDLR_InitNestedScheduler(CC_SCHDLR_Scheduler_t* const data)
//Loading the scheduler's structure with functions and/or procedures to launch,
//and also their parameters.
//Void pointers to be able to launch different kinds of functions.
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	@ 0x30
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	FDCAN_TxHeaderTypeDef* 	pFDCAN_TxHeaderTypeDef;	//Pointer FDCAN_TxHeaderTypeDef
	CC_LEDPWM_SoftPwm_t* 	pCC_LEDPWM_SoftPwm;		//Pointer to strip leds control data
	IWDG_HandleTypeDef*		pIWDG_HandleTypeDef;	//Pointer to inner watchdog handler
	const uint8_t* 			puint8_2;				//Constant pointer to a constant uint8_t data

	data->TaskOngoing=0;							//AIXO HO VULL A FORA. PEL NESTED ES RARO
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	22b0      	movs	r2, #176	@ 0xb0
 80011dc:	2100      	movs	r1, #0
 80011de:	5499      	strb	r1, [r3, r2]
	data->IntCount=0;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	33a8      	adds	r3, #168	@ 0xa8
 80011e4:	0019      	movs	r1, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	2300      	movs	r3, #0
 80011ea:	600a      	str	r2, [r1, #0]
 80011ec:	604b      	str	r3, [r1, #4]
	data->MissIntCnt=0;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	33b8      	adds	r3, #184	@ 0xb8
 80011f2:	0019      	movs	r1, r3
 80011f4:	2200      	movs	r2, #0
 80011f6:	2300      	movs	r3, #0
 80011f8:	600a      	str	r2, [r1, #0]
 80011fa:	604b      	str	r3, [r1, #4]
	data->BaseTimems=CC_SCHDLR_BASE_TIME*CC_SCHDLR_MAX_THREADS;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	22a0      	movs	r2, #160	@ 0xa0
 8001200:	210a      	movs	r1, #10
 8001202:	5499      	strb	r1, [r3, r2]

	pfunction=&CC_APP_BoardLedBlinking;							//Task9.0 initialization. Led blinking
 8001204:	4b56      	ldr	r3, [pc, #344]	@ (8001360 <CC_SCHDLR_InitNestedScheduler+0x190>)
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[0].function=(void*)pfunction;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800120c:	601a      	str	r2, [r3, #0]
	puint8=&CC_APP_BlinkCnts;
 800120e:	4b55      	ldr	r3, [pc, #340]	@ (8001364 <CC_SCHDLR_InitNestedScheduler+0x194>)
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
	data->Task2Launch[0].input_param1=(void*)puint8;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001216:	605a      	str	r2, [r3, #4]
	data->Task2Launch[0].input_param2=(void*)NULL;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
	data->Task2Launch[0].input_param3=(void*)NULL;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]

	pfunction=&CC_ML_GetDipSwitch4pos;							//Task9.1 initialization. DIP-Switch update
 8001224:	4b50      	ldr	r3, [pc, #320]	@ (8001368 <CC_SCHDLR_InitNestedScheduler+0x198>)
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[1].function=(void*) pfunction;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800122c:	611a      	str	r2, [r3, #16]
	pCC_DIPSW_DipSw=&CC_DIPSW_DipSwitch;
 800122e:	4b4f      	ldr	r3, [pc, #316]	@ (800136c <CC_SCHDLR_InitNestedScheduler+0x19c>)
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[1].input_param1=(void*)pCC_DIPSW_DipSw;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001236:	615a      	str	r2, [r3, #20]
	data->Task2Launch[1].input_param2=(void*)NULL;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
	data->Task2Launch[1].input_param3=(void*)NULL;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]

	pfunction=&CC_ML_UpdateSysIdFromDipSwitch;					//Task9.2 initialization. Board Id update from DIP-Switch
 8001244:	4b4a      	ldr	r3, [pc, #296]	@ (8001370 <CC_SCHDLR_InitNestedScheduler+0x1a0>)
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[2].function=(void*)pfunction;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800124c:	621a      	str	r2, [r3, #32]
	pCC_DIPSW_DipSw=&CC_DIPSW_DipSwitch;
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <CC_SCHDLR_InitNestedScheduler+0x19c>)
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
	pCC_SYS_Config=&CC_APP_BoardData;
 8001252:	4b48      	ldr	r3, [pc, #288]	@ (8001374 <CC_SCHDLR_InitNestedScheduler+0x1a4>)
 8001254:	623b      	str	r3, [r7, #32]
	data->Task2Launch[2].input_param1=(void*)pCC_SYS_Config;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a3a      	ldr	r2, [r7, #32]
 800125a:	625a      	str	r2, [r3, #36]	@ 0x24
	data->Task2Launch[2].input_param2=(void*)pCC_DIPSW_DipSw;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001260:	629a      	str	r2, [r3, #40]	@ 0x28
	data->Task2Launch[2].input_param3=(void*)NULL;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c

	pfunction=&CC_SM_UsartSM;									//Task9.3 initialization. USART state machine
 8001268:	4b43      	ldr	r3, [pc, #268]	@ (8001378 <CC_SCHDLR_InitNestedScheduler+0x1a8>)
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[3].function=(void*)pfunction;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001270:	631a      	str	r2, [r3, #48]	@ 0x30
	data->Task2Launch[3].input_param1=(void*)NULL;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	635a      	str	r2, [r3, #52]	@ 0x34
	data->Task2Launch[3].input_param2=(void*)NULL;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	639a      	str	r2, [r3, #56]	@ 0x38
	data->Task2Launch[3].input_param3=(void*)NULL;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	63da      	str	r2, [r3, #60]	@ 0x3c

	pfunction=&CC_ML_SendMessageCan;							//Task9.4 initialization. Send CAN
 8001284:	4b3d      	ldr	r3, [pc, #244]	@ (800137c <CC_SCHDLR_InitNestedScheduler+0x1ac>)
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[4].function=(void*)pfunction;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800128c:	641a      	str	r2, [r3, #64]	@ 0x40
	pFDCAN_HandleTypeDef=&CC_ML_PERIPHERALS_CAN;
 800128e:	4b3c      	ldr	r3, [pc, #240]	@ (8001380 <CC_SCHDLR_InitNestedScheduler+0x1b0>)
 8001290:	61fb      	str	r3, [r7, #28]
	pFDCAN_TxHeaderTypeDef=pCC_ML_CAN_TxHeader;
 8001292:	4b3c      	ldr	r3, [pc, #240]	@ (8001384 <CC_SCHDLR_InitNestedScheduler+0x1b4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	61bb      	str	r3, [r7, #24]
	puint8=CC_CAN_TxData;
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <CC_SCHDLR_InitNestedScheduler+0x1b8>)
 800129a:	62bb      	str	r3, [r7, #40]	@ 0x28
	data->Task2Launch[4].input_param1=(void*)pFDCAN_HandleTypeDef;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	645a      	str	r2, [r3, #68]	@ 0x44
	data->Task2Launch[4].input_param2=(void*)pFDCAN_TxHeaderTypeDef;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	649a      	str	r2, [r3, #72]	@ 0x48
	data->Task2Launch[4].input_param3=(void*)puint8;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012ac:	64da      	str	r2, [r3, #76]	@ 0x4c

	pfunction=&CC_LEDPWM_CntrCalculus;							//Task9.5 initialization. Calculus of the needed counts the get the desired PWM (soft PWM)
 80012ae:	4b37      	ldr	r3, [pc, #220]	@ (800138c <CC_SCHDLR_InitNestedScheduler+0x1bc>)
 80012b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[5].function=(void*)pfunction;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012b6:	651a      	str	r2, [r3, #80]	@ 0x50
	pCC_LEDPWM_SoftPwm=&CC_LEDPWM_Strip;
 80012b8:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <CC_SCHDLR_InitNestedScheduler+0x1c0>)
 80012ba:	617b      	str	r3, [r7, #20]
	data->Task2Launch[5].input_param1=(void*)pCC_LEDPWM_SoftPwm;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	655a      	str	r2, [r3, #84]	@ 0x54
	puint8_2=&CC_LEDPWM_TotalStrips;
 80012c2:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <CC_SCHDLR_InitNestedScheduler+0x1c4>)
 80012c4:	613b      	str	r3, [r7, #16]
	data->Task2Launch[5].input_param2=(void*)puint8_2;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	659a      	str	r2, [r3, #88]	@ 0x58
	data->Task2Launch[5].input_param3=(void*)NULL;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	65da      	str	r2, [r3, #92]	@ 0x5c

	pfunction=&CC_APP_Nop;										//Task9.6 initialization
 80012d2:	4b31      	ldr	r3, [pc, #196]	@ (8001398 <CC_SCHDLR_InitNestedScheduler+0x1c8>)
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[6].function=(void*)pfunction;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012da:	661a      	str	r2, [r3, #96]	@ 0x60
	data->Task2Launch[6].input_param1=(void*)NULL;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	665a      	str	r2, [r3, #100]	@ 0x64
	data->Task2Launch[6].input_param2=(void*)NULL;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	669a      	str	r2, [r3, #104]	@ 0x68
	data->Task2Launch[6].input_param3=(void*)NULL;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	66da      	str	r2, [r3, #108]	@ 0x6c

	pfunction=&CC_APP_Nop;										//Task9.7 initialization
 80012ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <CC_SCHDLR_InitNestedScheduler+0x1c8>)
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[7].function=(void*)pfunction;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012f6:	671a      	str	r2, [r3, #112]	@ 0x70
	data->Task2Launch[7].input_param1=(void*)NULL;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	675a      	str	r2, [r3, #116]	@ 0x74
	data->Task2Launch[7].input_param2=(void*)NULL;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	679a      	str	r2, [r3, #120]	@ 0x78
	data->Task2Launch[7].input_param3=(void*)NULL;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	67da      	str	r2, [r3, #124]	@ 0x7c

	pfunction=&CC_APP_Nop;										//Task9.8 initialization
 800130a:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <CC_SCHDLR_InitNestedScheduler+0x1c8>)
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[8].function=(void*)pfunction;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2180      	movs	r1, #128	@ 0x80
 8001312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001314:	505a      	str	r2, [r3, r1]
	data->Task2Launch[8].input_param1=(void*)NULL;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2284      	movs	r2, #132	@ 0x84
 800131a:	2100      	movs	r1, #0
 800131c:	5099      	str	r1, [r3, r2]
	data->Task2Launch[8].input_param2=(void*)NULL;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2288      	movs	r2, #136	@ 0x88
 8001322:	2100      	movs	r1, #0
 8001324:	5099      	str	r1, [r3, r2]
	data->Task2Launch[8].input_param3=(void*)NULL;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	228c      	movs	r2, #140	@ 0x8c
 800132a:	2100      	movs	r1, #0
 800132c:	5099      	str	r1, [r3, r2]
//	data->Task2Launch[9].function=(void*)pfunction;
//	data->Task2Launch[9].input_param1=(void*)NULL;
//	data->Task2Launch[9].input_param2=(void*)NULL;
//	data->Task2Launch[9].input_param3=(void*)NULL;

	pfunction=&CC_ML_RefreshWatchdog;							//Task9.9 initialization. Inner Watchdog refresh. Trigger at 200ms
 800132e:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <CC_SCHDLR_InitNestedScheduler+0x1cc>)
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
	data->Task2Launch[9].function=(void*)pfunction;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2190      	movs	r1, #144	@ 0x90
 8001336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001338:	505a      	str	r2, [r3, r1]
	pIWDG_HandleTypeDef=&CC_WATCHDOG_HANDLER;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <CC_SCHDLR_InitNestedScheduler+0x1d0>)
 800133c:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[9].input_param1=(void*)pIWDG_HandleTypeDef;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2194      	movs	r1, #148	@ 0x94
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	505a      	str	r2, [r3, r1]
	data->Task2Launch[9].input_param2=(void*)NULL;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2298      	movs	r2, #152	@ 0x98
 800134a:	2100      	movs	r1, #0
 800134c:	5099      	str	r1, [r3, r2]
	data->Task2Launch[9].input_param3=(void*)NULL;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	229c      	movs	r2, #156	@ 0x9c
 8001352:	2100      	movs	r1, #0
 8001354:	5099      	str	r1, [r3, r2]
}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b00c      	add	sp, #48	@ 0x30
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	08000b85 	.word	0x08000b85
 8001364:	20000000 	.word	0x20000000
 8001368:	080027a3 	.word	0x080027a3
 800136c:	200003ec 	.word	0x200003ec
 8001370:	080027c3 	.word	0x080027c3
 8001374:	20000084 	.word	0x20000084
 8001378:	080013a5 	.word	0x080013a5
 800137c:	08002769 	.word	0x08002769
 8001380:	200003f4 	.word	0x200003f4
 8001384:	20000008 	.word	0x20000008
 8001388:	20000398 	.word	0x20000398
 800138c:	08000ce1 	.word	0x08000ce1
 8001390:	200000e4 	.word	0x200000e4
 8001394:	08008f54 	.word	0x08008f54
 8001398:	08000b6d 	.word	0x08000b6d
 800139c:	08002565 	.word	0x08002565
 80013a0:	20000458 	.word	0x20000458

080013a4 <CC_SM_UsartSM>:

//GLOBAL VARIABLES DECLARATION

//FUNCTIONS
void CC_SM_UsartSM(void* param1, void* param2, void* param3)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b0ad      	sub	sp, #180	@ 0xb4
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
	static CC_SM_SerialStatesTypedef UsartSM_state=UART_SM_START_MSG;
	char sendString[TX_BUFF_LENGTH];
	char input_char=*(pCC_ML_SERIAL_DEBUG_RxData+0);		//Getting the character received from UART
 80013b0:	4bcf      	ldr	r3, [pc, #828]	@ (80016f0 <CC_SM_UsartSM+0x34c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	2313      	movs	r3, #19
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	701a      	strb	r2, [r3, #0]
	uint32_t duty=0;
 80013bc:	2300      	movs	r3, #0
 80013be:	22ac      	movs	r2, #172	@ 0xac
 80013c0:	18ba      	adds	r2, r7, r2
 80013c2:	6013      	str	r3, [r2, #0]
	static char input_string[3]={0,0,0};
	static uint8_t char_number=0;
	uint8_t i=0;
 80013c4:	23ab      	movs	r3, #171	@ 0xab
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]

	switch (UsartSM_state)
 80013cc:	4bc9      	ldr	r3, [pc, #804]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b10      	cmp	r3, #16
 80013d2:	d900      	bls.n	80013d6 <CC_SM_UsartSM+0x32>
 80013d4:	e33c      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>
 80013d6:	009a      	lsls	r2, r3, #2
 80013d8:	4bc7      	ldr	r3, [pc, #796]	@ (80016f8 <CC_SM_UsartSM+0x354>)
 80013da:	18d3      	adds	r3, r2, r3
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	469f      	mov	pc, r3
	{
	case UART_SM_START_MSG:
		CC_ML_SendUARTString((const char*)"Should we start?\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 80013e0:	4ac6      	ldr	r2, [pc, #792]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80013e2:	4bc7      	ldr	r3, [pc, #796]	@ (8001700 <CC_SM_UsartSM+0x35c>)
 80013e4:	0011      	movs	r1, r2
 80013e6:	0018      	movs	r0, r3
 80013e8:	f001 f90a 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MSG_Y_OR_N, &CC_ML_SERIAL_DEBUG_HANDLER);
 80013ec:	4ac3      	ldr	r2, [pc, #780]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80013ee:	4bc5      	ldr	r3, [pc, #788]	@ (8001704 <CC_SM_UsartSM+0x360>)
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f001 f904 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_STARTING;
 80013f8:	4bbe      	ldr	r3, [pc, #760]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
	break;
 80013fe:	e327      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_STARTING:
		switch(input_char)
 8001400:	2313      	movs	r3, #19
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b79      	cmp	r3, #121	@ 0x79
 8001408:	d00b      	beq.n	8001422 <CC_SM_UsartSM+0x7e>
 800140a:	dc2c      	bgt.n	8001466 <CC_SM_UsartSM+0xc2>
 800140c:	2b6e      	cmp	r3, #110	@ 0x6e
 800140e:	d019      	beq.n	8001444 <CC_SM_UsartSM+0xa0>
 8001410:	dc29      	bgt.n	8001466 <CC_SM_UsartSM+0xc2>
 8001412:	2b59      	cmp	r3, #89	@ 0x59
 8001414:	d005      	beq.n	8001422 <CC_SM_UsartSM+0x7e>
 8001416:	dc26      	bgt.n	8001466 <CC_SM_UsartSM+0xc2>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d02e      	beq.n	800147a <CC_SM_UsartSM+0xd6>
 800141c:	2b4e      	cmp	r3, #78	@ 0x4e
 800141e:	d011      	beq.n	8001444 <CC_SM_UsartSM+0xa0>
 8001420:	e021      	b.n	8001466 <CC_SM_UsartSM+0xc2>
		case 0:
			//No character has been entered
		break;
		case 'Y':
		case 'y':
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);		//Sending the character given back
 8001422:	4ab6      	ldr	r2, [pc, #728]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001424:	2313      	movs	r3, #19
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	0011      	movs	r1, r2
 800142a:	0018      	movs	r0, r3
 800142c:	f001 f8d2 	bl	80025d4 <CC_ML_SendUARTChar>
			CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN,&CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 8001430:	4ab2      	ldr	r2, [pc, #712]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001432:	4bb5      	ldr	r3, [pc, #724]	@ (8001708 <CC_SM_UsartSM+0x364>)
 8001434:	0011      	movs	r1, r2
 8001436:	0018      	movs	r0, r3
 8001438:	f001 f8e2 	bl	8002600 <CC_ML_SendUARTString>
			UsartSM_state=UART_SM_WELCOME_MSG;
 800143c:	4bad      	ldr	r3, [pc, #692]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 800143e:	2202      	movs	r2, #2
 8001440:	701a      	strb	r2, [r3, #0]
		break;
 8001442:	e01b      	b.n	800147c <CC_SM_UsartSM+0xd8>
		case 'N':
		case 'n':
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);		//Sending the character given back
 8001444:	4aad      	ldr	r2, [pc, #692]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001446:	2313      	movs	r3, #19
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f001 f8c1 	bl	80025d4 <CC_ML_SendUARTChar>
			CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN,&CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 8001452:	4aaa      	ldr	r2, [pc, #680]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001454:	4bac      	ldr	r3, [pc, #688]	@ (8001708 <CC_SM_UsartSM+0x364>)
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f001 f8d1 	bl	8002600 <CC_ML_SendUARTString>
			UsartSM_state=UART_SM_EXIT;
 800145e:	4ba5      	ldr	r3, [pc, #660]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 8001460:	2210      	movs	r2, #16
 8001462:	701a      	strb	r2, [r3, #0]
		break;
 8001464:	e00a      	b.n	800147c <CC_SM_UsartSM+0xd8>
		default:					//Wrong order gotten
			CC_ML_SendUARTString((const char*)MSG_WRONG_SEL, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001466:	4aa5      	ldr	r2, [pc, #660]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001468:	4ba8      	ldr	r3, [pc, #672]	@ (800170c <CC_SM_UsartSM+0x368>)
 800146a:	0011      	movs	r1, r2
 800146c:	0018      	movs	r0, r3
 800146e:	f001 f8c7 	bl	8002600 <CC_ML_SendUARTString>
			UsartSM_state=UART_SM_START_MSG;
 8001472:	4ba0      	ldr	r3, [pc, #640]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
		break;
 8001478:	e000      	b.n	800147c <CC_SM_UsartSM+0xd8>
		break;
 800147a:	46c0      	nop			@ (mov r8, r8)
		}
		CC_ML_ClearUARTRxData();
 800147c:	f001 f91c 	bl	80026b8 <CC_ML_ClearUARTRxData>
	break;
 8001480:	e2e6      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_WELCOME_MSG:
		CC_ML_SendUARTString((const char*)"Welcome to the strip leds control\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 8001482:	4a9e      	ldr	r2, [pc, #632]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001484:	4ba2      	ldr	r3, [pc, #648]	@ (8001710 <CC_SM_UsartSM+0x36c>)
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f001 f8b9 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)"The application which allows you to control your led lights\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 800148e:	4a9b      	ldr	r2, [pc, #620]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001490:	4ba0      	ldr	r3, [pc, #640]	@ (8001714 <CC_SM_UsartSM+0x370>)
 8001492:	0011      	movs	r1, r2
 8001494:	0018      	movs	r0, r3
 8001496:	f001 f8b3 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)"Running over the hardware: ", &CC_ML_SERIAL_DEBUG_HANDLER);
 800149a:	4a98      	ldr	r2, [pc, #608]	@ (80016fc <CC_SM_UsartSM+0x358>)
 800149c:	4b9e      	ldr	r3, [pc, #632]	@ (8001718 <CC_SM_UsartSM+0x374>)
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 f8ad 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)CC_APP_BoardData.HwCode, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014a6:	4a95      	ldr	r2, [pc, #596]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80014a8:	4b9c      	ldr	r3, [pc, #624]	@ (800171c <CC_SM_UsartSM+0x378>)
 80014aa:	0011      	movs	r1, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f001 f8a7 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MSG_RETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014b2:	4a92      	ldr	r2, [pc, #584]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80014b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001720 <CC_SM_UsartSM+0x37c>)
 80014b6:	0011      	movs	r1, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	f001 f8a1 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)"With a uC: ", &CC_ML_SERIAL_DEBUG_HANDLER);
 80014be:	4a8f      	ldr	r2, [pc, #572]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80014c0:	4b98      	ldr	r3, [pc, #608]	@ (8001724 <CC_SM_UsartSM+0x380>)
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f001 f89b 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)CC_APP_BoardData.uC, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014ca:	4a8c      	ldr	r2, [pc, #560]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80014cc:	4b96      	ldr	r3, [pc, #600]	@ (8001728 <CC_SM_UsartSM+0x384>)
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f001 f895 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MSG_RETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014d6:	4a89      	ldr	r2, [pc, #548]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80014d8:	4b91      	ldr	r3, [pc, #580]	@ (8001720 <CC_SM_UsartSM+0x37c>)
 80014da:	0011      	movs	r1, r2
 80014dc:	0018      	movs	r0, r3
 80014de:	f001 f88f 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)"Software version: ", &CC_ML_SERIAL_DEBUG_HANDLER);
 80014e2:	4a86      	ldr	r2, [pc, #536]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80014e4:	4b91      	ldr	r3, [pc, #580]	@ (800172c <CC_SM_UsartSM+0x388>)
 80014e6:	0011      	movs	r1, r2
 80014e8:	0018      	movs	r0, r3
 80014ea:	f001 f889 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)CC_APP_BoardData.SwVer, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014ee:	4a83      	ldr	r2, [pc, #524]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80014f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001730 <CC_SM_UsartSM+0x38c>)
 80014f2:	0011      	movs	r1, r2
 80014f4:	0018      	movs	r0, r3
 80014f6:	f001 f883 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MSG_RETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014fa:	4a80      	ldr	r2, [pc, #512]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80014fc:	4b88      	ldr	r3, [pc, #544]	@ (8001720 <CC_SM_UsartSM+0x37c>)
 80014fe:	0011      	movs	r1, r2
 8001500:	0018      	movs	r0, r3
 8001502:	f001 f87d 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)"Board identifier: ", &CC_ML_SERIAL_DEBUG_HANDLER);
 8001506:	4a7d      	ldr	r2, [pc, #500]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001508:	4b8a      	ldr	r3, [pc, #552]	@ (8001734 <CC_SM_UsartSM+0x390>)
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f001 f877 	bl	8002600 <CC_ML_SendUARTString>
		utoa(CC_APP_BoardData.id, sendString, 10);									//Converting the identifier to ascii in decimal base
 8001512:	4b82      	ldr	r3, [pc, #520]	@ (800171c <CC_SM_UsartSM+0x378>)
 8001514:	225b      	movs	r2, #91	@ 0x5b
 8001516:	5c9b      	ldrb	r3, [r3, r2]
 8001518:	0018      	movs	r0, r3
 800151a:	2414      	movs	r4, #20
 800151c:	193b      	adds	r3, r7, r4
 800151e:	220a      	movs	r2, #10
 8001520:	0019      	movs	r1, r3
 8001522:	f007 fafd 	bl	8008b20 <utoa>
		CC_ML_SendUARTString((const char*)sendString, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001526:	4a75      	ldr	r2, [pc, #468]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001528:	193b      	adds	r3, r7, r4
 800152a:	0011      	movs	r1, r2
 800152c:	0018      	movs	r0, r3
 800152e:	f001 f867 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001532:	4a72      	ldr	r2, [pc, #456]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001534:	4b74      	ldr	r3, [pc, #464]	@ (8001708 <CC_SM_UsartSM+0x364>)
 8001536:	0011      	movs	r1, r2
 8001538:	0018      	movs	r0, r3
 800153a:	f001 f861 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_MODE_MSG;
 800153e:	4b6d      	ldr	r3, [pc, #436]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 8001540:	2203      	movs	r2, #3
 8001542:	701a      	strb	r2, [r3, #0]
	break;
 8001544:	e284      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_MODE_MSG:
		CC_ML_SendUARTString((const char*)"Would you like to operate or to debug?\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 8001546:	4a6d      	ldr	r2, [pc, #436]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001548:	4b7b      	ldr	r3, [pc, #492]	@ (8001738 <CC_SM_UsartSM+0x394>)
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f001 f857 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)"Operation(O)\n\rDebug(D)\n\rExit(E)\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 8001552:	4a6a      	ldr	r2, [pc, #424]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001554:	4b79      	ldr	r3, [pc, #484]	@ (800173c <CC_SM_UsartSM+0x398>)
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f001 f851 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_MODE;
 800155e:	4b65      	ldr	r3, [pc, #404]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 8001560:	2204      	movs	r2, #4
 8001562:	701a      	strb	r2, [r3, #0]
	break;
 8001564:	e274      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_MODE:
		switch(input_char)
 8001566:	2313      	movs	r3, #19
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d046      	beq.n	80015fe <CC_SM_UsartSM+0x25a>
 8001570:	db3e      	blt.n	80015f0 <CC_SM_UsartSM+0x24c>
 8001572:	2b6f      	cmp	r3, #111	@ 0x6f
 8001574:	dc3c      	bgt.n	80015f0 <CC_SM_UsartSM+0x24c>
 8001576:	2b44      	cmp	r3, #68	@ 0x44
 8001578:	db3a      	blt.n	80015f0 <CC_SM_UsartSM+0x24c>
 800157a:	3b44      	subs	r3, #68	@ 0x44
 800157c:	2b2b      	cmp	r3, #43	@ 0x2b
 800157e:	d837      	bhi.n	80015f0 <CC_SM_UsartSM+0x24c>
 8001580:	009a      	lsls	r2, r3, #2
 8001582:	4b6f      	ldr	r3, [pc, #444]	@ (8001740 <CC_SM_UsartSM+0x39c>)
 8001584:	18d3      	adds	r3, r2, r3
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	469f      	mov	pc, r3
		case 0:
			//No character has been entered
		break;
		case 'O':
		case 'o':
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);		//Sending the character given back
 800158a:	4a5c      	ldr	r2, [pc, #368]	@ (80016fc <CC_SM_UsartSM+0x358>)
 800158c:	2313      	movs	r3, #19
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	0011      	movs	r1, r2
 8001592:	0018      	movs	r0, r3
 8001594:	f001 f81e 	bl	80025d4 <CC_ML_SendUARTChar>
			CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN,&CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 8001598:	4a58      	ldr	r2, [pc, #352]	@ (80016fc <CC_SM_UsartSM+0x358>)
 800159a:	4b5b      	ldr	r3, [pc, #364]	@ (8001708 <CC_SM_UsartSM+0x364>)
 800159c:	0011      	movs	r1, r2
 800159e:	0018      	movs	r0, r3
 80015a0:	f001 f82e 	bl	8002600 <CC_ML_SendUARTString>
			UsartSM_state=UART_SM_OPERATION_MSG;
 80015a4:	4b53      	ldr	r3, [pc, #332]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 80015a6:	2207      	movs	r2, #7
 80015a8:	701a      	strb	r2, [r3, #0]
		break;
 80015aa:	e029      	b.n	8001600 <CC_SM_UsartSM+0x25c>
		case 'D':
		case 'd':
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);		//Sending the character given back
 80015ac:	4a53      	ldr	r2, [pc, #332]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80015ae:	2313      	movs	r3, #19
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f001 f80d 	bl	80025d4 <CC_ML_SendUARTChar>
			CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN,&CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 80015ba:	4a50      	ldr	r2, [pc, #320]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80015bc:	4b52      	ldr	r3, [pc, #328]	@ (8001708 <CC_SM_UsartSM+0x364>)
 80015be:	0011      	movs	r1, r2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f001 f81d 	bl	8002600 <CC_ML_SendUARTString>
			UsartSM_state=UART_SM_DEBUG_MSG;
 80015c6:	4b4b      	ldr	r3, [pc, #300]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 80015c8:	2205      	movs	r2, #5
 80015ca:	701a      	strb	r2, [r3, #0]
		break;
 80015cc:	e018      	b.n	8001600 <CC_SM_UsartSM+0x25c>
		case 'E':
		case 'e':
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);		//Sending the character given back
 80015ce:	4a4b      	ldr	r2, [pc, #300]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80015d0:	2313      	movs	r3, #19
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	0011      	movs	r1, r2
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fffc 	bl	80025d4 <CC_ML_SendUARTChar>
			CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN,&CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 80015dc:	4a47      	ldr	r2, [pc, #284]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80015de:	4b4a      	ldr	r3, [pc, #296]	@ (8001708 <CC_SM_UsartSM+0x364>)
 80015e0:	0011      	movs	r1, r2
 80015e2:	0018      	movs	r0, r3
 80015e4:	f001 f80c 	bl	8002600 <CC_ML_SendUARTString>
			UsartSM_state=UART_SM_EXIT;
 80015e8:	4b42      	ldr	r3, [pc, #264]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 80015ea:	2210      	movs	r2, #16
 80015ec:	701a      	strb	r2, [r3, #0]
		break;
 80015ee:	e007      	b.n	8001600 <CC_SM_UsartSM+0x25c>
		default:
			CC_ML_SendUARTString((const char*)MSG_WRONG_SEL, &CC_ML_SERIAL_DEBUG_HANDLER);
 80015f0:	4a42      	ldr	r2, [pc, #264]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80015f2:	4b46      	ldr	r3, [pc, #280]	@ (800170c <CC_SM_UsartSM+0x368>)
 80015f4:	0011      	movs	r1, r2
 80015f6:	0018      	movs	r0, r3
 80015f8:	f001 f802 	bl	8002600 <CC_ML_SendUARTString>
		break;
 80015fc:	e000      	b.n	8001600 <CC_SM_UsartSM+0x25c>
		break;
 80015fe:	46c0      	nop			@ (mov r8, r8)
		}
		CC_ML_ClearUARTRxData();
 8001600:	f001 f85a 	bl	80026b8 <CC_ML_ClearUARTRxData>
	break;
 8001604:	e224      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_DEBUG_MSG:
		CC_ML_SendUARTString((const char*)"Debug mode. Showing system data\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 8001606:	4a3d      	ldr	r2, [pc, #244]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001608:	4b4e      	ldr	r3, [pc, #312]	@ (8001744 <CC_SM_UsartSM+0x3a0>)
 800160a:	0011      	movs	r1, r2
 800160c:	0018      	movs	r0, r3
 800160e:	f000 fff7 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)"Press (E) to stop the operation\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 8001612:	4a3a      	ldr	r2, [pc, #232]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001614:	4b4c      	ldr	r3, [pc, #304]	@ (8001748 <CC_SM_UsartSM+0x3a4>)
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f000 fff1 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_DEBUG;
 800161e:	4b35      	ldr	r3, [pc, #212]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 8001620:	2206      	movs	r2, #6
 8001622:	701a      	strb	r2, [r3, #0]
	break;
 8001624:	e214      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_DEBUG:
		//Send debug data
		if (input_char=='E'||input_char=='e') //Exit?
 8001626:	2213      	movs	r2, #19
 8001628:	18bb      	adds	r3, r7, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b45      	cmp	r3, #69	@ 0x45
 800162e:	d003      	beq.n	8001638 <CC_SM_UsartSM+0x294>
 8001630:	18bb      	adds	r3, r7, r2
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b65      	cmp	r3, #101	@ 0x65
 8001636:	d10f      	bne.n	8001658 <CC_SM_UsartSM+0x2b4>
		{
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);				//Sending the character given back
 8001638:	4a30      	ldr	r2, [pc, #192]	@ (80016fc <CC_SM_UsartSM+0x358>)
 800163a:	2313      	movs	r3, #19
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	0011      	movs	r1, r2
 8001640:	0018      	movs	r0, r3
 8001642:	f000 ffc7 	bl	80025d4 <CC_ML_SendUARTChar>
			CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN,&CC_ML_SERIAL_DEBUG_HANDLER);	//Cleaning the line into the console
 8001646:	4a2d      	ldr	r2, [pc, #180]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001648:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <CC_SM_UsartSM+0x364>)
 800164a:	0011      	movs	r1, r2
 800164c:	0018      	movs	r0, r3
 800164e:	f000 ffd7 	bl	8002600 <CC_ML_SendUARTString>
			UsartSM_state=UART_SM_MODE_MSG;															//Returning to the main menu
 8001652:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 8001654:	2203      	movs	r2, #3
 8001656:	701a      	strb	r2, [r3, #0]
		}
		CC_ML_ClearUARTRxData();									//Cleaning whatever be in the UART's buffer
 8001658:	f001 f82e 	bl	80026b8 <CC_ML_ClearUARTRxData>
	break;
 800165c:	e1f8      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_OPERATION_MSG:
		CC_ML_SendUARTString((const char*)"Please select the desired duty cycle:\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 800165e:	4a27      	ldr	r2, [pc, #156]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001660:	4b3a      	ldr	r3, [pc, #232]	@ (800174c <CC_SM_UsartSM+0x3a8>)
 8001662:	0011      	movs	r1, r2
 8001664:	0018      	movs	r0, r3
 8001666:	f000 ffcb 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_OPERATION_RED_MSG;
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 800166c:	2208      	movs	r2, #8
 800166e:	701a      	strb	r2, [r3, #0]
	break;
 8001670:	e1ee      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_OPERATION_RED_MSG:
		CC_ML_SendUARTString((const char*)"Red leds duty cycle:\n\r(0-100)\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 8001672:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <CC_SM_UsartSM+0x358>)
 8001674:	4b36      	ldr	r3, [pc, #216]	@ (8001750 <CC_SM_UsartSM+0x3ac>)
 8001676:	0011      	movs	r1, r2
 8001678:	0018      	movs	r0, r3
 800167a:	f000 ffc1 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_OPERATION_RED;
 800167e:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <CC_SM_UsartSM+0x350>)
 8001680:	2209      	movs	r2, #9
 8001682:	701a      	strb	r2, [r3, #0]
	break;
 8001684:	e1e4      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_OPERATION_RED:
		if(isdigit(input_char))											//Checking if the character given is a numeric digit
 8001686:	2113      	movs	r1, #19
 8001688:	187b      	adds	r3, r7, r1
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <CC_SM_UsartSM+0x3b0>)
 8001690:	18d3      	adds	r3, r2, r3
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	001a      	movs	r2, r3
 8001696:	2304      	movs	r3, #4
 8001698:	4013      	ands	r3, r2
 800169a:	d100      	bne.n	800169e <CC_SM_UsartSM+0x2fa>
 800169c:	e1d3      	b.n	8001a46 <CC_SM_UsartSM+0x6a2>
		{
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);//Sending the character given back
 800169e:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <CC_SM_UsartSM+0x358>)
 80016a0:	000c      	movs	r4, r1
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	0011      	movs	r1, r2
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 ff94 	bl	80025d4 <CC_ML_SendUARTChar>
			input_string[char_number]=input_char;						//Storing to get the total duty value (in a string)
 80016ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <CC_SM_UsartSM+0x3b4>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	001a      	movs	r2, r3
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	7819      	ldrb	r1, [r3, #0]
 80016b6:	4b29      	ldr	r3, [pc, #164]	@ (800175c <CC_SM_UsartSM+0x3b8>)
 80016b8:	5499      	strb	r1, [r3, r2]
			char_number++;												//Next number
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <CC_SM_UsartSM+0x3b4>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <CC_SM_UsartSM+0x3b4>)
 80016c4:	701a      	strb	r2, [r3, #0]
			if (char_number==3)											//3 digits for the duty
 80016c6:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <CC_SM_UsartSM+0x3b4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d000      	beq.n	80016d0 <CC_SM_UsartSM+0x32c>
 80016ce:	e077      	b.n	80017c0 <CC_SM_UsartSM+0x41c>
			{
				duty=atoi(input_string);								//Conversion to integer
 80016d0:	4b22      	ldr	r3, [pc, #136]	@ (800175c <CC_SM_UsartSM+0x3b8>)
 80016d2:	0018      	movs	r0, r3
 80016d4:	f007 f954 	bl	8008980 <atoi>
 80016d8:	0003      	movs	r3, r0
 80016da:	22ac      	movs	r2, #172	@ 0xac
 80016dc:	18b9      	adds	r1, r7, r2
 80016de:	600b      	str	r3, [r1, #0]
				if (duty>100){duty=100;}								//Saturation
 80016e0:	18bb      	adds	r3, r7, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b64      	cmp	r3, #100	@ 0x64
 80016e6:	d94a      	bls.n	800177e <CC_SM_UsartSM+0x3da>
 80016e8:	2364      	movs	r3, #100	@ 0x64
 80016ea:	18ba      	adds	r2, r7, r2
 80016ec:	6013      	str	r3, [r2, #0]
				while (i<CC_LEDPWM_TOTALSTRIPS)
 80016ee:	e046      	b.n	800177e <CC_SM_UsartSM+0x3da>
 80016f0:	0800904c 	.word	0x0800904c
 80016f4:	20000388 	.word	0x20000388
 80016f8:	08008f58 	.word	0x08008f58
 80016fc:	20000578 	.word	0x20000578
 8001700:	08008c44 	.word	0x08008c44
 8001704:	08008c58 	.word	0x08008c58
 8001708:	08008c68 	.word	0x08008c68
 800170c:	08008c70 	.word	0x08008c70
 8001710:	08008c98 	.word	0x08008c98
 8001714:	08008cbc 	.word	0x08008cbc
 8001718:	08008cfc 	.word	0x08008cfc
 800171c:	20000084 	.word	0x20000084
 8001720:	08008d18 	.word	0x08008d18
 8001724:	08008d1c 	.word	0x08008d1c
 8001728:	200000d1 	.word	0x200000d1
 800172c:	08008d28 	.word	0x08008d28
 8001730:	20000095 	.word	0x20000095
 8001734:	08008d3c 	.word	0x08008d3c
 8001738:	08008d50 	.word	0x08008d50
 800173c:	08008d7c 	.word	0x08008d7c
 8001740:	08008f9c 	.word	0x08008f9c
 8001744:	08008da0 	.word	0x08008da0
 8001748:	08008dc4 	.word	0x08008dc4
 800174c:	08008de8 	.word	0x08008de8
 8001750:	08008e10 	.word	0x08008e10
 8001754:	080091fd 	.word	0x080091fd
 8001758:	20000389 	.word	0x20000389
 800175c:	2000038c 	.word	0x2000038c
				{
					CC_LEDPWM_Strip.Strip[i].RedDuty=(uint8_t)duty;		//PWM duty updates
 8001760:	20ab      	movs	r0, #171	@ 0xab
 8001762:	183b      	adds	r3, r7, r0
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	23ac      	movs	r3, #172	@ 0xac
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b2d9      	uxtb	r1, r3
 800176e:	4bba      	ldr	r3, [pc, #744]	@ (8001a58 <CC_SM_UsartSM+0x6b4>)
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	54d1      	strb	r1, [r2, r3]
					i++;
 8001774:	183b      	adds	r3, r7, r0
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	183b      	adds	r3, r7, r0
 800177a:	3201      	adds	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
				while (i<CC_LEDPWM_TOTALSTRIPS)
 800177e:	22ab      	movs	r2, #171	@ 0xab
 8001780:	18bb      	adds	r3, r7, r2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d9eb      	bls.n	8001760 <CC_SM_UsartSM+0x3bc>
				}
				i=0;													//Reset variables
 8001788:	18bb      	adds	r3, r7, r2
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
				duty=0;
 800178e:	2300      	movs	r3, #0
 8001790:	22ac      	movs	r2, #172	@ 0xac
 8001792:	18ba      	adds	r2, r7, r2
 8001794:	6013      	str	r3, [r2, #0]
				char_number=0;
 8001796:	4bb1      	ldr	r3, [pc, #708]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
				input_string[0]=0;
 800179c:	4bb0      	ldr	r3, [pc, #704]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
				input_string[1]=0;
 80017a2:	4baf      	ldr	r3, [pc, #700]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	705a      	strb	r2, [r3, #1]
				input_string[2]=0;
 80017a8:	4bad      	ldr	r3, [pc, #692]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	709a      	strb	r2, [r3, #2]
				UsartSM_state=UART_SM_OPERATION_GREEN_MSG;				//Next SM state
 80017ae:	4bad      	ldr	r3, [pc, #692]	@ (8001a64 <CC_SM_UsartSM+0x6c0>)
 80017b0:	220a      	movs	r2, #10
 80017b2:	701a      	strb	r2, [r3, #0]
				CC_ML_SendUARTString((const char*)MSG_RETURN,&CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 80017b4:	4aac      	ldr	r2, [pc, #688]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 80017b6:	4bad      	ldr	r3, [pc, #692]	@ (8001a6c <CC_SM_UsartSM+0x6c8>)
 80017b8:	0011      	movs	r1, r2
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 ff20 	bl	8002600 <CC_ML_SendUARTString>
			}
			CC_ML_ClearUARTRxData();									//Cleaning whatever be in the UART's buffer
 80017c0:	f000 ff7a 	bl	80026b8 <CC_ML_ClearUARTRxData>
		}
	break;
 80017c4:	e13f      	b.n	8001a46 <CC_SM_UsartSM+0x6a2>

	case UART_SM_OPERATION_GREEN_MSG:
		CC_ML_SendUARTString((const char*)"Green leds duty cycle:\n\r(0-9)\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 80017c6:	4aa8      	ldr	r2, [pc, #672]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 80017c8:	4ba9      	ldr	r3, [pc, #676]	@ (8001a70 <CC_SM_UsartSM+0x6cc>)
 80017ca:	0011      	movs	r1, r2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 ff17 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_OPERATION_GREEN;
 80017d2:	4ba4      	ldr	r3, [pc, #656]	@ (8001a64 <CC_SM_UsartSM+0x6c0>)
 80017d4:	220b      	movs	r2, #11
 80017d6:	701a      	strb	r2, [r3, #0]
	break;
 80017d8:	e13a      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_OPERATION_GREEN:
		if(isdigit(input_char))											//Checking if the character given is a numeric digit
 80017da:	2113      	movs	r1, #19
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	4ba4      	ldr	r3, [pc, #656]	@ (8001a74 <CC_SM_UsartSM+0x6d0>)
 80017e4:	18d3      	adds	r3, r2, r3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	001a      	movs	r2, r3
 80017ea:	2304      	movs	r3, #4
 80017ec:	4013      	ands	r3, r2
 80017ee:	d100      	bne.n	80017f2 <CC_SM_UsartSM+0x44e>
 80017f0:	e12b      	b.n	8001a4a <CC_SM_UsartSM+0x6a6>
		{
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);//Sending the character given back
 80017f2:	4a9d      	ldr	r2, [pc, #628]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 80017f4:	000c      	movs	r4, r1
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	0011      	movs	r1, r2
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 feea 	bl	80025d4 <CC_ML_SendUARTChar>
			input_string[char_number]=input_char;						//Storing to get the total duty value (in a string)
 8001800:	4b96      	ldr	r3, [pc, #600]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	001a      	movs	r2, r3
 8001806:	193b      	adds	r3, r7, r4
 8001808:	7819      	ldrb	r1, [r3, #0]
 800180a:	4b95      	ldr	r3, [pc, #596]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 800180c:	5499      	strb	r1, [r3, r2]
			char_number++;												//Next number
 800180e:	4b93      	ldr	r3, [pc, #588]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b91      	ldr	r3, [pc, #580]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 8001818:	701a      	strb	r2, [r3, #0]
			if (char_number==3)											//3 digits for the duty
 800181a:	4b90      	ldr	r3, [pc, #576]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d142      	bne.n	80018a8 <CC_SM_UsartSM+0x504>
			{
				duty=atoi(input_string);								//Conversion to integer
 8001822:	4b8f      	ldr	r3, [pc, #572]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 8001824:	0018      	movs	r0, r3
 8001826:	f007 f8ab 	bl	8008980 <atoi>
 800182a:	0003      	movs	r3, r0
 800182c:	22ac      	movs	r2, #172	@ 0xac
 800182e:	18b9      	adds	r1, r7, r2
 8001830:	600b      	str	r3, [r1, #0]
				if (duty>100){duty=100;}								//Saturation
 8001832:	18bb      	adds	r3, r7, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b64      	cmp	r3, #100	@ 0x64
 8001838:	d915      	bls.n	8001866 <CC_SM_UsartSM+0x4c2>
 800183a:	2364      	movs	r3, #100	@ 0x64
 800183c:	18ba      	adds	r2, r7, r2
 800183e:	6013      	str	r3, [r2, #0]
				while (i<CC_LEDPWM_TOTALSTRIPS)
 8001840:	e011      	b.n	8001866 <CC_SM_UsartSM+0x4c2>
				{
					CC_LEDPWM_Strip.Strip[i].GreenDuty=(uint8_t)duty;	//PWM duty updates
 8001842:	20ab      	movs	r0, #171	@ 0xab
 8001844:	183b      	adds	r3, r7, r0
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	22ac      	movs	r2, #172	@ 0xac
 800184a:	18ba      	adds	r2, r7, r2
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	b2d1      	uxtb	r1, r2
 8001850:	4a81      	ldr	r2, [pc, #516]	@ (8001a58 <CC_SM_UsartSM+0x6b4>)
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	18d3      	adds	r3, r2, r3
 8001856:	3301      	adds	r3, #1
 8001858:	1c0a      	adds	r2, r1, #0
 800185a:	701a      	strb	r2, [r3, #0]
					i++;
 800185c:	183b      	adds	r3, r7, r0
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	183b      	adds	r3, r7, r0
 8001862:	3201      	adds	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
				while (i<CC_LEDPWM_TOTALSTRIPS)
 8001866:	22ab      	movs	r2, #171	@ 0xab
 8001868:	18bb      	adds	r3, r7, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b09      	cmp	r3, #9
 800186e:	d9e8      	bls.n	8001842 <CC_SM_UsartSM+0x49e>
				}
				i=0;													//Reset variables
 8001870:	18bb      	adds	r3, r7, r2
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
				duty=0;
 8001876:	2300      	movs	r3, #0
 8001878:	22ac      	movs	r2, #172	@ 0xac
 800187a:	18ba      	adds	r2, r7, r2
 800187c:	6013      	str	r3, [r2, #0]
				char_number=0;
 800187e:	4b77      	ldr	r3, [pc, #476]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
				input_string[0]=0;
 8001884:	4b76      	ldr	r3, [pc, #472]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
				input_string[1]=0;
 800188a:	4b75      	ldr	r3, [pc, #468]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 800188c:	2200      	movs	r2, #0
 800188e:	705a      	strb	r2, [r3, #1]
				input_string[2]=0;
 8001890:	4b73      	ldr	r3, [pc, #460]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 8001892:	2200      	movs	r2, #0
 8001894:	709a      	strb	r2, [r3, #2]
				UsartSM_state=UART_SM_OPERATION_BLUE_MSG;				//Next SM state
 8001896:	4b73      	ldr	r3, [pc, #460]	@ (8001a64 <CC_SM_UsartSM+0x6c0>)
 8001898:	220c      	movs	r2, #12
 800189a:	701a      	strb	r2, [r3, #0]
				CC_ML_SendUARTString((const char*)MSG_RETURN,&CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 800189c:	4a72      	ldr	r2, [pc, #456]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 800189e:	4b73      	ldr	r3, [pc, #460]	@ (8001a6c <CC_SM_UsartSM+0x6c8>)
 80018a0:	0011      	movs	r1, r2
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 feac 	bl	8002600 <CC_ML_SendUARTString>
			}
			CC_ML_ClearUARTRxData();									//Cleaning whatever be in the UART's buffer
 80018a8:	f000 ff06 	bl	80026b8 <CC_ML_ClearUARTRxData>
		}
	break;
 80018ac:	e0cd      	b.n	8001a4a <CC_SM_UsartSM+0x6a6>

	case UART_SM_OPERATION_BLUE_MSG:
		CC_ML_SendUARTString((const char*)"Blue leds duty cycle:\n\r(0-9)\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 80018ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 80018b0:	4b71      	ldr	r3, [pc, #452]	@ (8001a78 <CC_SM_UsartSM+0x6d4>)
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f000 fea3 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_OPERATION_BLUE;
 80018ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001a64 <CC_SM_UsartSM+0x6c0>)
 80018bc:	220d      	movs	r2, #13
 80018be:	701a      	strb	r2, [r3, #0]
	break;
 80018c0:	e0c6      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_OPERATION_BLUE:
		if(isdigit(input_char))											//Checking if the character given is a numeric digit
 80018c2:	2113      	movs	r1, #19
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001a74 <CC_SM_UsartSM+0x6d0>)
 80018cc:	18d3      	adds	r3, r2, r3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	001a      	movs	r2, r3
 80018d2:	2304      	movs	r3, #4
 80018d4:	4013      	ands	r3, r2
 80018d6:	d100      	bne.n	80018da <CC_SM_UsartSM+0x536>
 80018d8:	e0b9      	b.n	8001a4e <CC_SM_UsartSM+0x6aa>
		{
			CC_ML_SendUARTChar((uint8_t*)(&input_char), &CC_ML_SERIAL_DEBUG_HANDLER);//Sending the character given back
 80018da:	4a63      	ldr	r2, [pc, #396]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 80018dc:	000c      	movs	r4, r1
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	0011      	movs	r1, r2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fe76 	bl	80025d4 <CC_ML_SendUARTChar>
			input_string[char_number]=input_char;						//Storing to get the total duty value (in a string)
 80018e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	001a      	movs	r2, r3
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	7819      	ldrb	r1, [r3, #0]
 80018f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 80018f4:	5499      	strb	r1, [r3, r2]
			char_number++;												//Next number
 80018f6:	4b59      	ldr	r3, [pc, #356]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b57      	ldr	r3, [pc, #348]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 8001900:	701a      	strb	r2, [r3, #0]
			if (char_number==3)											//3 digits for the duty
 8001902:	4b56      	ldr	r3, [pc, #344]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d142      	bne.n	8001990 <CC_SM_UsartSM+0x5ec>
			{
				duty=atoi(input_string);								//Conversion to integer
 800190a:	4b55      	ldr	r3, [pc, #340]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 800190c:	0018      	movs	r0, r3
 800190e:	f007 f837 	bl	8008980 <atoi>
 8001912:	0003      	movs	r3, r0
 8001914:	22ac      	movs	r2, #172	@ 0xac
 8001916:	18b9      	adds	r1, r7, r2
 8001918:	600b      	str	r3, [r1, #0]
				if (duty>100){duty=100;}								//Saturation
 800191a:	18bb      	adds	r3, r7, r2
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b64      	cmp	r3, #100	@ 0x64
 8001920:	d915      	bls.n	800194e <CC_SM_UsartSM+0x5aa>
 8001922:	2364      	movs	r3, #100	@ 0x64
 8001924:	18ba      	adds	r2, r7, r2
 8001926:	6013      	str	r3, [r2, #0]
				while (i<CC_LEDPWM_TOTALSTRIPS)
 8001928:	e011      	b.n	800194e <CC_SM_UsartSM+0x5aa>
				{
					CC_LEDPWM_Strip.Strip[i].BlueDuty=(uint8_t)duty;	//PWM duty updates
 800192a:	20ab      	movs	r0, #171	@ 0xab
 800192c:	183b      	adds	r3, r7, r0
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	22ac      	movs	r2, #172	@ 0xac
 8001932:	18ba      	adds	r2, r7, r2
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	b2d1      	uxtb	r1, r2
 8001938:	4a47      	ldr	r2, [pc, #284]	@ (8001a58 <CC_SM_UsartSM+0x6b4>)
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	3302      	adds	r3, #2
 8001940:	1c0a      	adds	r2, r1, #0
 8001942:	701a      	strb	r2, [r3, #0]
					i++;
 8001944:	183b      	adds	r3, r7, r0
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	183b      	adds	r3, r7, r0
 800194a:	3201      	adds	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
				while (i<CC_LEDPWM_TOTALSTRIPS)
 800194e:	22ab      	movs	r2, #171	@ 0xab
 8001950:	18bb      	adds	r3, r7, r2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b09      	cmp	r3, #9
 8001956:	d9e8      	bls.n	800192a <CC_SM_UsartSM+0x586>
				}
				i=0;													//Reset variables
 8001958:	18bb      	adds	r3, r7, r2
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
				duty=0;
 800195e:	2300      	movs	r3, #0
 8001960:	22ac      	movs	r2, #172	@ 0xac
 8001962:	18ba      	adds	r2, r7, r2
 8001964:	6013      	str	r3, [r2, #0]
				char_number=0;
 8001966:	4b3d      	ldr	r3, [pc, #244]	@ (8001a5c <CC_SM_UsartSM+0x6b8>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
				input_string[0]=0;
 800196c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
				input_string[1]=0;
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 8001974:	2200      	movs	r2, #0
 8001976:	705a      	strb	r2, [r3, #1]
				input_string[2]=0;
 8001978:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <CC_SM_UsartSM+0x6bc>)
 800197a:	2200      	movs	r2, #0
 800197c:	709a      	strb	r2, [r3, #2]
				UsartSM_state=UART_SM_OPERATION_REPEAT_MSG;				//Next SM state
 800197e:	4b39      	ldr	r3, [pc, #228]	@ (8001a64 <CC_SM_UsartSM+0x6c0>)
 8001980:	220e      	movs	r2, #14
 8001982:	701a      	strb	r2, [r3, #0]
				CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN, &CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 8001984:	4a38      	ldr	r2, [pc, #224]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 8001986:	4b3d      	ldr	r3, [pc, #244]	@ (8001a7c <CC_SM_UsartSM+0x6d8>)
 8001988:	0011      	movs	r1, r2
 800198a:	0018      	movs	r0, r3
 800198c:	f000 fe38 	bl	8002600 <CC_ML_SendUARTString>
			}
			CC_ML_ClearUARTRxData();									//Cleaning whatever be in the UART's buffer
 8001990:	f000 fe92 	bl	80026b8 <CC_ML_ClearUARTRxData>
		}
	break;
 8001994:	e05b      	b.n	8001a4e <CC_SM_UsartSM+0x6aa>

	case UART_SM_OPERATION_REPEAT_MSG:
		CC_ML_SendUARTString((const char*)"Would you like to enter the duties again?\n\rYes(Y)\n\rNo(N)\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 8001996:	4a34      	ldr	r2, [pc, #208]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 8001998:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <CC_SM_UsartSM+0x6dc>)
 800199a:	0011      	movs	r1, r2
 800199c:	0018      	movs	r0, r3
 800199e:	f000 fe2f 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_OPERATION_REPEAT;
 80019a2:	4b30      	ldr	r3, [pc, #192]	@ (8001a64 <CC_SM_UsartSM+0x6c0>)
 80019a4:	220f      	movs	r2, #15
 80019a6:	701a      	strb	r2, [r3, #0]
	break;
 80019a8:	e052      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_OPERATION_REPEAT:
		switch(input_char)
 80019aa:	2313      	movs	r3, #19
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b79      	cmp	r3, #121	@ 0x79
 80019b2:	d00b      	beq.n	80019cc <CC_SM_UsartSM+0x628>
 80019b4:	dc2c      	bgt.n	8001a10 <CC_SM_UsartSM+0x66c>
 80019b6:	2b6e      	cmp	r3, #110	@ 0x6e
 80019b8:	d019      	beq.n	80019ee <CC_SM_UsartSM+0x64a>
 80019ba:	dc29      	bgt.n	8001a10 <CC_SM_UsartSM+0x66c>
 80019bc:	2b59      	cmp	r3, #89	@ 0x59
 80019be:	d005      	beq.n	80019cc <CC_SM_UsartSM+0x628>
 80019c0:	dc26      	bgt.n	8001a10 <CC_SM_UsartSM+0x66c>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d02b      	beq.n	8001a1e <CC_SM_UsartSM+0x67a>
 80019c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80019c8:	d011      	beq.n	80019ee <CC_SM_UsartSM+0x64a>
 80019ca:	e021      	b.n	8001a10 <CC_SM_UsartSM+0x66c>
		{
		case 0:			//No character has been entered
		break;
		case 'Y':
		case 'y':
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);		//Sending the character given back
 80019cc:	4a26      	ldr	r2, [pc, #152]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 80019ce:	2313      	movs	r3, #19
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	0011      	movs	r1, r2
 80019d4:	0018      	movs	r0, r3
 80019d6:	f000 fdfd 	bl	80025d4 <CC_ML_SendUARTChar>
			CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN,&CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 80019da:	4a23      	ldr	r2, [pc, #140]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 80019dc:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <CC_SM_UsartSM+0x6d8>)
 80019de:	0011      	movs	r1, r2
 80019e0:	0018      	movs	r0, r3
 80019e2:	f000 fe0d 	bl	8002600 <CC_ML_SendUARTString>
			UsartSM_state=UART_SM_OPERATION_MSG;	//Enter again the duties
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <CC_SM_UsartSM+0x6c0>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	701a      	strb	r2, [r3, #0]
		break;
 80019ec:	e018      	b.n	8001a20 <CC_SM_UsartSM+0x67c>
		case 'N':
		case 'n':
			CC_ML_SendUARTChar((uint8_t*)(&input_char),&CC_ML_SERIAL_DEBUG_HANDLER);		//Sending the character given back
 80019ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 80019f0:	2313      	movs	r3, #19
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	0011      	movs	r1, r2
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 fdec 	bl	80025d4 <CC_ML_SendUARTChar>
			CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN,&CC_ML_SERIAL_DEBUG_HANDLER);//Cleaning the line into the console
 80019fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <CC_SM_UsartSM+0x6d8>)
 8001a00:	0011      	movs	r1, r2
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 fdfc 	bl	8002600 <CC_ML_SendUARTString>
			UsartSM_state=UART_SM_MODE_MSG;			//Go to the main menu
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <CC_SM_UsartSM+0x6c0>)
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	701a      	strb	r2, [r3, #0]
		break;
 8001a0e:	e007      	b.n	8001a20 <CC_SM_UsartSM+0x67c>
		default:
			CC_ML_SendUARTString((const char*)MSG_WRONG_SEL, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001a10:	4a15      	ldr	r2, [pc, #84]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 8001a12:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <CC_SM_UsartSM+0x6e0>)
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 fdf2 	bl	8002600 <CC_ML_SendUARTString>
		break;
 8001a1c:	e000      	b.n	8001a20 <CC_SM_UsartSM+0x67c>
		break;
 8001a1e:	46c0      	nop			@ (mov r8, r8)
		}
		CC_ML_ClearUARTRxData();
 8001a20:	f000 fe4a 	bl	80026b8 <CC_ML_ClearUARTRxData>
	break;
 8001a24:	e014      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>

	case UART_SM_EXIT:
		CC_ML_SendUARTString((const char*)"\n\rThanks for using our devices\n\rGoodbye!\n\r", &CC_ML_SERIAL_DEBUG_HANDLER);
 8001a26:	4a10      	ldr	r2, [pc, #64]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <CC_SM_UsartSM+0x6e4>)
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f000 fde7 	bl	8002600 <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MSG_TRIPLERETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001a32:	4a0d      	ldr	r2, [pc, #52]	@ (8001a68 <CC_SM_UsartSM+0x6c4>)
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <CC_SM_UsartSM+0x6d8>)
 8001a36:	0011      	movs	r1, r2
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 fde1 	bl	8002600 <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_START_MSG;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <CC_SM_UsartSM+0x6c0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
	break;
 8001a44:	e004      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>
	break;
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	e002      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>
	break;
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	e000      	b.n	8001a50 <CC_SM_UsartSM+0x6ac>
	break;
 8001a4e:	46c0      	nop			@ (mov r8, r8)

	}
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b02d      	add	sp, #180	@ 0xb4
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	200000e4 	.word	0x200000e4
 8001a5c:	20000389 	.word	0x20000389
 8001a60:	2000038c 	.word	0x2000038c
 8001a64:	20000388 	.word	0x20000388
 8001a68:	20000578 	.word	0x20000578
 8001a6c:	08008d18 	.word	0x08008d18
 8001a70:	08008e30 	.word	0x08008e30
 8001a74:	080091fd 	.word	0x080091fd
 8001a78:	08008e50 	.word	0x08008e50
 8001a7c:	08008c68 	.word	0x08008c68
 8001a80:	08008e70 	.word	0x08008e70
 8001a84:	08008c70 	.word	0x08008c70
 8001a88:	08008eac 	.word	0x08008eac

08001a8c <CC_BOARDLED_Led1Toggle>:
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, CC_BOARDLED_OFF);
	}

	inline void CC_BOARDLED_Led1Toggle(void)
	{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001a90:	23a0      	movs	r3, #160	@ 0xa0
 8001a92:	05db      	lsls	r3, r3, #23
 8001a94:	2102      	movs	r1, #2
 8001a96:	0018      	movs	r0, r3
 8001a98:	f002 fecc 	bl	8004834 <HAL_GPIO_TogglePin>
	}
 8001a9c:	46c0      	nop			@ (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <CC_CAN_EnableCANInt>:
FDCAN_TxHeaderTypeDef CC_CAN_TxHeader;
FDCAN_RxHeaderTypeDef CC_CAN_RxHeader;

//FUNCTIONS
inline uint8_t CC_CAN_EnableCANInt(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,uint32_t BufferIndexes)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
	return HAL_FDCAN_ActivateNotification(hfdcan, ActiveITs, BufferIndexes);
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f002 f9cf 	bl	8003e58 <HAL_FDCAN_ActivateNotification>
 8001aba:	0003      	movs	r3, r0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <CC_CAN_StartCAN>:

inline uint8_t CC_CAN_StartCAN(FDCAN_HandleTypeDef *hfdcan)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	return HAL_FDCAN_Start(hfdcan);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f002 f848 	bl	8003b64 <HAL_FDCAN_Start>
 8001ad4:	0003      	movs	r3, r0
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}

08001ade <CC_CAN_SendMessage>:
			(
			FDCAN_HandleTypeDef* const pHeaderCan,
			const FDCAN_TxHeaderTypeDef* const pHeaderTx,
			const uint8_t* const pdata2send
			)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
	return HAL_FDCAN_AddMessageToTxFifoQ
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f002 f85d 	bl	8003bb0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001af6:	0003      	movs	r3, r0
			(
			pHeaderCan,
			pHeaderTx,
			pdata2send
			);
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <CC_CAN_Init>:

void CC_CAN_Init(FDCAN_TxHeaderTypeDef* const txheader )
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
//	sFilterConfig.FilterID1 = 0x000;						//First possible delta module. Extended id
//	sFilterConfig.FilterID2 = 0x7FF;						//Last possible delta module. Extended id
//	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK){Error_Handler();}		//Filter configuration

	//Tx header configuration
	txheader->Identifier = CC_CAN_TX_ADRESS;			//Transmit identifier
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	32ff      	adds	r2, #255	@ 0xff
 8001b0e:	601a      	str	r2, [r3, #0]
	txheader->IdType = FDCAN_STANDARD_ID;				//Standard format identifier
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
	txheader->TxFrameType = FDCAN_DATA_FRAME;			//Frame type
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
	txheader->DataLength = CC_CAN_TXDATALENGHT;			//Length of the data is 8 bytes
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2208      	movs	r2, #8
 8001b20:	60da      	str	r2, [r3, #12]
	txheader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;	//Error indicator active
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
	txheader->BitRateSwitch = FDCAN_BRS_OFF;			//Without bit rate switching
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
	txheader->FDFormat = FDCAN_CLASSIC_CAN;				//Classic format
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
	txheader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;	//Without any Tx event
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
	txheader->MessageMarker = 0;						//Identifier (marker) in case of an Tx event
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* const hfdcan, uint32_t RxFifo0ITs)
//CAN bus receiver, FIFO 0 callback (FIFO it is not used).
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	uint8_t GottenData[CC_CAN_RXDATALENGHT];

	if((RxFifo0ITs&FDCAN_IT_RX_FIFO0_NEW_MESSAGE)!=RESET)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d015      	beq.n	8001b86 <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CC_CAN_RxHeader, GottenData) != HAL_OK)
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	2140      	movs	r1, #64	@ 0x40
 8001b64:	f002 f86a 	bl	8003c3c <HAL_FDCAN_GetRxMessage>
 8001b68:	1e03      	subs	r3, r0, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_FDCAN_RxFifo0Callback+0x28>
		{
			//AFEGIR LOG D'ERRORS? VARIABLE GLOBAL? TRENQUEM LA ABSTRACCIÓ?
			Error_Handler();
 8001b6c:	f001 f9e6 	bl	8002f3c <Error_Handler>
		}
		if (CC_CAN_RxHeader.Identifier==CC_CAN_RxAdress)
 8001b70:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d104      	bne.n	8001b86 <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			memcpy(&CC_CAN_RxData,&GottenData, sizeof(GottenData));
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8001b7e:	2208      	movs	r2, #8
 8001b80:	18ba      	adds	r2, r7, r2
 8001b82:	ca03      	ldmia	r2!, {r0, r1}
 8001b84:	c303      	stmia	r3!, {r0, r1}
//			CC_CAN_RXPROCESS;
		}
	}
}
 8001b86:	46c0      	nop			@ (mov r8, r8)
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	200003c4 	.word	0x200003c4
 8001b94:	20000004 	.word	0x20000004
 8001b98:	20000390 	.word	0x20000390

08001b9c <CC_DIPSW_GetDipSwitch4pos>:
		pData->bits.bit2=HAL_GPIO_ReadPin(DIP_SW3_GPIO_Port, DIP_SW3_Pin);
	}
#endif
#ifdef DIP_SW4_Pin
	void CC_DIPSW_GetDipSwitch4pos(CC_DIPSW_DipSw_t* const pData)
	{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
		pData->bits.bit0=HAL_GPIO_ReadPin(DIP_SW1_GPIO_Port, DIP_SW1_Pin);
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	019b      	lsls	r3, r3, #6
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c64 <CC_DIPSW_GetDipSwitch4pos+0xc8>)
 8001baa:	0019      	movs	r1, r3
 8001bac:	0010      	movs	r0, r2
 8001bae:	f002 fe07 	bl	80047c0 <HAL_GPIO_ReadPin>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	1c1a      	adds	r2, r3, #0
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	0010      	movs	r0, r2
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	438a      	bics	r2, r1
 8001bca:	1c11      	adds	r1, r2, #0
 8001bcc:	1c02      	adds	r2, r0, #0
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
		pData->bits.bit1=HAL_GPIO_ReadPin(DIP_SW2_GPIO_Port, DIP_SW2_Pin);
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	01db      	lsls	r3, r3, #7
 8001bd6:	4a23      	ldr	r2, [pc, #140]	@ (8001c64 <CC_DIPSW_GetDipSwitch4pos+0xc8>)
 8001bd8:	0019      	movs	r1, r3
 8001bda:	0010      	movs	r0, r2
 8001bdc:	f002 fdf0 	bl	80047c0 <HAL_GPIO_ReadPin>
 8001be0:	0003      	movs	r3, r0
 8001be2:	1c1a      	adds	r2, r3, #0
 8001be4:	2301      	movs	r3, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2101      	movs	r1, #1
 8001bee:	400a      	ands	r2, r1
 8001bf0:	1890      	adds	r0, r2, r2
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	1c11      	adds	r1, r2, #0
 8001bfa:	1c02      	adds	r2, r0, #0
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
		pData->bits.bit2=HAL_GPIO_ReadPin(DIP_SW3_GPIO_Port, DIP_SW3_Pin);
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	4a17      	ldr	r2, [pc, #92]	@ (8001c64 <CC_DIPSW_GetDipSwitch4pos+0xc8>)
 8001c06:	0019      	movs	r1, r3
 8001c08:	0010      	movs	r0, r2
 8001c0a:	f002 fdd9 	bl	80047c0 <HAL_GPIO_ReadPin>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	1c1a      	adds	r2, r3, #0
 8001c12:	2301      	movs	r3, #1
 8001c14:	4013      	ands	r3, r2
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	0090      	lsls	r0, r2, #2
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	2104      	movs	r1, #4
 8001c24:	438a      	bics	r2, r1
 8001c26:	1c11      	adds	r1, r2, #0
 8001c28:	1c02      	adds	r2, r0, #0
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
		pData->bits.bit3=HAL_GPIO_ReadPin(DIP_SW4_GPIO_Port, DIP_SW4_Pin);
 8001c2e:	23a0      	movs	r3, #160	@ 0xa0
 8001c30:	05db      	lsls	r3, r3, #23
 8001c32:	2101      	movs	r1, #1
 8001c34:	0018      	movs	r0, r3
 8001c36:	f002 fdc3 	bl	80047c0 <HAL_GPIO_ReadPin>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	1c1a      	adds	r2, r3, #0
 8001c3e:	2301      	movs	r3, #1
 8001c40:	4013      	ands	r3, r2
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2101      	movs	r1, #1
 8001c48:	400a      	ands	r2, r1
 8001c4a:	00d0      	lsls	r0, r2, #3
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	2108      	movs	r1, #8
 8001c50:	438a      	bics	r2, r1
 8001c52:	1c11      	adds	r1, r2, #0
 8001c54:	1c02      	adds	r2, r0, #0
 8001c56:	430a      	orrs	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
	}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	50000800 	.word	0x50000800

08001c68 <CC_LED_TurnOnRedOnStrip1>:
//GLOBAL VARIABLES DECLARATION

//FUNCTIONS
//Strip1
inline void CC_LED_TurnOnRedOnStrip1(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4803      	ldr	r0, [pc, #12]	@ (8001c80 <CC_LED_TurnOnRedOnStrip1+0x18>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	0019      	movs	r1, r3
 8001c76:	f002 fdc0 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	50000400 	.word	0x50000400

08001c84 <CC_LED_TurnOnGreenOnStrip1>:
inline void CC_LED_TurnOnGreenOnStrip1(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <CC_LED_TurnOnGreenOnStrip1+0x18>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	0019      	movs	r1, r3
 8001c92:	f002 fdb2 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	50000400 	.word	0x50000400

08001ca0 <CC_LED_TurnOnBlueOnStrip1>:
inline void CC_LED_TurnOnBlueOnStrip1(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_SET);
 8001ca4:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <CC_LED_TurnOnBlueOnStrip1+0x18>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2180      	movs	r1, #128	@ 0x80
 8001caa:	0018      	movs	r0, r3
 8001cac:	f002 fda5 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	50000400 	.word	0x50000400

08001cbc <CC_LED_TurnOffRedOnStrip1>:
inline void CC_LED_TurnOffRedOnStrip1(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <CC_LED_TurnOffRedOnStrip1+0x18>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	0019      	movs	r1, r3
 8001cca:	f002 fd96 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	50000400 	.word	0x50000400

08001cd8 <CC_LED_TurnOffGreenOnStrip1>:
inline void CC_LED_TurnOffGreenOnStrip1(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <CC_LED_TurnOffGreenOnStrip1+0x18>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	f002 fd88 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	50000400 	.word	0x50000400

08001cf4 <CC_LED_TurnOffBlueOnStrip1>:
inline void CC_LED_TurnOffBlueOnStrip1(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_RESET);
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <CC_LED_TurnOffBlueOnStrip1+0x18>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2180      	movs	r1, #128	@ 0x80
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f002 fd7b 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	50000400 	.word	0x50000400

08001d10 <CC_LED_TurnOnRedOnStrip2>:
//Strip2
inline void CC_LED_TurnOnRedOnStrip2(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <CC_LED_TurnOnRedOnStrip2+0x18>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	2140      	movs	r1, #64	@ 0x40
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f002 fd6d 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001d20:	46c0      	nop			@ (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	50000400 	.word	0x50000400

08001d2c <CC_LED_TurnOnGreenOnStrip2>:
inline void CC_LED_TurnOnGreenOnStrip2(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <CC_LED_TurnOnGreenOnStrip2+0x18>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	2120      	movs	r1, #32
 8001d36:	0018      	movs	r0, r3
 8001d38:	f002 fd5f 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001d3c:	46c0      	nop			@ (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	50000400 	.word	0x50000400

08001d48 <CC_LED_TurnOnBlueOnStrip2>:
inline void CC_LED_TurnOnBlueOnStrip2(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, GPIO_PIN_SET);
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <CC_LED_TurnOnBlueOnStrip2+0x18>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2110      	movs	r1, #16
 8001d52:	0018      	movs	r0, r3
 8001d54:	f002 fd51 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	50000400 	.word	0x50000400

08001d64 <CC_LED_TurnOffRedOnStrip2>:
inline void CC_LED_TurnOffRedOnStrip2(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8001d68:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <CC_LED_TurnOffRedOnStrip2+0x18>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2140      	movs	r1, #64	@ 0x40
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f002 fd43 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	50000400 	.word	0x50000400

08001d80 <CC_LED_TurnOffGreenOnStrip2>:
inline void CC_LED_TurnOffGreenOnStrip2(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <CC_LED_TurnOffGreenOnStrip2+0x18>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	2120      	movs	r1, #32
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f002 fd35 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001d90:	46c0      	nop			@ (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	50000400 	.word	0x50000400

08001d9c <CC_LED_TurnOffBlueOnStrip2>:
inline void CC_LED_TurnOffBlueOnStrip2(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, GPIO_PIN_RESET);
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <CC_LED_TurnOffBlueOnStrip2+0x18>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	2110      	movs	r1, #16
 8001da6:	0018      	movs	r0, r3
 8001da8:	f002 fd27 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001dac:	46c0      	nop			@ (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	50000400 	.word	0x50000400

08001db8 <CC_LED_TurnOnRedOnStrip3>:
//Strip3
inline void CC_LED_TurnOnRedOnStrip3(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8001dbc:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <CC_LED_TurnOnRedOnStrip3+0x18>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f002 fd19 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	50000400 	.word	0x50000400

08001dd4 <CC_LED_TurnOnGreenOnStrip3>:
inline void CC_LED_TurnOnGreenOnStrip3(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_SET);
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <CC_LED_TurnOnGreenOnStrip3+0x18>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2108      	movs	r1, #8
 8001dde:	0018      	movs	r0, r3
 8001de0:	f002 fd0b 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001de4:	46c0      	nop			@ (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	50000c00 	.word	0x50000c00

08001df0 <CC_LED_TurnOnBlueOnStrip3>:
inline void CC_LED_TurnOnBlueOnStrip3(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, GPIO_PIN_SET);
 8001df4:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <CC_LED_TurnOnBlueOnStrip3+0x18>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	2104      	movs	r1, #4
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f002 fcfd 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001e00:	46c0      	nop			@ (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	50000c00 	.word	0x50000c00

08001e0c <CC_LED_TurnOffRedOnStrip3>:
inline void CC_LED_TurnOffRedOnStrip3(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <CC_LED_TurnOffRedOnStrip3+0x18>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	2108      	movs	r1, #8
 8001e16:	0018      	movs	r0, r3
 8001e18:	f002 fcef 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001e1c:	46c0      	nop			@ (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	50000400 	.word	0x50000400

08001e28 <CC_LED_TurnOffGreenOnStrip3>:
inline void CC_LED_TurnOffGreenOnStrip3(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_RESET);
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <CC_LED_TurnOffGreenOnStrip3+0x18>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2108      	movs	r1, #8
 8001e32:	0018      	movs	r0, r3
 8001e34:	f002 fce1 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001e38:	46c0      	nop			@ (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	50000c00 	.word	0x50000c00

08001e44 <CC_LED_TurnOffBlueOnStrip3>:
inline void CC_LED_TurnOffBlueOnStrip3(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, GPIO_PIN_RESET);
 8001e48:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <CC_LED_TurnOffBlueOnStrip3+0x18>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f002 fcd3 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001e54:	46c0      	nop			@ (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	50000c00 	.word	0x50000c00

08001e60 <CC_LED_TurnOnRedOnStrip4>:
//Strip4
inline void CC_LED_TurnOnRedOnStrip4(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <CC_LED_TurnOnRedOnStrip4+0x18>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	2102      	movs	r1, #2
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f002 fcc5 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001e70:	46c0      	nop			@ (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	50000c00 	.word	0x50000c00

08001e7c <CC_LED_TurnOnGreenOnStrip4>:
inline void CC_LED_TurnOnGreenOnStrip4(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_SET);
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <CC_LED_TurnOnGreenOnStrip4+0x18>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	2101      	movs	r1, #1
 8001e86:	0018      	movs	r0, r3
 8001e88:	f002 fcb7 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	50000c00 	.word	0x50000c00

08001e98 <CC_LED_TurnOnBlueOnStrip4>:
inline void CC_LED_TurnOnBlueOnStrip4(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_SET);
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	0219      	lsls	r1, r3, #8
 8001ea0:	23a0      	movs	r3, #160	@ 0xa0
 8001ea2:	05db      	lsls	r3, r3, #23
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f002 fca7 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <CC_LED_TurnOffRedOnStrip4>:
inline void CC_LED_TurnOffRedOnStrip4(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <CC_LED_TurnOffRedOnStrip4+0x18>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f002 fc9b 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001ec4:	46c0      	nop			@ (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	50000c00 	.word	0x50000c00

08001ed0 <CC_LED_TurnOffGreenOnStrip4>:
inline void CC_LED_TurnOffGreenOnStrip4(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_RESET);
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <CC_LED_TurnOffGreenOnStrip4+0x18>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2101      	movs	r1, #1
 8001eda:	0018      	movs	r0, r3
 8001edc:	f002 fc8d 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001ee0:	46c0      	nop			@ (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	50000c00 	.word	0x50000c00

08001eec <CC_LED_TurnOffBlueOnStrip4>:
inline void CC_LED_TurnOffBlueOnStrip4(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_RESET);
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	0219      	lsls	r1, r3, #8
 8001ef4:	23a0      	movs	r3, #160	@ 0xa0
 8001ef6:	05db      	lsls	r3, r3, #23
 8001ef8:	2200      	movs	r2, #0
 8001efa:	0018      	movs	r0, r3
 8001efc:	f002 fc7d 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001f00:	46c0      	nop			@ (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <CC_LED_TurnOnRedOnStrip5>:
//Strip5
inline void CC_LED_TurnOnRedOnStrip5(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R5_GPIO_Port, R5_Pin, GPIO_PIN_SET);
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	23a0      	movs	r3, #160	@ 0xa0
 8001f10:	05db      	lsls	r3, r3, #23
 8001f12:	2201      	movs	r2, #1
 8001f14:	0018      	movs	r0, r3
 8001f16:	f002 fc70 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <CC_LED_TurnOnGreenOnStrip5>:
inline void CC_LED_TurnOnGreenOnStrip5(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_SET);
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	0119      	lsls	r1, r3, #4
 8001f28:	23a0      	movs	r3, #160	@ 0xa0
 8001f2a:	05db      	lsls	r3, r3, #23
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f002 fc63 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <CC_LED_TurnOnBlueOnStrip5>:
inline void CC_LED_TurnOnBlueOnStrip5(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_SET);
 8001f40:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <CC_LED_TurnOnBlueOnStrip5+0x18>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	2180      	movs	r1, #128	@ 0x80
 8001f46:	0018      	movs	r0, r3
 8001f48:	f002 fc57 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001f4c:	46c0      	nop			@ (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	50000800 	.word	0x50000800

08001f58 <CC_LED_TurnOffRedOnStrip5>:
inline void CC_LED_TurnOffRedOnStrip5(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R5_GPIO_Port, R5_Pin, GPIO_PIN_RESET);
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	0159      	lsls	r1, r3, #5
 8001f60:	23a0      	movs	r3, #160	@ 0xa0
 8001f62:	05db      	lsls	r3, r3, #23
 8001f64:	2200      	movs	r2, #0
 8001f66:	0018      	movs	r0, r3
 8001f68:	f002 fc47 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001f6c:	46c0      	nop			@ (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <CC_LED_TurnOffGreenOnStrip5>:
inline void CC_LED_TurnOffGreenOnStrip5(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_RESET);
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	0119      	lsls	r1, r3, #4
 8001f7a:	23a0      	movs	r3, #160	@ 0xa0
 8001f7c:	05db      	lsls	r3, r3, #23
 8001f7e:	2200      	movs	r2, #0
 8001f80:	0018      	movs	r0, r3
 8001f82:	f002 fc3a 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <CC_LED_TurnOffBlueOnStrip5>:
inline void CC_LED_TurnOffBlueOnStrip5(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_RESET);
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <CC_LED_TurnOffBlueOnStrip5+0x18>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	2180      	movs	r1, #128	@ 0x80
 8001f96:	0018      	movs	r0, r3
 8001f98:	f002 fc2f 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	50000800 	.word	0x50000800

08001fa8 <CC_LED_TurnOnRedOnStrip6>:
//Strip6
inline void CC_LED_TurnOnRedOnStrip6(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R6_GPIO_Port, R6_Pin, GPIO_PIN_SET);
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <CC_LED_TurnOnRedOnStrip6+0x18>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2140      	movs	r1, #64	@ 0x40
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f002 fc21 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001fb8:	46c0      	nop			@ (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	50000800 	.word	0x50000800

08001fc4 <CC_LED_TurnOnGreenOnStrip6>:
inline void CC_LED_TurnOnGreenOnStrip6(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_SET);
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	0059      	lsls	r1, r3, #1
 8001fcc:	23a0      	movs	r3, #160	@ 0xa0
 8001fce:	05db      	lsls	r3, r3, #23
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f002 fc11 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001fd8:	46c0      	nop			@ (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <CC_LED_TurnOnBlueOnStrip6>:
inline void CC_LED_TurnOnBlueOnStrip6(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_SET);
 8001fe4:	2380      	movs	r3, #128	@ 0x80
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	4803      	ldr	r0, [pc, #12]	@ (8001ff8 <CC_LED_TurnOnBlueOnStrip6+0x18>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	0019      	movs	r1, r3
 8001fee:	f002 fc04 	bl	80047fa <HAL_GPIO_WritePin>
}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	50000400 	.word	0x50000400

08001ffc <CC_LED_TurnOffRedOnStrip6>:
inline void CC_LED_TurnOffRedOnStrip6(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R6_GPIO_Port, R6_Pin, GPIO_PIN_RESET);
 8002000:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <CC_LED_TurnOffRedOnStrip6+0x18>)
 8002002:	2200      	movs	r2, #0
 8002004:	2140      	movs	r1, #64	@ 0x40
 8002006:	0018      	movs	r0, r3
 8002008:	f002 fbf7 	bl	80047fa <HAL_GPIO_WritePin>
}
 800200c:	46c0      	nop			@ (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	50000800 	.word	0x50000800

08002018 <CC_LED_TurnOffGreenOnStrip6>:
inline void CC_LED_TurnOffGreenOnStrip6(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_RESET);
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	0059      	lsls	r1, r3, #1
 8002020:	23a0      	movs	r3, #160	@ 0xa0
 8002022:	05db      	lsls	r3, r3, #23
 8002024:	2200      	movs	r2, #0
 8002026:	0018      	movs	r0, r3
 8002028:	f002 fbe7 	bl	80047fa <HAL_GPIO_WritePin>
}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <CC_LED_TurnOffBlueOnStrip6>:
inline void CC_LED_TurnOffBlueOnStrip6(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_RESET);
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	4803      	ldr	r0, [pc, #12]	@ (800204c <CC_LED_TurnOffBlueOnStrip6+0x18>)
 800203e:	2200      	movs	r2, #0
 8002040:	0019      	movs	r1, r3
 8002042:	f002 fbda 	bl	80047fa <HAL_GPIO_WritePin>
}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	50000400 	.word	0x50000400

08002050 <CC_LED_TurnOnRedOnStrip7>:
//Strip7
inline void CC_LED_TurnOnRedOnStrip7(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R7_GPIO_Port, R7_Pin, GPIO_PIN_SET);
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	01db      	lsls	r3, r3, #7
 8002058:	4803      	ldr	r0, [pc, #12]	@ (8002068 <CC_LED_TurnOnRedOnStrip7+0x18>)
 800205a:	2201      	movs	r2, #1
 800205c:	0019      	movs	r1, r3
 800205e:	f002 fbcc 	bl	80047fa <HAL_GPIO_WritePin>
}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	50000400 	.word	0x50000400

0800206c <CC_LED_TurnOnGreenOnStrip7>:
inline void CC_LED_TurnOnGreenOnStrip7(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_SET);
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	019b      	lsls	r3, r3, #6
 8002074:	4803      	ldr	r0, [pc, #12]	@ (8002084 <CC_LED_TurnOnGreenOnStrip7+0x18>)
 8002076:	2201      	movs	r2, #1
 8002078:	0019      	movs	r1, r3
 800207a:	f002 fbbe 	bl	80047fa <HAL_GPIO_WritePin>
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	50000400 	.word	0x50000400

08002088 <CC_LED_TurnOnBlueOnStrip7>:
inline void CC_LED_TurnOnBlueOnStrip7(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_SET);
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	015b      	lsls	r3, r3, #5
 8002090:	4803      	ldr	r0, [pc, #12]	@ (80020a0 <CC_LED_TurnOnBlueOnStrip7+0x18>)
 8002092:	2201      	movs	r2, #1
 8002094:	0019      	movs	r1, r3
 8002096:	f002 fbb0 	bl	80047fa <HAL_GPIO_WritePin>
}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	50000400 	.word	0x50000400

080020a4 <CC_LED_TurnOffRedOnStrip7>:
inline void CC_LED_TurnOffRedOnStrip7(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R7_GPIO_Port, R7_Pin, GPIO_PIN_RESET);
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	01db      	lsls	r3, r3, #7
 80020ac:	4803      	ldr	r0, [pc, #12]	@ (80020bc <CC_LED_TurnOffRedOnStrip7+0x18>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	0019      	movs	r1, r3
 80020b2:	f002 fba2 	bl	80047fa <HAL_GPIO_WritePin>
}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	50000400 	.word	0x50000400

080020c0 <CC_LED_TurnOffGreenOnStrip7>:
inline void CC_LED_TurnOffGreenOnStrip7(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_RESET);
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	019b      	lsls	r3, r3, #6
 80020c8:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <CC_LED_TurnOffGreenOnStrip7+0x18>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	0019      	movs	r1, r3
 80020ce:	f002 fb94 	bl	80047fa <HAL_GPIO_WritePin>
}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	50000400 	.word	0x50000400

080020dc <CC_LED_TurnOffBlueOnStrip7>:
inline void CC_LED_TurnOffBlueOnStrip7(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_RESET);
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	015b      	lsls	r3, r3, #5
 80020e4:	4803      	ldr	r0, [pc, #12]	@ (80020f4 <CC_LED_TurnOffBlueOnStrip7+0x18>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	0019      	movs	r1, r3
 80020ea:	f002 fb86 	bl	80047fa <HAL_GPIO_WritePin>
}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	50000400 	.word	0x50000400

080020f8 <CC_LED_TurnOnRedOnStrip8>:
//Strip8
inline void CC_LED_TurnOnRedOnStrip8(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R8_GPIO_Port, R8_Pin, GPIO_PIN_SET);
 80020fc:	2380      	movs	r3, #128	@ 0x80
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	4803      	ldr	r0, [pc, #12]	@ (8002110 <CC_LED_TurnOnRedOnStrip8+0x18>)
 8002102:	2201      	movs	r2, #1
 8002104:	0019      	movs	r1, r3
 8002106:	f002 fb78 	bl	80047fa <HAL_GPIO_WritePin>
}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	50000400 	.word	0x50000400

08002114 <CC_LED_TurnOnGreenOnStrip8>:
inline void CC_LED_TurnOnGreenOnStrip8(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_SET);
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4803      	ldr	r0, [pc, #12]	@ (800212c <CC_LED_TurnOnGreenOnStrip8+0x18>)
 800211e:	2201      	movs	r2, #1
 8002120:	0019      	movs	r1, r3
 8002122:	f002 fb6a 	bl	80047fa <HAL_GPIO_WritePin>
}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	50000400 	.word	0x50000400

08002130 <CC_LED_TurnOnBlueOnStrip8>:
inline void CC_LED_TurnOnBlueOnStrip8(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B8_GPIO_Port, B8_Pin, GPIO_PIN_SET);
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <CC_LED_TurnOnBlueOnStrip8+0x18>)
 8002136:	2201      	movs	r2, #1
 8002138:	2104      	movs	r1, #4
 800213a:	0018      	movs	r0, r3
 800213c:	f002 fb5d 	bl	80047fa <HAL_GPIO_WritePin>
}
 8002140:	46c0      	nop			@ (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	50000400 	.word	0x50000400

0800214c <CC_LED_TurnOffRedOnStrip8>:
inline void CC_LED_TurnOffRedOnStrip8(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R8_GPIO_Port, R8_Pin, GPIO_PIN_RESET);
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	4803      	ldr	r0, [pc, #12]	@ (8002164 <CC_LED_TurnOffRedOnStrip8+0x18>)
 8002156:	2200      	movs	r2, #0
 8002158:	0019      	movs	r1, r3
 800215a:	f002 fb4e 	bl	80047fa <HAL_GPIO_WritePin>
}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	50000400 	.word	0x50000400

08002168 <CC_LED_TurnOffGreenOnStrip8>:
inline void CC_LED_TurnOffGreenOnStrip8(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_RESET);
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4803      	ldr	r0, [pc, #12]	@ (8002180 <CC_LED_TurnOffGreenOnStrip8+0x18>)
 8002172:	2200      	movs	r2, #0
 8002174:	0019      	movs	r1, r3
 8002176:	f002 fb40 	bl	80047fa <HAL_GPIO_WritePin>
}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	50000400 	.word	0x50000400

08002184 <CC_LED_TurnOffBlueOnStrip8>:
inline void CC_LED_TurnOffBlueOnStrip8(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B8_GPIO_Port, B8_Pin, GPIO_PIN_RESET);
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <CC_LED_TurnOffBlueOnStrip8+0x18>)
 800218a:	2200      	movs	r2, #0
 800218c:	2104      	movs	r1, #4
 800218e:	0018      	movs	r0, r3
 8002190:	f002 fb33 	bl	80047fa <HAL_GPIO_WritePin>
}
 8002194:	46c0      	nop			@ (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	50000400 	.word	0x50000400

080021a0 <CC_LED_TurnOnRedOnStrip9>:
//Strip9
inline void CC_LED_TurnOnRedOnStrip9(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R9_GPIO_Port, R9_Pin, GPIO_PIN_SET);
 80021a4:	23a0      	movs	r3, #160	@ 0xa0
 80021a6:	05db      	lsls	r3, r3, #23
 80021a8:	2201      	movs	r2, #1
 80021aa:	2180      	movs	r1, #128	@ 0x80
 80021ac:	0018      	movs	r0, r3
 80021ae:	f002 fb24 	bl	80047fa <HAL_GPIO_WritePin>
}
 80021b2:	46c0      	nop			@ (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <CC_LED_TurnOnGreenOnStrip9>:
inline void CC_LED_TurnOnGreenOnStrip9(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_SET);
 80021bc:	23a0      	movs	r3, #160	@ 0xa0
 80021be:	05db      	lsls	r3, r3, #23
 80021c0:	2201      	movs	r2, #1
 80021c2:	2140      	movs	r1, #64	@ 0x40
 80021c4:	0018      	movs	r0, r3
 80021c6:	f002 fb18 	bl	80047fa <HAL_GPIO_WritePin>
}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <CC_LED_TurnOnBlueOnStrip9>:
inline void CC_LED_TurnOnBlueOnStrip9(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B9_GPIO_Port, B9_Pin, GPIO_PIN_SET);
 80021d4:	23a0      	movs	r3, #160	@ 0xa0
 80021d6:	05db      	lsls	r3, r3, #23
 80021d8:	2201      	movs	r2, #1
 80021da:	2120      	movs	r1, #32
 80021dc:	0018      	movs	r0, r3
 80021de:	f002 fb0c 	bl	80047fa <HAL_GPIO_WritePin>
}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <CC_LED_TurnOffRedOnStrip9>:
inline void CC_LED_TurnOffRedOnStrip9(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R9_GPIO_Port, R9_Pin, GPIO_PIN_RESET);
 80021ec:	23a0      	movs	r3, #160	@ 0xa0
 80021ee:	05db      	lsls	r3, r3, #23
 80021f0:	2200      	movs	r2, #0
 80021f2:	2180      	movs	r1, #128	@ 0x80
 80021f4:	0018      	movs	r0, r3
 80021f6:	f002 fb00 	bl	80047fa <HAL_GPIO_WritePin>
}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <CC_LED_TurnOffGreenOnStrip9>:
inline void CC_LED_TurnOffGreenOnStrip9(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_RESET);
 8002204:	23a0      	movs	r3, #160	@ 0xa0
 8002206:	05db      	lsls	r3, r3, #23
 8002208:	2200      	movs	r2, #0
 800220a:	2140      	movs	r1, #64	@ 0x40
 800220c:	0018      	movs	r0, r3
 800220e:	f002 faf4 	bl	80047fa <HAL_GPIO_WritePin>
}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <CC_LED_TurnOffBlueOnStrip9>:
inline void CC_LED_TurnOffBlueOnStrip9(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B9_GPIO_Port, B9_Pin, GPIO_PIN_RESET);
 800221c:	23a0      	movs	r3, #160	@ 0xa0
 800221e:	05db      	lsls	r3, r3, #23
 8002220:	2200      	movs	r2, #0
 8002222:	2120      	movs	r1, #32
 8002224:	0018      	movs	r0, r3
 8002226:	f002 fae8 	bl	80047fa <HAL_GPIO_WritePin>
}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <CC_LED_TurnOnRedOnStrip10>:
//Strip10
inline void CC_LED_TurnOnRedOnStrip10(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R10_GPIO_Port, R10_Pin, GPIO_PIN_SET);
 8002234:	23a0      	movs	r3, #160	@ 0xa0
 8002236:	05db      	lsls	r3, r3, #23
 8002238:	2201      	movs	r2, #1
 800223a:	2110      	movs	r1, #16
 800223c:	0018      	movs	r0, r3
 800223e:	f002 fadc 	bl	80047fa <HAL_GPIO_WritePin>
}
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <CC_LED_TurnOnGreenOnStrip10>:
inline void CC_LED_TurnOnGreenOnStrip10(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G10_GPIO_Port, G10_Pin, GPIO_PIN_SET);
 800224c:	23a0      	movs	r3, #160	@ 0xa0
 800224e:	05db      	lsls	r3, r3, #23
 8002250:	2201      	movs	r2, #1
 8002252:	2108      	movs	r1, #8
 8002254:	0018      	movs	r0, r3
 8002256:	f002 fad0 	bl	80047fa <HAL_GPIO_WritePin>
}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <CC_LED_TurnOnBlueOnStrip10>:
inline void CC_LED_TurnOnBlueOnStrip10(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B10_GPIO_Port, B10_Pin, GPIO_PIN_SET);
 8002264:	23a0      	movs	r3, #160	@ 0xa0
 8002266:	05db      	lsls	r3, r3, #23
 8002268:	2201      	movs	r2, #1
 800226a:	2104      	movs	r1, #4
 800226c:	0018      	movs	r0, r3
 800226e:	f002 fac4 	bl	80047fa <HAL_GPIO_WritePin>
}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <CC_LED_TurnOffRedOnStrip10>:
inline void CC_LED_TurnOffRedOnStrip10(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R10_GPIO_Port, R10_Pin, GPIO_PIN_RESET);
 800227c:	23a0      	movs	r3, #160	@ 0xa0
 800227e:	05db      	lsls	r3, r3, #23
 8002280:	2200      	movs	r2, #0
 8002282:	2110      	movs	r1, #16
 8002284:	0018      	movs	r0, r3
 8002286:	f002 fab8 	bl	80047fa <HAL_GPIO_WritePin>
}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <CC_LED_TurnOffGreenOnStrip10>:
inline void CC_LED_TurnOffGreenOnStrip10(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G10_GPIO_Port, G10_Pin, GPIO_PIN_RESET);
 8002294:	23a0      	movs	r3, #160	@ 0xa0
 8002296:	05db      	lsls	r3, r3, #23
 8002298:	2200      	movs	r2, #0
 800229a:	2108      	movs	r1, #8
 800229c:	0018      	movs	r0, r3
 800229e:	f002 faac 	bl	80047fa <HAL_GPIO_WritePin>
}
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <CC_LED_TurnOffBlueOnStrip10>:
inline void CC_LED_TurnOffBlueOnStrip10(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B10_GPIO_Port, B10_Pin, GPIO_PIN_RESET);
 80022ac:	23a0      	movs	r3, #160	@ 0xa0
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	2200      	movs	r2, #0
 80022b2:	2104      	movs	r1, #4
 80022b4:	0018      	movs	r0, r3
 80022b6:	f002 faa0 	bl	80047fa <HAL_GPIO_WritePin>
}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <CC_RTC_SetTimeAndDate>:
	pTimeData->MiliSeconds=((Time.SecondFraction-Time.SubSeconds)*1000)/(Time.SecondFraction+1); //SecondFraction= total ticks into a second. Subsecond= Countdown counter
	return HAL_OK;
}

uint8_t CC_RTC_SetTimeAndDate(RTC_HandleTypeDef* const phrtc, const CC_RTC_TimeStamp_t* const pTimeData)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b089      	sub	sp, #36	@ 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef Time={0};		//Variable where is updated the time managed by the RTC
 80022ca:	240c      	movs	r4, #12
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	0018      	movs	r0, r3
 80022d0:	2314      	movs	r3, #20
 80022d2:	001a      	movs	r2, r3
 80022d4:	2100      	movs	r1, #0
 80022d6:	f006 fc27 	bl	8008b28 <memset>
	RTC_DateTypeDef Date={0};		//Variable where is updated the date managed by the RTC
 80022da:	2008      	movs	r0, #8
 80022dc:	183b      	adds	r3, r7, r0
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]

	Time.Hours=pTimeData->Hours;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	78da      	ldrb	r2, [r3, #3]
 80022e6:	0021      	movs	r1, r4
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	701a      	strb	r2, [r3, #0]
	Time.Minutes=pTimeData->Minutes;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	791a      	ldrb	r2, [r3, #4]
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	705a      	strb	r2, [r3, #1]
	Time.Seconds=pTimeData->Seconds;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	795a      	ldrb	r2, [r3, #5]
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	709a      	strb	r2, [r3, #2]
	Time.TimeFormat=RTC_HOURFORMAT_24;
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	2200      	movs	r2, #0
 8002300:	70da      	strb	r2, [r3, #3]
	Date.Year=pTimeData->Year;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	183b      	adds	r3, r7, r0
 8002308:	70da      	strb	r2, [r3, #3]
	Date.Month=pTimeData->Month;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	785a      	ldrb	r2, [r3, #1]
 800230e:	183b      	adds	r3, r7, r0
 8002310:	705a      	strb	r2, [r3, #1]
	Date.Date=pTimeData->Day;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	789a      	ldrb	r2, [r3, #2]
 8002316:	183b      	adds	r3, r7, r0
 8002318:	709a      	strb	r2, [r3, #2]
	if (HAL_RTC_SetTime(phrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 800231a:	1879      	adds	r1, r7, r1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	0018      	movs	r0, r3
 8002322:	f003 fb9d 	bl	8005a60 <HAL_RTC_SetTime>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d001      	beq.n	800232e <CC_RTC_SetTimeAndDate+0x6e>
	{
	    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00b      	b.n	8002346 <CC_RTC_SetTimeAndDate+0x86>
	}

	if (HAL_RTC_SetDate(phrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800232e:	2308      	movs	r3, #8
 8002330:	18f9      	adds	r1, r7, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	0018      	movs	r0, r3
 8002338:	f003 fc3a 	bl	8005bb0 <HAL_RTC_SetDate>
 800233c:	1e03      	subs	r3, r0, #0
 800233e:	d001      	beq.n	8002344 <CC_RTC_SetTimeAndDate+0x84>
	{
	    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <CC_RTC_SetTimeAndDate+0x86>
	}
	return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b009      	add	sp, #36	@ 0x24
 800234c:	bd90      	pop	{r4, r7, pc}

0800234e <CC_RTC_SetDefaultTimeAndDate>:

uint8_t CC_RTC_SetDefaultTimeAndDate(RTC_HandleTypeDef* const phrtc)
{
 800234e:	b590      	push	{r4, r7, lr}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
	CC_RTC_TimeStamp_t data={0};
 8002356:	2408      	movs	r4, #8
 8002358:	193b      	adds	r3, r7, r4
 800235a:	0018      	movs	r0, r3
 800235c:	2307      	movs	r3, #7
 800235e:	001a      	movs	r2, r3
 8002360:	2100      	movs	r1, #0
 8002362:	f006 fbe1 	bl	8008b28 <memset>

	data.Year=CC_RTC_DEFAULT_YEAR;
 8002366:	0021      	movs	r1, r4
 8002368:	187b      	adds	r3, r7, r1
 800236a:	2218      	movs	r2, #24
 800236c:	701a      	strb	r2, [r3, #0]
	data.Month=CC_RTC_DEFAULT_MONTH;
 800236e:	187b      	adds	r3, r7, r1
 8002370:	220b      	movs	r2, #11
 8002372:	705a      	strb	r2, [r3, #1]
	data.Day=CC_RTC_DEFAULT_DAY;
 8002374:	187b      	adds	r3, r7, r1
 8002376:	2201      	movs	r2, #1
 8002378:	709a      	strb	r2, [r3, #2]
	data.Hours=CC_RTC_DEFAULT_HOUR;
 800237a:	187b      	adds	r3, r7, r1
 800237c:	220a      	movs	r2, #10
 800237e:	70da      	strb	r2, [r3, #3]
	data.Minutes=CC_RTC_DEFAULT_MINUTE;
 8002380:	187b      	adds	r3, r7, r1
 8002382:	220a      	movs	r2, #10
 8002384:	711a      	strb	r2, [r3, #4]
	data.Seconds=CC_RTC_DEFAULT_SECOND;
 8002386:	187b      	adds	r3, r7, r1
 8002388:	220a      	movs	r2, #10
 800238a:	715a      	strb	r2, [r3, #5]
	return CC_RTC_SetTimeAndDate(phrtc, &data);
 800238c:	187a      	adds	r2, r7, r1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff ff94 	bl	80022c0 <CC_RTC_SetTimeAndDate>
 8002398:	0003      	movs	r3, r0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b005      	add	sp, #20
 80023a0:	bd90      	pop	{r4, r7, pc}
	...

080023a4 <CC_RTC_Init>:

uint8_t CC_RTC_Init(RTC_HandleTypeDef* const phrtc)
//RTC initialization with the low speed inner oscillator(LSI) at 32.768Hz
//With the async and sync pre-dividers set to get 1Hz RTC tick
// f_RTC = f_LSI / ((Prediv_sync+1)x(Predib_async+1))
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	phrtc->Instance = RTC;									//Base @
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a12      	ldr	r2, [pc, #72]	@ (80023f8 <CC_RTC_Init+0x54>)
 80023b0:	601a      	str	r2, [r3, #0]
	phrtc->Init.HourFormat = RTC_HOURFORMAT_24;				//Hours format
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
	phrtc->Init.AsynchPrediv = 127;							//pre-dividers 1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	227f      	movs	r2, #127	@ 0x7f
 80023bc:	60da      	str	r2, [r3, #12]
	phrtc->Init.SynchPrediv = 255;							//pre-dividers 2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	22ff      	movs	r2, #255	@ 0xff
 80023c2:	611a      	str	r2, [r3, #16]
	phrtc->Init.OutPut = RTC_OUTPUT_DISABLE;				//No output
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	615a      	str	r2, [r3, #20]
	phrtc->Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;		//Output no remapped to anywhere
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
	phrtc->Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
	phrtc->Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2280      	movs	r2, #128	@ 0x80
 80023da:	05d2      	lsls	r2, r2, #23
 80023dc:	621a      	str	r2, [r3, #32]
	phrtc->Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	@ 0x24

	return HAL_RTC_Init(phrtc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f003 fa98 	bl	800591c <HAL_RTC_Init>
 80023ec:	0003      	movs	r3, r0
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	40002800 	.word	0x40002800

080023fc <HAL_UART_RxCpltCallback>:
uint8_t CC_SERIAL_RxData[CC_SERIAL_RX_BUFF_LENGTH];

//FUNCTIONS
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* const huart)
//UART callback
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	uint8_t error=0;
 8002404:	210f      	movs	r1, #15
 8002406:	187b      	adds	r3, r7, r1
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]

	/* NOTE : This function should not be modified, when the callback is needed,
			the HAL_UART_RxCpltCallback can be implemented in the user file.
	*/
	//  HAL_UART_Transmit(huart, CC_SERIAL_RxData, 1, 10);					//Gives back the character gotten
	error=HAL_UART_Receive_IT(
 800240c:	187c      	adds	r4, r7, r1
 800240e:	4906      	ldr	r1, [pc, #24]	@ (8002428 <HAL_UART_RxCpltCallback+0x2c>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	0018      	movs	r0, r3
 8002416:	f004 f9bb 	bl	8006790 <HAL_UART_Receive_IT>
 800241a:	0003      	movs	r3, r0
 800241c:	7023      	strb	r3, [r4, #0]
					  	  	  );	//Restarts the listening and interruption by serial comm
	if(error!=0)
	{
		//TRACTAMENT D'ERRORS AQUÍ
	}
}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b005      	add	sp, #20
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	200003f0 	.word	0x200003f0

0800242c <CC_SERIAL_SendData>:
							(
							UART_HandleTypeDef* const huart,
							const uint8_t* const tx_buffer,
							const uint16_t Size
							)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	1dbb      	adds	r3, r7, #6
 8002438:	801a      	strh	r2, [r3, #0]
    return HAL_UART_Transmit(huart, tx_buffer, Size, CC_SERIAL_TX_TIMEOUT);	//Send the string via UART
 800243a:	1dbb      	adds	r3, r7, #6
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	2301      	movs	r3, #1
 8002444:	f004 f900 	bl	8006648 <HAL_UART_Transmit>
 8002448:	0003      	movs	r3, r0

}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b004      	add	sp, #16
 8002450:	bd80      	pop	{r7, pc}

08002452 <CC_SERIAL_EnableRxIntUART>:

inline uint8_t CC_SERIAL_EnableRxIntUART(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	801a      	strh	r2, [r3, #0]
	return HAL_UART_Receive_IT(huart, pData, Size);
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	0018      	movs	r0, r3
 800246a:	f004 f991 	bl	8006790 <HAL_UART_Receive_IT>
 800246e:	0003      	movs	r3, r0
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b004      	add	sp, #16
 8002476:	bd80      	pop	{r7, pc}

08002478 <CC_TMR_CheckTimIntFlag>:

//GLOBAL VARIABLES DECLARATION

//FUNCTIONS
uint8_t CC_TMR_CheckTimIntFlag(const TIM_HandleTypeDef* const htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE))	//Check if another interrupt event has happened
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2201      	movs	r2, #1
 8002488:	4013      	ands	r3, r2
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <CC_TMR_CheckTimIntFlag+0x1a>
	{
		return 1;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <CC_TMR_CheckTimIntFlag+0x1c>
	}
	else
	{
		return 0;
 8002492:	2300      	movs	r3, #0
	}
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <CC_TMR_GetElapsedCounts>:

uint32_t CC_TMR_GetElapsedCounts(const TIM_HandleTypeDef* const htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <CC_TMR_GetLimitCounts>:

uint32_t CC_TMR_GetLimitCounts(const TIM_HandleTypeDef* const htim)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_AUTORELOAD(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <CC_TMR_TimerInit>:

inline uint8_t CC_TMR_TimerInit(TIM_HandleTypeDef* const htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	return HAL_TIM_Base_Init(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	0018      	movs	r0, r3
 80024d4:	f003 fcd2 	bl	8005e7c <HAL_TIM_Base_Init>
 80024d8:	0003      	movs	r3, r0
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <CC_TMR_TimerStartAndInterruptsGen>:

inline uint8_t CC_TMR_TimerStartAndInterruptsGen(TIM_HandleTypeDef* const htim)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	return HAL_TIM_Base_Start_IT(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f003 fd9d 	bl	800602c <HAL_TIM_Base_Start_IT>
 80024f2:	0003      	movs	r3, r0
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}

080024fc <CC_TMR_StartTimer>:

inline uint8_t CC_TMR_StartTimer(TIM_HandleTypeDef* const htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	return HAL_TIM_Base_Start(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	0018      	movs	r0, r3
 8002508:	f003 fd10 	bl	8005f2c <HAL_TIM_Base_Start>
 800250c:	0003      	movs	r3, r0
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}

08002516 <CC_TMR_StopTimer>:

inline uint8_t CC_TMR_StopTimer(TIM_HandleTypeDef* const htim)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
	return HAL_TIM_Base_Stop(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f003 fd5d 	bl	8005fe0 <HAL_TIM_Base_Stop>
 8002526:	0003      	movs	r3, r0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <CC_TMR_SetTimer>:

inline void CC_TMR_SetTimer(TIM_HandleTypeDef* const htim, uint32_t counts)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(htim, counts);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}

0800254a <CC_WATCHDOG_RefreshWdg>:

//GLOBAL VARIABLES DECLARATION

//FUNCTIONS
uint8_t CC_WATCHDOG_RefreshWdg(IWDG_HandleTypeDef* const handler )
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
return HAL_IWDG_Refresh(handler);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f002 f9db 	bl	8004910 <HAL_IWDG_Refresh>
 800255a:	0003      	movs	r3, r0
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <CC_ML_RefreshWatchdog>:
};

//FUNCTIONS
//Inner Watchdog
void CC_ML_RefreshWatchdog(void* param1, void* param2, void* param3)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
	uint8_t error=0;
 8002570:	2117      	movs	r1, #23
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
	IWDG_HandleTypeDef* pWatchdogHandler;

	pWatchdogHandler=(IWDG_HandleTypeDef*)param1;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	613b      	str	r3, [r7, #16]
	error=CC_WATCHDOG_RefreshWdg(pWatchdogHandler);
 800257c:	187c      	adds	r4, r7, r1
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff ffe2 	bl	800254a <CC_WATCHDOG_RefreshWdg>
 8002586:	0003      	movs	r3, r0
 8002588:	7023      	strb	r3, [r4, #0]
	if(error!=0)
	{
	//TRACTAMENT D'ERRORS AQUÍ
	}
}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b007      	add	sp, #28
 8002590:	bd90      	pop	{r4, r7, pc}
	...

08002594 <CC_ML_StartSoftPwmBasetimeAndInterrupts>:

//Soft PWM
void CC_ML_StartSoftPwmBasetimeAndInterrupts(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	CC_TMR_TimerInit(&CC_ML_PWM_GEN_BASETIME);
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <CC_ML_StartSoftPwmBasetimeAndInterrupts+0x1c>)
 800259a:	0018      	movs	r0, r3
 800259c:	f7ff ff94 	bl	80024c8 <CC_TMR_TimerInit>
	CC_TMR_TimerStartAndInterruptsGen(&CC_ML_PWM_GEN_BASETIME);
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <CC_ML_StartSoftPwmBasetimeAndInterrupts+0x1c>)
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff ff9d 	bl	80024e2 <CC_TMR_TimerStartAndInterruptsGen>
}
 80025a8:	46c0      	nop			@ (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	200004e0 	.word	0x200004e0

080025b4 <CC_ML_StartScheduler>:

//Scheduler
void CC_ML_StartScheduler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	CC_TMR_TimerInit(&CC_ML_SCHEDULER_BASETIME_HANDLER);
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <CC_ML_StartScheduler+0x1c>)
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7ff ff84 	bl	80024c8 <CC_TMR_TimerInit>
	CC_TMR_TimerStartAndInterruptsGen(&CC_ML_SCHEDULER_BASETIME_HANDLER);
 80025c0:	4b03      	ldr	r3, [pc, #12]	@ (80025d0 <CC_ML_StartScheduler+0x1c>)
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7ff ff8d 	bl	80024e2 <CC_TMR_TimerStartAndInterruptsGen>
}
 80025c8:	46c0      	nop			@ (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	2000052c 	.word	0x2000052c

080025d4 <CC_ML_SendUARTChar>:

//CC_SERIAL
void CC_ML_SendUARTChar(const uint8_t* const Char2bSend, UART_HandleTypeDef* const huart)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
	uint8_t error=0;
 80025de:	210f      	movs	r1, #15
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]

	error=CC_SERIAL_SendData(huart, Char2bSend, 1);
 80025e6:	187c      	adds	r4, r7, r1
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7ff ff1c 	bl	800242c <CC_SERIAL_SendData>
 80025f4:	0003      	movs	r3, r0
 80025f6:	7023      	strb	r3, [r4, #0]
	if(error==1)
	{
		//TRACTAMENT D'ERORS AQUÍ
	}
}
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b005      	add	sp, #20
 80025fe:	bd90      	pop	{r4, r7, pc}

08002600 <CC_ML_SendUARTString>:

void CC_ML_SendUARTString(const char* const String2bSend, UART_HandleTypeDef* const huart)
//Function to send strings via USART. It sends the null terminator.
{
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	46c6      	mov	lr, r8
 8002604:	b500      	push	{lr}
 8002606:	b08c      	sub	sp, #48	@ 0x30
 8002608:	af00      	add	r7, sp, #0
 800260a:	61f8      	str	r0, [r7, #28]
 800260c:	61b9      	str	r1, [r7, #24]
 800260e:	466b      	mov	r3, sp
 8002610:	4698      	mov	r8, r3
    uint32_t length=0;
 8002612:	2300      	movs	r3, #0
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    length = strlen(String2bSend);  	//Gets length of the string
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	0018      	movs	r0, r3
 800261a:	f7fd fd73 	bl	8000104 <strlen>
 800261e:	0003      	movs	r3, r0
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    length++;  							//Increasing one for the null terminator
 8002622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002624:	3301      	adds	r3, #1
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t tx_buffer[length];  		//Creating an array (VLA) as long as the string to be sent, avoiding like this the intrinsic problem on strncpy() function (no length control)
 8002628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262a:	001a      	movs	r2, r3
 800262c:	3a01      	subs	r2, #1
 800262e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	2200      	movs	r2, #0
 8002634:	60fa      	str	r2, [r7, #12]
 8002636:	68b8      	ldr	r0, [r7, #8]
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	0002      	movs	r2, r0
 800263c:	0f52      	lsrs	r2, r2, #29
 800263e:	000e      	movs	r6, r1
 8002640:	00f6      	lsls	r6, r6, #3
 8002642:	617e      	str	r6, [r7, #20]
 8002644:	697e      	ldr	r6, [r7, #20]
 8002646:	4316      	orrs	r6, r2
 8002648:	617e      	str	r6, [r7, #20]
 800264a:	0002      	movs	r2, r0
 800264c:	00d2      	lsls	r2, r2, #3
 800264e:	613a      	str	r2, [r7, #16]
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	6838      	ldr	r0, [r7, #0]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	0002      	movs	r2, r0
 800265c:	0f52      	lsrs	r2, r2, #29
 800265e:	000e      	movs	r6, r1
 8002660:	00f5      	lsls	r5, r6, #3
 8002662:	4315      	orrs	r5, r2
 8002664:	0002      	movs	r2, r0
 8002666:	00d4      	lsls	r4, r2, #3
 8002668:	3307      	adds	r3, #7
 800266a:	08db      	lsrs	r3, r3, #3
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	466a      	mov	r2, sp
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	469d      	mov	sp, r3
 8002674:	466b      	mov	r3, sp
 8002676:	3300      	adds	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t error=0;
 800267a:	240b      	movs	r4, #11
 800267c:	2518      	movs	r5, #24
 800267e:	1963      	adds	r3, r4, r5
 8002680:	19db      	adds	r3, r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]

    strncpy((char*)tx_buffer, String2bSend, length);  		//Copy string to buffer
 8002686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002688:	69f9      	ldr	r1, [r7, #28]
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	0018      	movs	r0, r3
 800268e:	f006 fa53 	bl	8008b38 <strncpy>
    error=CC_SERIAL_SendData(huart, tx_buffer, length);
 8002692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002694:	b29a      	uxth	r2, r3
 8002696:	1963      	adds	r3, r4, r5
 8002698:	19dc      	adds	r4, r3, r7
 800269a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff fec4 	bl	800242c <CC_SERIAL_SendData>
 80026a4:	0003      	movs	r3, r0
 80026a6:	7023      	strb	r3, [r4, #0]
 80026a8:	46c5      	mov	sp, r8
    if(error!=0)
    	{
    		//TRACTAMENT D'ERRORS AQUÍ
    	}
}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b00c      	add	sp, #48	@ 0x30
 80026b0:	bc80      	pop	{r7}
 80026b2:	46b8      	mov	r8, r7
 80026b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080026b8 <CC_ML_ClearUARTRxData>:
void CC_ML_ClearUARTRxData(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	CC_SERIAL_RxData[0]='\0';
 80026bc:	4b02      	ldr	r3, [pc, #8]	@ (80026c8 <CC_ML_ClearUARTRxData+0x10>)
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
}
 80026c2:	46c0      	nop			@ (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200003f0 	.word	0x200003f0

080026cc <CC_ML_EnableRxIntUart>:

void CC_ML_EnableRxIntUart(void)
{
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
	uint8_t error=0;
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]

	error=CC_SERIAL_EnableRxIntUART(
 80026d8:	1dfc      	adds	r4, r7, #7
 80026da:	4906      	ldr	r1, [pc, #24]	@ (80026f4 <CC_ML_EnableRxIntUart+0x28>)
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <CC_ML_EnableRxIntUart+0x2c>)
 80026de:	2201      	movs	r2, #1
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff feb6 	bl	8002452 <CC_SERIAL_EnableRxIntUART>
 80026e6:	0003      	movs	r3, r0
 80026e8:	7023      	strb	r3, [r4, #0]
									);
    if(error!=0)
    	{
    		//TRACTAMENT D'ERRORS AQUÍ
    	}
}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b003      	add	sp, #12
 80026f0:	bd90      	pop	{r4, r7, pc}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	200003f0 	.word	0x200003f0
 80026f8:	20000578 	.word	0x20000578

080026fc <CC_ML_InitCan>:

//CC_CAN
void CC_ML_InitCan(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
	CC_CAN_Init(pCC_ML_CAN_TxHeader);
 8002700:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <CC_ML_InitCan+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff f9fb 	bl	8001b00 <CC_CAN_Init>
}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000008 	.word	0x20000008

08002714 <CC_ML_StartCan>:

void CC_ML_StartCan(void)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
	uint8_t error=0;
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]

	error=CC_CAN_StartCAN(&CC_ML_PERIPHERALS_CAN);													//Starting CAN module
 8002720:	1dfc      	adds	r4, r7, #7
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <CC_ML_StartCan+0x24>)
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff f9cd 	bl	8001ac4 <CC_CAN_StartCAN>
 800272a:	0003      	movs	r3, r0
 800272c:	7023      	strb	r3, [r4, #0]
	if(error!=0)
	{
		//TRACTAMENT D'ERRORS AQUÍ
	}
}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b003      	add	sp, #12
 8002734:	bd90      	pop	{r4, r7, pc}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	200003f4 	.word	0x200003f4

0800273c <CC_ML_EnableCanRxInt>:

void CC_ML_EnableCanRxInt(void)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
	uint8_t error=0;
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]

	error=CC_CAN_EnableCANInt	(
 8002748:	1dfc      	adds	r4, r7, #7
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <CC_ML_EnableCanRxInt+0x28>)
 800274c:	2200      	movs	r2, #0
 800274e:	2101      	movs	r1, #1
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff f9a6 	bl	8001aa2 <CC_CAN_EnableCANInt>
 8002756:	0003      	movs	r3, r0
 8002758:	7023      	strb	r3, [r4, #0]
								);
	if(error!=0)
	{
		//TRACTAMENT D'ERRORS AQUÍ
	}
}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	b003      	add	sp, #12
 8002760:	bd90      	pop	{r4, r7, pc}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	200003f4 	.word	0x200003f4

08002768 <CC_ML_SendMessageCan>:

void CC_ML_SendMessageCan(void* param1, void* param2, void* param3)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b089      	sub	sp, #36	@ 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
	FDCAN_HandleTypeDef* pHandlerCan;
	FDCAN_TxHeaderTypeDef* pHeaderTxCan;
	uint8_t* pdata2send;
	uint8_t error=0;
 8002774:	211f      	movs	r1, #31
 8002776:	187b      	adds	r3, r7, r1
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]

	pHandlerCan=(FDCAN_HandleTypeDef*)param1;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	61bb      	str	r3, [r7, #24]
	pHeaderTxCan=(FDCAN_TxHeaderTypeDef*)param2;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	617b      	str	r3, [r7, #20]
	pdata2send= (uint8_t*)param3;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	613b      	str	r3, [r7, #16]
	error=CC_CAN_SendMessage(pHandlerCan, pHeaderTxCan, pdata2send);
 8002788:	187c      	adds	r4, r7, r1
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	6979      	ldr	r1, [r7, #20]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff f9a4 	bl	8001ade <CC_CAN_SendMessage>
 8002796:	0003      	movs	r3, r0
 8002798:	7023      	strb	r3, [r4, #0]
	if(error!=0)
	{
		//TRACTAMENT D'ERRORS AQUÍ
	}
}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	b009      	add	sp, #36	@ 0x24
 80027a0:	bd90      	pop	{r4, r7, pc}

080027a2 <CC_ML_GetDipSwitch4pos>:
	CC_CAN_SetRxAddress(*pAdress);
};

//CC_DIPSW
void CC_ML_GetDipSwitch4pos(void* pdata, void* param2, void* param3)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
	CC_DIPSW_DipSw_t* pDipSwitch;
	pDipSwitch=(CC_DIPSW_DipSw_t*)pdata;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	617b      	str	r3, [r7, #20]

	CC_DIPSW_GetDipSwitch4pos(pDipSwitch);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff f9f1 	bl	8001b9c <CC_DIPSW_GetDipSwitch4pos>
}
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	b006      	add	sp, #24
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <CC_ML_UpdateSysIdFromDipSwitch>:

void CC_ML_UpdateSysIdFromDipSwitch(void* BoardData, void* DipSwData, void*)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
	CC_APP_Config_t* pBoardData=(CC_APP_Config_t*)BoardData;		//Input parameters castings
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	617b      	str	r3, [r7, #20]
	CC_DIPSW_DipSw_t* pDipSwitch=(CC_DIPSW_DipSw_t*)DipSwData;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	613b      	str	r3, [r7, #16]

	pBoardData->id = pDipSwitch->all;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	7819      	ldrb	r1, [r3, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	225b      	movs	r2, #91	@ 0x5b
 80027de:	5499      	strb	r1, [r3, r2]
}
 80027e0:	46c0      	nop			@ (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b006      	add	sp, #24
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <CC_ML_GetTimerElapsedCounts>:

//CC_TMR
uint32_t CC_ML_GetTimerElapsedCounts(const TIM_HandleTypeDef* const ptimer_header)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	return CC_TMR_GetElapsedCounts(ptimer_header);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fe52 	bl	800249c <CC_TMR_GetElapsedCounts>
 80027f8:	0003      	movs	r3, r0
}
 80027fa:	0018      	movs	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b002      	add	sp, #8
 8002800:	bd80      	pop	{r7, pc}

08002802 <CC_ML_GetTimerLimitCounts>:

uint32_t CC_ML_GetTimerLimitCounts(const TIM_HandleTypeDef* const ptimer_header)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
	return 	CC_TMR_GetLimitCounts(ptimer_header);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f7ff fe50 	bl	80024b2 <CC_TMR_GetLimitCounts>
 8002812:	0003      	movs	r3, r0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}

0800281c <CC_ML_StartTimer>:

void CC_ML_StartTimer(TIM_HandleTypeDef* phtim)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	uint8_t error=0;
 8002824:	210f      	movs	r1, #15
 8002826:	187b      	adds	r3, r7, r1
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]

	error=CC_TMR_StartTimer(phtim);
 800282c:	187c      	adds	r4, r7, r1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f7ff fe63 	bl	80024fc <CC_TMR_StartTimer>
 8002836:	0003      	movs	r3, r0
 8002838:	7023      	strb	r3, [r4, #0]
    if(error!=0)
    	{
    		//TRACTAMENT D'ERRORS AQUÍ
    	}
}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b005      	add	sp, #20
 8002840:	bd90      	pop	{r4, r7, pc}

08002842 <CC_ML_StopTimer>:

void CC_ML_StopTimer(TIM_HandleTypeDef* const phtim)
{
 8002842:	b590      	push	{r4, r7, lr}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	uint8_t error=0;
 800284a:	210f      	movs	r1, #15
 800284c:	187b      	adds	r3, r7, r1
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]

	error=CC_TMR_StopTimer(phtim);
 8002852:	187c      	adds	r4, r7, r1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	0018      	movs	r0, r3
 8002858:	f7ff fe5d 	bl	8002516 <CC_TMR_StopTimer>
 800285c:	0003      	movs	r3, r0
 800285e:	7023      	strb	r3, [r4, #0]
    if(error!=0)
    	{
    		//TRACTAMENT D'ERRORS AQUÍ
    	}
}
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b005      	add	sp, #20
 8002866:	bd90      	pop	{r4, r7, pc}

08002868 <CC_ML_SetTimer>:
void CC_ML_SetTimer(TIM_HandleTypeDef* const phtim, uint32_t counts)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	CC_TMR_SetTimer(phtim, counts);
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0011      	movs	r1, r2
 8002878:	0018      	movs	r0, r3
 800287a:	f7ff fe59 	bl	8002530 <CC_TMR_SetTimer>
}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b002      	add	sp, #8
 8002884:	bd80      	pop	{r7, pc}

08002886 <CC_ML_CheckTimIntFlag>:

uint8_t CC_ML_CheckTimIntFlag(const TIM_HandleTypeDef* const phtim)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
	return CC_TMR_CheckTimIntFlag(phtim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0018      	movs	r0, r3
 8002892:	f7ff fdf1 	bl	8002478 <CC_TMR_CheckTimIntFlag>
 8002896:	0003      	movs	r3, r0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <CC_ML_LedBoardToggle>:

//CC_BOARDLED
void CC_ML_LedBoardToggle(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	CC_BOARDLED_Led1Toggle();
 80028a4:	f7ff f8f2 	bl	8001a8c <CC_BOARDLED_Led1Toggle>
}
 80028a8:	46c0      	nop			@ (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <CC_ML_SetDefaultRTC>:

//CC_RTC
void CC_ML_SetDefaultRTC(RTC_HandleTypeDef* const phrtc)
{
 80028ae:	b590      	push	{r4, r7, lr}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
	uint8_t error=0;
 80028b6:	210f      	movs	r1, #15
 80028b8:	187b      	adds	r3, r7, r1
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]

	error=CC_RTC_SetDefaultTimeAndDate(phrtc);
 80028be:	187c      	adds	r4, r7, r1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7ff fd43 	bl	800234e <CC_RTC_SetDefaultTimeAndDate>
 80028c8:	0003      	movs	r3, r0
 80028ca:	7023      	strb	r3, [r4, #0]
    if(error!=0)
    	{
    		//TRACTAMENT D'ERRORS AQUÍ
    	}
}
 80028cc:	46c0      	nop			@ (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b005      	add	sp, #20
 80028d2:	bd90      	pop	{r4, r7, pc}

080028d4 <CC_ML_InitRTC>:
	    		//TRACTAMENT D'ERRORS AQUÍ
	    	}
}

void CC_ML_InitRTC(RTC_HandleTypeDef* const phrtc)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	uint8_t error=0;
 80028dc:	210f      	movs	r1, #15
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]

	error=CC_RTC_Init(phrtc);
 80028e4:	187c      	adds	r4, r7, r1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff fd5b 	bl	80023a4 <CC_RTC_Init>
 80028ee:	0003      	movs	r3, r0
 80028f0:	7023      	strb	r3, [r4, #0]
	if(error!=0)
	    	{
	    		//TRACTAMENT D'ERRORS AQUÍ
	    	}
}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b005      	add	sp, #20
 80028f8:	bd90      	pop	{r4, r7, pc}
	...

080028fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002900:	f000 fd88 	bl	8003414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002904:	f000 f840 	bl	8002988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002908:	f000 fa26 	bl	8002d58 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800290c:	f000 f8a0 	bl	8002a50 <MX_FDCAN2_Init>
  MX_TIM14_Init();
 8002910:	f000 f9ae 	bl	8002c70 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8002914:	f000 f9d2 	bl	8002cbc <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002918:	f000 f932 	bl	8002b80 <MX_TIM6_Init>
  MX_TIM7_Init();
 800291c:	f000 f96c 	bl	8002bf8 <MX_TIM7_Init>
  MX_IWDG_Init();
 8002920:	f000 f8de 	bl	8002ae0 <MX_IWDG_Init>
  MX_RTC_Init();
 8002924:	f000 f8fe 	bl	8002b24 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  CC_APP_SetBoardParam(&CC_APP_BoardData);						//Board's characteristics and parameters setting
 8002928:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <main+0x78>)
 800292a:	0018      	movs	r0, r3
 800292c:	f7fe f94e 	bl	8000bcc <CC_APP_SetBoardParam>
  CC_ML_InitRTC(&hrtc);											//Init peripheral
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <main+0x7c>)
 8002932:	0018      	movs	r0, r3
 8002934:	f7ff ffce 	bl	80028d4 <CC_ML_InitRTC>
  CC_ML_SetDefaultRTC(&hrtc);									//Set a default date and time to the RTC
 8002938:	4b0f      	ldr	r3, [pc, #60]	@ (8002978 <main+0x7c>)
 800293a:	0018      	movs	r0, r3
 800293c:	f7ff ffb7 	bl	80028ae <CC_ML_SetDefaultRTC>

  //SoftPWM for strip leds initialization
  CC_LEDPWM_Init(&CC_LEDPWM_Strip);	  							//Strip-leds handler initialization
 8002940:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <main+0x80>)
 8002942:	0018      	movs	r0, r3
 8002944:	f7fe f994 	bl	8000c70 <CC_LEDPWM_Init>
  CC_ML_StartSoftPwmBasetimeAndInterrupts();					//Soft-PWM timer generation initialization
 8002948:	f7ff fe24 	bl	8002594 <CC_ML_StartSoftPwmBasetimeAndInterrupts>
  //Schedulers initialization
  CC_SCHDLR_InitScheduler(&CC_SCHDLR_MainScheduler);			//Fast tasks loading
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <main+0x84>)
 800294e:	0018      	movs	r0, r3
 8002950:	f7fe fb84 	bl	800105c <CC_SCHDLR_InitScheduler>
  CC_SCHDLR_InitNestedScheduler(&CC_SCHDLR_NestedScheduler);	//Tasks loading onto nested scheduler
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <main+0x88>)
 8002956:	0018      	movs	r0, r3
 8002958:	f7fe fc3a 	bl	80011d0 <CC_SCHDLR_InitNestedScheduler>
  CC_ML_StartScheduler();										//Schedulers on
 800295c:	f7ff fe2a 	bl	80025b4 <CC_ML_StartScheduler>
  //Serial receive initialization
  CC_ML_EnableRxIntUart();										//UART Rx interruptions enabled
 8002960:	f7ff feb4 	bl	80026cc <CC_ML_EnableRxIntUart>
  //CAN initialization
  CC_ML_InitCan();												//CAN initialization
 8002964:	f7ff feca 	bl	80026fc <CC_ML_InitCan>
  CC_ML_StartCan();												//CAN ready to send
 8002968:	f7ff fed4 	bl	8002714 <CC_ML_StartCan>
  CC_ML_EnableCanRxInt();										//CAN Rx interruptions enabled
 800296c:	f7ff fee6 	bl	800273c <CC_ML_EnableCanRxInt>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002970:	46c0      	nop			@ (mov r8, r8)
 8002972:	e7fd      	b.n	8002970 <main+0x74>
 8002974:	20000084 	.word	0x20000084
 8002978:	20000468 	.word	0x20000468
 800297c:	200000e4 	.word	0x200000e4
 8002980:	20000190 	.word	0x20000190
 8002984:	20000250 	.word	0x20000250

08002988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b095      	sub	sp, #84	@ 0x54
 800298c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800298e:	2414      	movs	r4, #20
 8002990:	193b      	adds	r3, r7, r4
 8002992:	0018      	movs	r0, r3
 8002994:	233c      	movs	r3, #60	@ 0x3c
 8002996:	001a      	movs	r2, r3
 8002998:	2100      	movs	r1, #0
 800299a:	f006 f8c5 	bl	8008b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	0018      	movs	r0, r3
 80029a2:	2310      	movs	r3, #16
 80029a4:	001a      	movs	r2, r3
 80029a6:	2100      	movs	r1, #0
 80029a8:	f006 f8be 	bl	8008b28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 ffbd 	bl	8004930 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	2209      	movs	r2, #9
 80029ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	2280      	movs	r2, #128	@ 0x80
 80029c0:	0252      	lsls	r2, r2, #9
 80029c2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029c4:	0021      	movs	r1, r4
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	2201      	movs	r2, #1
 80029ca:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	2202      	movs	r2, #2
 80029d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029d2:	187b      	adds	r3, r7, r1
 80029d4:	2203      	movs	r2, #3
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 25;
 80029de:	187b      	adds	r3, r7, r1
 80029e0:	2219      	movs	r2, #25
 80029e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80029e4:	187b      	adds	r3, r7, r1
 80029e6:	2280      	movs	r2, #128	@ 0x80
 80029e8:	0312      	lsls	r2, r2, #12
 80029ea:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2280      	movs	r2, #128	@ 0x80
 80029f0:	0492      	lsls	r2, r2, #18
 80029f2:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	22c0      	movs	r2, #192	@ 0xc0
 80029f8:	05d2      	lsls	r2, r2, #23
 80029fa:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	0018      	movs	r0, r3
 8002a00:	f001 ffe2 	bl	80049c8 <HAL_RCC_OscConfig>
 8002a04:	1e03      	subs	r3, r0, #0
 8002a06:	d001      	beq.n	8002a0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002a08:	f000 fa98 	bl	8002f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2207      	movs	r2, #7
 8002a10:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2202      	movs	r2, #2
 8002a16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2200      	movs	r2, #0
 8002a22:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2102      	movs	r1, #2
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f002 fb2d 	bl	8005088 <HAL_RCC_ClockConfig>
 8002a2e:	1e03      	subs	r3, r0, #0
 8002a30:	d001      	beq.n	8002a36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002a32:	f000 fa83 	bl	8002f3c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PF2, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	045b      	lsls	r3, r3, #17
 8002a3a:	4804      	ldr	r0, [pc, #16]	@ (8002a4c <SystemClock_Config+0xc4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	0019      	movs	r1, r3
 8002a40:	f002 fc2a 	bl	8005298 <HAL_RCC_MCOConfig>
}
 8002a44:	46c0      	nop			@ (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b015      	add	sp, #84	@ 0x54
 8002a4a:	bd90      	pop	{r4, r7, pc}
 8002a4c:	00050004 	.word	0x00050004

08002a50 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002a54:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a56:	4a21      	ldr	r2, [pc, #132]	@ (8002adc <MX_FDCAN2_Init+0x8c>)
 8002a58:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002a66:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 8002a72:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002a78:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8002a7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 8002a84:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a86:	2210      	movs	r2, #16
 8002a88:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a8c:	2256      	movs	r2, #86	@ 0x56
 8002a8e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 8002a90:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a92:	220d      	movs	r2, #13
 8002a94:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 5;
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002aa4:	2205      	movs	r2, #5
 8002aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002aaa:	2204      	movs	r2, #4
 8002aac:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002ab4:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002aba:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <MX_FDCAN2_Init+0x88>)
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 fee8 	bl	8003898 <HAL_FDCAN_Init>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8002acc:	f000 fa36 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002ad0:	46c0      	nop			@ (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	200003f4 	.word	0x200003f4
 8002adc:	40006800 	.word	0x40006800

08002ae0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <MX_IWDG_Init+0x34>)
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <MX_IWDG_Init+0x38>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <MX_IWDG_Init+0x34>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002af0:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <MX_IWDG_Init+0x34>)
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <MX_IWDG_Init+0x3c>)
 8002af4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1599;
 8002af6:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <MX_IWDG_Init+0x34>)
 8002af8:	4a09      	ldr	r2, [pc, #36]	@ (8002b20 <MX_IWDG_Init+0x40>)
 8002afa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002afc:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <MX_IWDG_Init+0x34>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f001 feb4 	bl	800486c <HAL_IWDG_Init>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d001      	beq.n	8002b0c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8002b08:	f000 fa18 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	20000458 	.word	0x20000458
 8002b18:	40003000 	.word	0x40003000
 8002b1c:	00000fff 	.word	0x00000fff
 8002b20:	0000063f 	.word	0x0000063f

08002b24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b28:	4b13      	ldr	r3, [pc, #76]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b2a:	4a14      	ldr	r2, [pc, #80]	@ (8002b7c <MX_RTC_Init+0x58>)
 8002b2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b2e:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002b34:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b36:	227f      	movs	r2, #127	@ 0x7f
 8002b38:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b3c:	22ff      	movs	r2, #255	@ 0xff
 8002b3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b40:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b46:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b52:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b54:	2280      	movs	r2, #128	@ 0x80
 8002b56:	05d2      	lsls	r2, r2, #23
 8002b58:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <MX_RTC_Init+0x54>)
 8002b62:	0018      	movs	r0, r3
 8002b64:	f002 feda 	bl	800591c <HAL_RTC_Init>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8002b6c:	f000 f9e6 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b70:	46c0      	nop			@ (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	20000468 	.word	0x20000468
 8002b7c:	40002800 	.word	0x40002800

08002b80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	0018      	movs	r0, r3
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	2100      	movs	r1, #0
 8002b90:	f005 ffca 	bl	8008b28 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b94:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <MX_TIM6_Init+0x6c>)
 8002b96:	4a16      	ldr	r2, [pc, #88]	@ (8002bf0 <MX_TIM6_Init+0x70>)
 8002b98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002b9a:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <MX_TIM6_Init+0x6c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <MX_TIM6_Init+0x6c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <MX_TIM6_Init+0x6c>)
 8002ba8:	4a12      	ldr	r2, [pc, #72]	@ (8002bf4 <MX_TIM6_Init+0x74>)
 8002baa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	@ (8002bec <MX_TIM6_Init+0x6c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bec <MX_TIM6_Init+0x6c>)
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f003 f961 	bl	8005e7c <HAL_TIM_Base_Init>
 8002bba:	1e03      	subs	r3, r0, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002bbe:	f000 f9bd 	bl	8002f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bce:	1d3a      	adds	r2, r7, #4
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <MX_TIM6_Init+0x6c>)
 8002bd2:	0011      	movs	r1, r2
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f003 fc53 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8002bda:	1e03      	subs	r3, r0, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002bde:	f000 f9ad 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	20000494 	.word	0x20000494
 8002bf0:	40001000 	.word	0x40001000
 8002bf4:	0000ffff 	.word	0x0000ffff

08002bf8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	0018      	movs	r0, r3
 8002c02:	230c      	movs	r3, #12
 8002c04:	001a      	movs	r2, r3
 8002c06:	2100      	movs	r1, #0
 8002c08:	f005 ff8e 	bl	8008b28 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <MX_TIM7_Init+0x6c>)
 8002c0e:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <MX_TIM7_Init+0x70>)
 8002c10:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002c12:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <MX_TIM7_Init+0x6c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c18:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <MX_TIM7_Init+0x6c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <MX_TIM7_Init+0x6c>)
 8002c20:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <MX_TIM7_Init+0x74>)
 8002c22:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <MX_TIM7_Init+0x6c>)
 8002c26:	2280      	movs	r2, #128	@ 0x80
 8002c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <MX_TIM7_Init+0x6c>)
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f003 f925 	bl	8005e7c <HAL_TIM_Base_Init>
 8002c32:	1e03      	subs	r3, r0, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002c36:	f000 f981 	bl	8002f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c46:	1d3a      	adds	r2, r7, #4
 8002c48:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <MX_TIM7_Init+0x6c>)
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f003 fc17 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8002c52:	1e03      	subs	r3, r0, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8002c56:	f000 f971 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	200004e0 	.word	0x200004e0
 8002c68:	40001400 	.word	0x40001400
 8002c6c:	00001387 	.word	0x00001387

08002c70 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002c74:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <MX_TIM14_Init+0x40>)
 8002c76:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb4 <MX_TIM14_Init+0x44>)
 8002c78:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <MX_TIM14_Init+0x40>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <MX_TIM14_Init+0x40>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000-1;
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <MX_TIM14_Init+0x40>)
 8002c88:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb8 <MX_TIM14_Init+0x48>)
 8002c8a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <MX_TIM14_Init+0x40>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <MX_TIM14_Init+0x40>)
 8002c94:	2280      	movs	r2, #128	@ 0x80
 8002c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <MX_TIM14_Init+0x40>)
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f003 f8ee 	bl	8005e7c <HAL_TIM_Base_Init>
 8002ca0:	1e03      	subs	r3, r0, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002ca4:	f000 f94a 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	2000052c 	.word	0x2000052c
 8002cb4:	40002000 	.word	0x40002000
 8002cb8:	0000c34f 	.word	0x0000c34f

08002cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cc0:	4b23      	ldr	r3, [pc, #140]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cc2:	4a24      	ldr	r2, [pc, #144]	@ (8002d54 <MX_USART1_UART_Init+0x98>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cc6:	4b22      	ldr	r3, [pc, #136]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cc8:	22e1      	movs	r2, #225	@ 0xe1
 8002cca:	0252      	lsls	r2, r2, #9
 8002ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b20      	ldr	r3, [pc, #128]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	4b18      	ldr	r3, [pc, #96]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf2:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cf8:	4b15      	ldr	r3, [pc, #84]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d06:	0018      	movs	r0, r3
 8002d08:	f003 fc48 	bl	800659c <HAL_UART_Init>
 8002d0c:	1e03      	subs	r3, r0, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d10:	f000 f914 	bl	8002f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d14:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d16:	2100      	movs	r1, #0
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f005 fd51 	bl	80087c0 <HAL_UARTEx_SetTxFifoThreshold>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d22:	f000 f90b 	bl	8002f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d26:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d28:	2100      	movs	r1, #0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f005 fd88 	bl	8008840 <HAL_UARTEx_SetRxFifoThreshold>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d34:	f000 f902 	bl	8002f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f005 fd06 	bl	800874c <HAL_UARTEx_DisableFifoMode>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d001      	beq.n	8002d48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d44:	f000 f8fa 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d48:	46c0      	nop			@ (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	20000578 	.word	0x20000578
 8002d54:	40013800 	.word	0x40013800

08002d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b08b      	sub	sp, #44	@ 0x2c
 8002d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5e:	2414      	movs	r4, #20
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	0018      	movs	r0, r3
 8002d64:	2314      	movs	r3, #20
 8002d66:	001a      	movs	r2, r3
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f005 fedd 	bl	8008b28 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d72:	4b6b      	ldr	r3, [pc, #428]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002d74:	2104      	movs	r1, #4
 8002d76:	430a      	orrs	r2, r1
 8002d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d7a:	4b69      	ldr	r3, [pc, #420]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7e:	2204      	movs	r2, #4
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d86:	4b66      	ldr	r3, [pc, #408]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d8a:	4b65      	ldr	r3, [pc, #404]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002d8c:	2120      	movs	r1, #32
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d92:	4b63      	ldr	r3, [pc, #396]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d96:	2220      	movs	r2, #32
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	4b60      	ldr	r3, [pc, #384]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002da2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	430a      	orrs	r2, r1
 8002da8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002daa:	4b5d      	ldr	r3, [pc, #372]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dae:	2201      	movs	r2, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dba:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dc2:	4b57      	ldr	r3, [pc, #348]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dce:	4b54      	ldr	r3, [pc, #336]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dd2:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002dd4:	2108      	movs	r1, #8
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dda:	4b51      	ldr	r3, [pc, #324]	@ (8002f20 <MX_GPIO_Init+0x1c8>)
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dde:	2208      	movs	r2, #8
 8002de0:	4013      	ands	r3, r2
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|B10_Pin|G10_Pin|R10_Pin
 8002de6:	494f      	ldr	r1, [pc, #316]	@ (8002f24 <MX_GPIO_Init+0x1cc>)
 8002de8:	23a0      	movs	r3, #160	@ 0xa0
 8002dea:	05db      	lsls	r3, r3, #23
 8002dec:	2200      	movs	r2, #0
 8002dee:	0018      	movs	r0, r3
 8002df0:	f001 fd03 	bl	80047fa <HAL_GPIO_WritePin>
                          |B9_Pin|G9_Pin|R9_Pin|G6_Pin
                          |G5_Pin|R5_Pin|B4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B8_Pin|G8_Pin|R8_Pin|B7_Pin
 8002df4:	494c      	ldr	r1, [pc, #304]	@ (8002f28 <MX_GPIO_Init+0x1d0>)
 8002df6:	4b4d      	ldr	r3, [pc, #308]	@ (8002f2c <MX_GPIO_Init+0x1d4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f001 fcfd 	bl	80047fa <HAL_GPIO_WritePin>
                          |G7_Pin|R7_Pin|B6_Pin|R3_Pin
                          |B2_Pin|G2_Pin|R2_Pin|B1_Pin
                          |G1_Pin|R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R6_Pin|B5_Pin, GPIO_PIN_RESET);
 8002e00:	4b4b      	ldr	r3, [pc, #300]	@ (8002f30 <MX_GPIO_Init+0x1d8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	21c0      	movs	r1, #192	@ 0xc0
 8002e06:	0018      	movs	r0, r3
 8002e08:	f001 fcf7 	bl	80047fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, G4_Pin|R4_Pin|B3_Pin|G3_Pin, GPIO_PIN_RESET);
 8002e0c:	4b49      	ldr	r3, [pc, #292]	@ (8002f34 <MX_GPIO_Init+0x1dc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	210f      	movs	r1, #15
 8002e12:	0018      	movs	r0, r3
 8002e14:	f001 fcf1 	bl	80047fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP_SW1_Pin DIP_SW2_Pin DIP_SW3_Pin */
  GPIO_InitStruct.Pin = DIP_SW1_Pin|DIP_SW2_Pin|DIP_SW3_Pin;
 8002e18:	193b      	adds	r3, r7, r4
 8002e1a:	22e0      	movs	r2, #224	@ 0xe0
 8002e1c:	0212      	lsls	r2, r2, #8
 8002e1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	2200      	movs	r2, #0
 8002e24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	193b      	adds	r3, r7, r4
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	4a40      	ldr	r2, [pc, #256]	@ (8002f30 <MX_GPIO_Init+0x1d8>)
 8002e30:	0019      	movs	r1, r3
 8002e32:	0010      	movs	r0, r2
 8002e34:	f001 fb58 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	193b      	adds	r3, r7, r4
 8002e40:	2202      	movs	r2, #2
 8002e42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	4a37      	ldr	r2, [pc, #220]	@ (8002f38 <MX_GPIO_Init+0x1e0>)
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	0010      	movs	r0, r2
 8002e5e:	f001 fb43 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP_SW4_Pin */
  GPIO_InitStruct.Pin = DIP_SW4_Pin;
 8002e62:	193b      	adds	r3, r7, r4
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	193b      	adds	r3, r7, r4
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIP_SW4_GPIO_Port, &GPIO_InitStruct);
 8002e74:	193a      	adds	r2, r7, r4
 8002e76:	23a0      	movs	r3, #160	@ 0xa0
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f001 fb33 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin B10_Pin G10_Pin R10_Pin
                           B9_Pin G9_Pin R9_Pin G6_Pin
                           G5_Pin R5_Pin B4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|B10_Pin|G10_Pin|R10_Pin
 8002e82:	193b      	adds	r3, r7, r4
 8002e84:	4a27      	ldr	r2, [pc, #156]	@ (8002f24 <MX_GPIO_Init+0x1cc>)
 8002e86:	601a      	str	r2, [r3, #0]
                          |B9_Pin|G9_Pin|R9_Pin|G6_Pin
                          |G5_Pin|R5_Pin|B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e88:	193b      	adds	r3, r7, r4
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	193b      	adds	r3, r7, r4
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9a:	193a      	adds	r2, r7, r4
 8002e9c:	23a0      	movs	r3, #160	@ 0xa0
 8002e9e:	05db      	lsls	r3, r3, #23
 8002ea0:	0011      	movs	r1, r2
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f001 fb20 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B8_Pin G8_Pin R8_Pin B7_Pin
                           G7_Pin R7_Pin B6_Pin R3_Pin
                           B2_Pin G2_Pin R2_Pin B1_Pin
                           G1_Pin R1_Pin */
  GPIO_InitStruct.Pin = B8_Pin|G8_Pin|R8_Pin|B7_Pin
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8002f28 <MX_GPIO_Init+0x1d0>)
 8002eac:	601a      	str	r2, [r3, #0]
                          |G7_Pin|R7_Pin|B6_Pin|R3_Pin
                          |B2_Pin|G2_Pin|R2_Pin|B1_Pin
                          |G1_Pin|R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f2c <MX_GPIO_Init+0x1d4>)
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	0010      	movs	r0, r2
 8002ec8:	f001 fb0e 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R6_Pin B5_Pin */
  GPIO_InitStruct.Pin = R6_Pin|B5_Pin;
 8002ecc:	193b      	adds	r3, r7, r4
 8002ece:	22c0      	movs	r2, #192	@ 0xc0
 8002ed0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed2:	193b      	adds	r3, r7, r4
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	193b      	adds	r3, r7, r4
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	193b      	adds	r3, r7, r4
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	4a12      	ldr	r2, [pc, #72]	@ (8002f30 <MX_GPIO_Init+0x1d8>)
 8002ee8:	0019      	movs	r1, r3
 8002eea:	0010      	movs	r0, r2
 8002eec:	f001 fafc 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin R4_Pin B3_Pin G3_Pin */
  GPIO_InitStruct.Pin = G4_Pin|R4_Pin|B3_Pin|G3_Pin;
 8002ef0:	0021      	movs	r1, r4
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	2201      	movs	r2, #1
 8002efc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <MX_GPIO_Init+0x1dc>)
 8002f0e:	0019      	movs	r1, r3
 8002f10:	0010      	movs	r0, r2
 8002f12:	f001 fae9 	bl	80044e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b00b      	add	sp, #44	@ 0x2c
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	40021000 	.word	0x40021000
 8002f24:	000099fe 	.word	0x000099fe
 8002f28:	0000fffc 	.word	0x0000fffc
 8002f2c:	50000400 	.word	0x50000400
 8002f30:	50000800 	.word	0x50000800
 8002f34:	50000c00 	.word	0x50000c00
 8002f38:	50001400 	.word	0x50001400

08002f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f40:	b672      	cpsid	i
}
 8002f42:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	e7fd      	b.n	8002f44 <Error_Handler+0x8>

08002f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <HAL_MspInit+0x4c>)
 8002f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <HAL_MspInit+0x4c>)
 8002f54:	2101      	movs	r1, #1
 8002f56:	430a      	orrs	r2, r1
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <HAL_MspInit+0x4c>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4013      	ands	r3, r2
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_MspInit+0x4c>)
 8002f68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <HAL_MspInit+0x4c>)
 8002f6c:	2180      	movs	r1, #128	@ 0x80
 8002f6e:	0549      	lsls	r1, r1, #21
 8002f70:	430a      	orrs	r2, r1
 8002f72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f74:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <HAL_MspInit+0x4c>)
 8002f76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f78:	2380      	movs	r3, #128	@ 0x80
 8002f7a:	055b      	lsls	r3, r3, #21
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002f82:	23c0      	movs	r3, #192	@ 0xc0
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 faca 	bl	8003520 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8c:	46c0      	nop			@ (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b09d      	sub	sp, #116	@ 0x74
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	235c      	movs	r3, #92	@ 0x5c
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	2314      	movs	r3, #20
 8002fa8:	001a      	movs	r2, r3
 8002faa:	2100      	movs	r1, #0
 8002fac:	f005 fdbc 	bl	8008b28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fb0:	2410      	movs	r4, #16
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	234c      	movs	r3, #76	@ 0x4c
 8002fb8:	001a      	movs	r2, r3
 8002fba:	2100      	movs	r1, #0
 8002fbc:	f005 fdb4 	bl	8008b28 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003070 <HAL_FDCAN_MspInit+0xd8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d14e      	bne.n	8003068 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	2280      	movs	r2, #128	@ 0x80
 8002fce:	0492      	lsls	r2, r2, #18
 8002fd0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f002 fa62 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002fe4:	f7ff ffaa 	bl	8002f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002fe8:	4b22      	ldr	r3, [pc, #136]	@ (8003074 <HAL_FDCAN_MspInit+0xdc>)
 8002fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <HAL_FDCAN_MspInit+0xdc>)
 8002fee:	2180      	movs	r1, #128	@ 0x80
 8002ff0:	0149      	lsls	r1, r1, #5
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8003074 <HAL_FDCAN_MspInit+0xdc>)
 8002ff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	4013      	ands	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_FDCAN_MspInit+0xdc>)
 8003006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003008:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <HAL_FDCAN_MspInit+0xdc>)
 800300a:	2102      	movs	r1, #2
 800300c:	430a      	orrs	r2, r1
 800300e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003010:	4b18      	ldr	r3, [pc, #96]	@ (8003074 <HAL_FDCAN_MspInit+0xdc>)
 8003012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003014:	2202      	movs	r2, #2
 8003016:	4013      	ands	r3, r2
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800301c:	215c      	movs	r1, #92	@ 0x5c
 800301e:	187b      	adds	r3, r7, r1
 8003020:	2203      	movs	r2, #3
 8003022:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	187b      	adds	r3, r7, r1
 8003026:	2202      	movs	r2, #2
 8003028:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	187b      	adds	r3, r7, r1
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	187b      	adds	r3, r7, r1
 8003032:	2200      	movs	r2, #0
 8003034:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2203      	movs	r2, #3
 800303a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	187b      	adds	r3, r7, r1
 800303e:	4a0e      	ldr	r2, [pc, #56]	@ (8003078 <HAL_FDCAN_MspInit+0xe0>)
 8003040:	0019      	movs	r1, r3
 8003042:	0010      	movs	r0, r2
 8003044:	f001 fa50 	bl	80044e8 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 2, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	2102      	movs	r1, #2
 800304c:	2015      	movs	r0, #21
 800304e:	f000 fb29 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8003052:	2015      	movs	r0, #21
 8003054:	f000 fb3b 	bl	80036ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 2, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	2102      	movs	r1, #2
 800305c:	2016      	movs	r0, #22
 800305e:	f000 fb21 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8003062:	2016      	movs	r0, #22
 8003064:	f000 fb33 	bl	80036ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8003068:	46c0      	nop			@ (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b01d      	add	sp, #116	@ 0x74
 800306e:	bd90      	pop	{r4, r7, pc}
 8003070:	40006800 	.word	0x40006800
 8003074:	40021000 	.word	0x40021000
 8003078:	50000400 	.word	0x50000400

0800307c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b097      	sub	sp, #92	@ 0x5c
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003084:	240c      	movs	r4, #12
 8003086:	193b      	adds	r3, r7, r4
 8003088:	0018      	movs	r0, r3
 800308a:	234c      	movs	r3, #76	@ 0x4c
 800308c:	001a      	movs	r2, r3
 800308e:	2100      	movs	r1, #0
 8003090:	f005 fd4a 	bl	8008b28 <memset>
  if(hrtc->Instance==RTC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a15      	ldr	r2, [pc, #84]	@ (80030f0 <HAL_RTC_MspInit+0x74>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d124      	bne.n	80030e8 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	2280      	movs	r2, #128	@ 0x80
 80030a2:	0292      	lsls	r2, r2, #10
 80030a4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030a6:	193b      	adds	r3, r7, r4
 80030a8:	2280      	movs	r2, #128	@ 0x80
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	0018      	movs	r0, r3
 80030b2:	f002 f9f7 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 80030b6:	1e03      	subs	r3, r0, #0
 80030b8:	d001      	beq.n	80030be <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80030ba:	f7ff ff3f 	bl	8002f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <HAL_RTC_MspInit+0x78>)
 80030c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_RTC_MspInit+0x78>)
 80030c4:	2180      	movs	r1, #128	@ 0x80
 80030c6:	0209      	lsls	r1, r1, #8
 80030c8:	430a      	orrs	r2, r1
 80030ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80030cc:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_RTC_MspInit+0x78>)
 80030ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030d0:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <HAL_RTC_MspInit+0x78>)
 80030d2:	2180      	movs	r1, #128	@ 0x80
 80030d4:	00c9      	lsls	r1, r1, #3
 80030d6:	430a      	orrs	r2, r1
 80030d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_RTC_MspInit+0x78>)
 80030dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030de:	2380      	movs	r3, #128	@ 0x80
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4013      	ands	r3, r2
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b017      	add	sp, #92	@ 0x5c
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	40002800 	.word	0x40002800
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a24      	ldr	r2, [pc, #144]	@ (8003198 <HAL_TIM_Base_MspInit+0xa0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800310a:	4b24      	ldr	r3, [pc, #144]	@ (800319c <HAL_TIM_Base_MspInit+0xa4>)
 800310c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800310e:	4b23      	ldr	r3, [pc, #140]	@ (800319c <HAL_TIM_Base_MspInit+0xa4>)
 8003110:	2110      	movs	r1, #16
 8003112:	430a      	orrs	r2, r1
 8003114:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003116:	4b21      	ldr	r3, [pc, #132]	@ (800319c <HAL_TIM_Base_MspInit+0xa4>)
 8003118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311a:	2210      	movs	r2, #16
 800311c:	4013      	ands	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003122:	e034      	b.n	800318e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1d      	ldr	r2, [pc, #116]	@ (80031a0 <HAL_TIM_Base_MspInit+0xa8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d114      	bne.n	8003158 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800312e:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_TIM_Base_MspInit+0xa4>)
 8003130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003132:	4b1a      	ldr	r3, [pc, #104]	@ (800319c <HAL_TIM_Base_MspInit+0xa4>)
 8003134:	2120      	movs	r1, #32
 8003136:	430a      	orrs	r2, r1
 8003138:	63da      	str	r2, [r3, #60]	@ 0x3c
 800313a:	4b18      	ldr	r3, [pc, #96]	@ (800319c <HAL_TIM_Base_MspInit+0xa4>)
 800313c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313e:	2220      	movs	r2, #32
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	2012      	movs	r0, #18
 800314c:	f000 faaa 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8003150:	2012      	movs	r0, #18
 8003152:	f000 fabc 	bl	80036ce <HAL_NVIC_EnableIRQ>
}
 8003156:	e01a      	b.n	800318e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a11      	ldr	r2, [pc, #68]	@ (80031a4 <HAL_TIM_Base_MspInit+0xac>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d115      	bne.n	800318e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003162:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <HAL_TIM_Base_MspInit+0xa4>)
 8003164:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003166:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <HAL_TIM_Base_MspInit+0xa4>)
 8003168:	2180      	movs	r1, #128	@ 0x80
 800316a:	0209      	lsls	r1, r1, #8
 800316c:	430a      	orrs	r2, r1
 800316e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003170:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_TIM_Base_MspInit+0xa4>)
 8003172:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003174:	2380      	movs	r3, #128	@ 0x80
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2101      	movs	r1, #1
 8003182:	2013      	movs	r0, #19
 8003184:	f000 fa8e 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003188:	2013      	movs	r0, #19
 800318a:	f000 faa0 	bl	80036ce <HAL_NVIC_EnableIRQ>
}
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b006      	add	sp, #24
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	40001000 	.word	0x40001000
 800319c:	40021000 	.word	0x40021000
 80031a0:	40001400 	.word	0x40001400
 80031a4:	40002000 	.word	0x40002000

080031a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b09d      	sub	sp, #116	@ 0x74
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	235c      	movs	r3, #92	@ 0x5c
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	0018      	movs	r0, r3
 80031b6:	2314      	movs	r3, #20
 80031b8:	001a      	movs	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	f005 fcb4 	bl	8008b28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031c0:	2410      	movs	r4, #16
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	0018      	movs	r0, r3
 80031c6:	234c      	movs	r3, #76	@ 0x4c
 80031c8:	001a      	movs	r2, r3
 80031ca:	2100      	movs	r1, #0
 80031cc:	f005 fcac 	bl	8008b28 <memset>
  if(huart->Instance==USART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a27      	ldr	r2, [pc, #156]	@ (8003274 <HAL_UART_MspInit+0xcc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d147      	bne.n	800326a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031da:	193b      	adds	r3, r7, r4
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80031e0:	193b      	adds	r3, r7, r4
 80031e2:	2200      	movs	r2, #0
 80031e4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	0018      	movs	r0, r3
 80031ea:	f002 f95b 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 80031ee:	1e03      	subs	r3, r0, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80031f2:	f7ff fea3 	bl	8002f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031f6:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <HAL_UART_MspInit+0xd0>)
 80031f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003278 <HAL_UART_MspInit+0xd0>)
 80031fc:	2180      	movs	r1, #128	@ 0x80
 80031fe:	01c9      	lsls	r1, r1, #7
 8003200:	430a      	orrs	r2, r1
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40
 8003204:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <HAL_UART_MspInit+0xd0>)
 8003206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	01db      	lsls	r3, r3, #7
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	4b19      	ldr	r3, [pc, #100]	@ (8003278 <HAL_UART_MspInit+0xd0>)
 8003214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003216:	4b18      	ldr	r3, [pc, #96]	@ (8003278 <HAL_UART_MspInit+0xd0>)
 8003218:	2101      	movs	r1, #1
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	@ 0x34
 800321e:	4b16      	ldr	r3, [pc, #88]	@ (8003278 <HAL_UART_MspInit+0xd0>)
 8003220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003222:	2201      	movs	r2, #1
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800322a:	215c      	movs	r1, #92	@ 0x5c
 800322c:	187b      	adds	r3, r7, r1
 800322e:	22c0      	movs	r2, #192	@ 0xc0
 8003230:	00d2      	lsls	r2, r2, #3
 8003232:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	187b      	adds	r3, r7, r1
 8003236:	2202      	movs	r2, #2
 8003238:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	187b      	adds	r3, r7, r1
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003240:	187b      	adds	r3, r7, r1
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003246:	187b      	adds	r3, r7, r1
 8003248:	2201      	movs	r2, #1
 800324a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324c:	187a      	adds	r2, r7, r1
 800324e:	23a0      	movs	r3, #160	@ 0xa0
 8003250:	05db      	lsls	r3, r3, #23
 8003252:	0011      	movs	r1, r2
 8003254:	0018      	movs	r0, r3
 8003256:	f001 f947 	bl	80044e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800325a:	2200      	movs	r2, #0
 800325c:	2102      	movs	r1, #2
 800325e:	201b      	movs	r0, #27
 8003260:	f000 fa20 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003264:	201b      	movs	r0, #27
 8003266:	f000 fa32 	bl	80036ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b01d      	add	sp, #116	@ 0x74
 8003270:	bd90      	pop	{r4, r7, pc}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	40013800 	.word	0x40013800
 8003278:	40021000 	.word	0x40021000

0800327c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	e7fd      	b.n	8003280 <NMI_Handler+0x4>

08003284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003288:	46c0      	nop			@ (mov r8, r8)
 800328a:	e7fd      	b.n	8003288 <HardFault_Handler+0x4>

0800328c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a4:	f000 f920 	bl	80034e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
//Timer used to generate the strip leds soft-PWM. The scheduler running over timer14
//was unable to run all the tasks fast enough.
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80032b6:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <TIM7_LPTIM2_IRQHandler+0x38>)
 80032b8:	0018      	movs	r0, r3
 80032ba:	f002 ff19 	bl	80060f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */
	CC_LEDPWM_SoftPwm_t* const pCC_LEDPWM_SoftPwm=&CC_LEDPWM_Strip;									//Pointer to strip leds control data
 80032be:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <TIM7_LPTIM2_IRQHandler+0x3c>)
 80032c0:	607b      	str	r3, [r7, #4]
//	pCC_LEDPWM_SoftPwm=&CC_LEDPWM_Strip;

	const CC_LED_StripLedFuncts_t* const pCC_LEDPWM_StripsFunctions=&CC_ML_LedsStripsFunctions;
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <TIM7_LPTIM2_IRQHandler+0x40>)
 80032c4:	603b      	str	r3, [r7, #0]
//	pCC_LEDPWM_StripsFunctions=&CC_ML_LedsStripsFunctions;

//	CC_LEDPWM_UpdatePwms((void*)pCC_LEDPWM_SoftPwm, (void*)NULL, (void*)NULL);
	CC_LEDPWM_UpdatePwms((void*)pCC_LEDPWM_SoftPwm, (void*)pCC_LEDPWM_StripsFunctions, (void*)NULL);
 80032c6:	6839      	ldr	r1, [r7, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fd fd9c 	bl	8000e0a <CC_LEDPWM_UpdatePwms>
	CC_LEDPWM_IncreaseCntr((void*)pCC_LEDPWM_SoftPwm, (void*)NULL, (void*)NULL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	0018      	movs	r0, r3
 80032da:	f7fd fd77 	bl	8000dcc <CC_LEDPWM_IncreaseCntr>
  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b002      	add	sp, #8
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	200004e0 	.word	0x200004e0
 80032ec:	200000e4 	.word	0x200000e4
 80032f0:	08009050 	.word	0x08009050

080032f4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
//executed if there weren't too many overflows, and afterwards is
//checked if another TMR14 interrupt event has happened by checking again
//the interrupt flag. If so, it means that the procedure lasted too much
//and it is increased the missed interrupts count.

	CC_ML_StartTimer(&CC_ML_SCHEDULER_CHRONO_HANDLER);
 80032fa:	4b18      	ldr	r3, [pc, #96]	@ (800335c <TIM14_IRQHandler+0x68>)
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7ff fa8d 	bl	800281c <CC_ML_StartTimer>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003302:	4b17      	ldr	r3, [pc, #92]	@ (8003360 <TIM14_IRQHandler+0x6c>)
 8003304:	0018      	movs	r0, r3
 8003306:	f002 fef3 	bl	80060f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */
	uint8_t current_task;

	current_task=CC_SCHDLR_MainScheduler.TaskOngoing;
 800330a:	1dfb      	adds	r3, r7, #7
 800330c:	4a15      	ldr	r2, [pc, #84]	@ (8003364 <TIM14_IRQHandler+0x70>)
 800330e:	21b0      	movs	r1, #176	@ 0xb0
 8003310:	5c52      	ldrb	r2, [r2, r1]
 8003312:	701a      	strb	r2, [r3, #0]
	//Overflowing stop
	if(CC_SCHDLR_MainScheduler.MissIntCnt>CC_SCHDLR_MAX_ALLOWED_MISS_INT)	//Check the number of overflows
 8003314:	4b13      	ldr	r3, [pc, #76]	@ (8003364 <TIM14_IRQHandler+0x70>)
 8003316:	33b8      	adds	r3, #184	@ 0xb8
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d119      	bne.n	8003354 <TIM14_IRQHandler+0x60>
 8003320:	d101      	bne.n	8003326 <TIM14_IRQHandler+0x32>
 8003322:	2a64      	cmp	r2, #100	@ 0x64
 8003324:	d816      	bhi.n	8003354 <TIM14_IRQHandler+0x60>
	{
//		CC_ERR_ErrorControl.
		return;																//After a limit Scheduler wont work anymore
	}
	CC_SCHDLR_Scheduler(((void*)&CC_SCHDLR_MainScheduler), (void*)NULL, (void*)NULL);
 8003326:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <TIM14_IRQHandler+0x70>)
 8003328:	2200      	movs	r2, #0
 800332a:	2100      	movs	r1, #0
 800332c:	0018      	movs	r0, r3
 800332e:	f7fd fde1 	bl	8000ef4 <CC_SCHDLR_Scheduler>
	CC_ML_StopTimer(&CC_ML_SCHEDULER_CHRONO_HANDLER);
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <TIM14_IRQHandler+0x68>)
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff fa84 	bl	8002842 <CC_ML_StopTimer>
	CC_SCHDLR_SchedulerUsage(&CC_SCHDLR_MainSchedulerUsage, current_task); 	//Keep in mind that the scheduler update the current task, so it needs to work with non-updated current task
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <TIM14_IRQHandler+0x74>)
 8003340:	0011      	movs	r1, r2
 8003342:	0018      	movs	r0, r3
 8003344:	f7fd fe44 	bl	8000fd0 <CC_SCHDLR_SchedulerUsage>
	CC_ML_SetTimer(&CC_ML_SCHEDULER_CHRONO_HANDLER, 0);						//Reset counter timer used to calculate the task's usage
 8003348:	4b04      	ldr	r3, [pc, #16]	@ (800335c <TIM14_IRQHandler+0x68>)
 800334a:	2100      	movs	r1, #0
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff fa8b 	bl	8002868 <CC_ML_SetTimer>
 8003352:	e000      	b.n	8003356 <TIM14_IRQHandler+0x62>
		return;																//After a limit Scheduler wont work anymore
 8003354:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE END TIM14_IRQn 1 */
}
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000494 	.word	0x20000494
 8003360:	2000052c 	.word	0x2000052c
 8003364:	20000190 	.word	0x20000190
 8003368:	20000310 	.word	0x20000310

0800336c <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003370:	4b03      	ldr	r3, [pc, #12]	@ (8003380 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fe46 	bl	8004004 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8003378:	46c0      	nop			@ (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	200003f4 	.word	0x200003f4

08003384 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003388:	4b03      	ldr	r3, [pc, #12]	@ (8003398 <TIM17_FDCAN_IT1_IRQHandler+0x14>)
 800338a:	0018      	movs	r0, r3
 800338c:	f000 fe3a 	bl	8004004 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	200003f4 	.word	0x200003f4

0800339c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033a0:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <USART1_IRQHandler+0x14>)
 80033a2:	0018      	movs	r0, r3
 80033a4:	f003 fa5a 	bl	800685c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033a8:	46c0      	nop			@ (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	20000578 	.word	0x20000578

080033b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033c0:	480d      	ldr	r0, [pc, #52]	@ (80033f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033c4:	f7ff fff6 	bl	80033b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033c8:	480c      	ldr	r0, [pc, #48]	@ (80033fc <LoopForever+0x6>)
  ldr r1, =_edata
 80033ca:	490d      	ldr	r1, [pc, #52]	@ (8003400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003404 <LoopForever+0xe>)
  movs r3, #0
 80033ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033d0:	e002      	b.n	80033d8 <LoopCopyDataInit>

080033d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033d6:	3304      	adds	r3, #4

080033d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033dc:	d3f9      	bcc.n	80033d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033de:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033e0:	4c0a      	ldr	r4, [pc, #40]	@ (800340c <LoopForever+0x16>)
  movs r3, #0
 80033e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e4:	e001      	b.n	80033ea <LoopFillZerobss>

080033e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e8:	3204      	adds	r2, #4

080033ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033ec:	d3fb      	bcc.n	80033e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033ee:	f005 fbbd 	bl	8008b6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80033f2:	f7ff fa83 	bl	80028fc <main>

080033f6 <LoopForever>:

LoopForever:
  b LoopForever
 80033f6:	e7fe      	b.n	80033f6 <LoopForever>
  ldr   r0, =_estack
 80033f8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80033fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003400:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003404:	08009310 	.word	0x08009310
  ldr r2, =_sbss
 8003408:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800340c:	20000748 	.word	0x20000748

08003410 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003410:	e7fe      	b.n	8003410 <ADC1_COMP_IRQHandler>
	...

08003414 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_Init+0x3c>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <HAL_Init+0x3c>)
 8003426:	2180      	movs	r1, #128	@ 0x80
 8003428:	0049      	lsls	r1, r1, #1
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800342e:	2003      	movs	r0, #3
 8003430:	f000 f810 	bl	8003454 <HAL_InitTick>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d003      	beq.n	8003440 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e001      	b.n	8003444 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003440:	f7ff fd82 	bl	8002f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	781b      	ldrb	r3, [r3, #0]
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40022000 	.word	0x40022000

08003454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800345c:	230f      	movs	r3, #15
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003464:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <HAL_InitTick+0x88>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02b      	beq.n	80034c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800346c:	4b1c      	ldr	r3, [pc, #112]	@ (80034e0 <HAL_InitTick+0x8c>)
 800346e:	681c      	ldr	r4, [r3, #0]
 8003470:	4b1a      	ldr	r3, [pc, #104]	@ (80034dc <HAL_InitTick+0x88>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	0019      	movs	r1, r3
 8003476:	23fa      	movs	r3, #250	@ 0xfa
 8003478:	0098      	lsls	r0, r3, #2
 800347a:	f7fc fe4b 	bl	8000114 <__udivsi3>
 800347e:	0003      	movs	r3, r0
 8003480:	0019      	movs	r1, r3
 8003482:	0020      	movs	r0, r4
 8003484:	f7fc fe46 	bl	8000114 <__udivsi3>
 8003488:	0003      	movs	r3, r0
 800348a:	0018      	movs	r0, r3
 800348c:	f000 f92f 	bl	80036ee <HAL_SYSTICK_Config>
 8003490:	1e03      	subs	r3, r0, #0
 8003492:	d112      	bne.n	80034ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d80a      	bhi.n	80034b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	2301      	movs	r3, #1
 800349e:	425b      	negs	r3, r3
 80034a0:	2200      	movs	r2, #0
 80034a2:	0018      	movs	r0, r3
 80034a4:	f000 f8fe 	bl	80036a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034a8:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <HAL_InitTick+0x90>)
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e00d      	b.n	80034cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034b0:	230f      	movs	r3, #15
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e008      	b.n	80034cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034ba:	230f      	movs	r3, #15
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e003      	b.n	80034cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034c4:	230f      	movs	r3, #15
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034cc:	230f      	movs	r3, #15
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	781b      	ldrb	r3, [r3, #0]
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b005      	add	sp, #20
 80034d8:	bd90      	pop	{r4, r7, pc}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	20000014 	.word	0x20000014
 80034e0:	2000000c 	.word	0x2000000c
 80034e4:	20000010 	.word	0x20000010

080034e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034ec:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <HAL_IncTick+0x1c>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	001a      	movs	r2, r3
 80034f2:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <HAL_IncTick+0x20>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	18d2      	adds	r2, r2, r3
 80034f8:	4b03      	ldr	r3, [pc, #12]	@ (8003508 <HAL_IncTick+0x20>)
 80034fa:	601a      	str	r2, [r3, #0]
}
 80034fc:	46c0      	nop			@ (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	20000014 	.word	0x20000014
 8003508:	2000060c 	.word	0x2000060c

0800350c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  return uwTick;
 8003510:	4b02      	ldr	r3, [pc, #8]	@ (800351c <HAL_GetTick+0x10>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			@ (mov r8, r8)
 800351c:	2000060c 	.word	0x2000060c

08003520 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003528:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a06      	ldr	r2, [pc, #24]	@ (8003548 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	b002      	add	sp, #8
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	40010000 	.word	0x40010000
 8003548:	fffff9ff 	.word	0xfffff9ff

0800354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	0002      	movs	r2, r0
 8003554:	1dfb      	adds	r3, r7, #7
 8003556:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003558:	1dfb      	adds	r3, r7, #7
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b7f      	cmp	r3, #127	@ 0x7f
 800355e:	d809      	bhi.n	8003574 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	001a      	movs	r2, r3
 8003566:	231f      	movs	r3, #31
 8003568:	401a      	ands	r2, r3
 800356a:	4b04      	ldr	r3, [pc, #16]	@ (800357c <__NVIC_EnableIRQ+0x30>)
 800356c:	2101      	movs	r1, #1
 800356e:	4091      	lsls	r1, r2
 8003570:	000a      	movs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b002      	add	sp, #8
 800357a:	bd80      	pop	{r7, pc}
 800357c:	e000e100 	.word	0xe000e100

08003580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	0002      	movs	r2, r0
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	1dfb      	adds	r3, r7, #7
 800358c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800358e:	1dfb      	adds	r3, r7, #7
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b7f      	cmp	r3, #127	@ 0x7f
 8003594:	d828      	bhi.n	80035e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003596:	4a2f      	ldr	r2, [pc, #188]	@ (8003654 <__NVIC_SetPriority+0xd4>)
 8003598:	1dfb      	adds	r3, r7, #7
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b25b      	sxtb	r3, r3
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	33c0      	adds	r3, #192	@ 0xc0
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	589b      	ldr	r3, [r3, r2]
 80035a6:	1dfa      	adds	r2, r7, #7
 80035a8:	7812      	ldrb	r2, [r2, #0]
 80035aa:	0011      	movs	r1, r2
 80035ac:	2203      	movs	r2, #3
 80035ae:	400a      	ands	r2, r1
 80035b0:	00d2      	lsls	r2, r2, #3
 80035b2:	21ff      	movs	r1, #255	@ 0xff
 80035b4:	4091      	lsls	r1, r2
 80035b6:	000a      	movs	r2, r1
 80035b8:	43d2      	mvns	r2, r2
 80035ba:	401a      	ands	r2, r3
 80035bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	019b      	lsls	r3, r3, #6
 80035c2:	22ff      	movs	r2, #255	@ 0xff
 80035c4:	401a      	ands	r2, r3
 80035c6:	1dfb      	adds	r3, r7, #7
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	0018      	movs	r0, r3
 80035cc:	2303      	movs	r3, #3
 80035ce:	4003      	ands	r3, r0
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035d4:	481f      	ldr	r0, [pc, #124]	@ (8003654 <__NVIC_SetPriority+0xd4>)
 80035d6:	1dfb      	adds	r3, r7, #7
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	430a      	orrs	r2, r1
 80035e0:	33c0      	adds	r3, #192	@ 0xc0
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80035e6:	e031      	b.n	800364c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003658 <__NVIC_SetPriority+0xd8>)
 80035ea:	1dfb      	adds	r3, r7, #7
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	0019      	movs	r1, r3
 80035f0:	230f      	movs	r3, #15
 80035f2:	400b      	ands	r3, r1
 80035f4:	3b08      	subs	r3, #8
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	3306      	adds	r3, #6
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	18d3      	adds	r3, r2, r3
 80035fe:	3304      	adds	r3, #4
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1dfa      	adds	r2, r7, #7
 8003604:	7812      	ldrb	r2, [r2, #0]
 8003606:	0011      	movs	r1, r2
 8003608:	2203      	movs	r2, #3
 800360a:	400a      	ands	r2, r1
 800360c:	00d2      	lsls	r2, r2, #3
 800360e:	21ff      	movs	r1, #255	@ 0xff
 8003610:	4091      	lsls	r1, r2
 8003612:	000a      	movs	r2, r1
 8003614:	43d2      	mvns	r2, r2
 8003616:	401a      	ands	r2, r3
 8003618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	22ff      	movs	r2, #255	@ 0xff
 8003620:	401a      	ands	r2, r3
 8003622:	1dfb      	adds	r3, r7, #7
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	0018      	movs	r0, r3
 8003628:	2303      	movs	r3, #3
 800362a:	4003      	ands	r3, r0
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003630:	4809      	ldr	r0, [pc, #36]	@ (8003658 <__NVIC_SetPriority+0xd8>)
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	001c      	movs	r4, r3
 8003638:	230f      	movs	r3, #15
 800363a:	4023      	ands	r3, r4
 800363c:	3b08      	subs	r3, #8
 800363e:	089b      	lsrs	r3, r3, #2
 8003640:	430a      	orrs	r2, r1
 8003642:	3306      	adds	r3, #6
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	18c3      	adds	r3, r0, r3
 8003648:	3304      	adds	r3, #4
 800364a:	601a      	str	r2, [r3, #0]
}
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b003      	add	sp, #12
 8003652:	bd90      	pop	{r4, r7, pc}
 8003654:	e000e100 	.word	0xe000e100
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	1e5a      	subs	r2, r3, #1
 8003668:	2380      	movs	r3, #128	@ 0x80
 800366a:	045b      	lsls	r3, r3, #17
 800366c:	429a      	cmp	r2, r3
 800366e:	d301      	bcc.n	8003674 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003670:	2301      	movs	r3, #1
 8003672:	e010      	b.n	8003696 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <SysTick_Config+0x44>)
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	3a01      	subs	r2, #1
 800367a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367c:	2301      	movs	r3, #1
 800367e:	425b      	negs	r3, r3
 8003680:	2103      	movs	r1, #3
 8003682:	0018      	movs	r0, r3
 8003684:	f7ff ff7c 	bl	8003580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <SysTick_Config+0x44>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <SysTick_Config+0x44>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b002      	add	sp, #8
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	210f      	movs	r1, #15
 80036b0:	187b      	adds	r3, r7, r1
 80036b2:	1c02      	adds	r2, r0, #0
 80036b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	b25b      	sxtb	r3, r3
 80036be:	0011      	movs	r1, r2
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff ff5d 	bl	8003580 <__NVIC_SetPriority>
}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b004      	add	sp, #16
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	0002      	movs	r2, r0
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b25b      	sxtb	r3, r3
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7ff ff33 	bl	800354c <__NVIC_EnableIRQ>
}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b002      	add	sp, #8
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff ffaf 	bl	800365c <SysTick_Config>
 80036fe:	0003      	movs	r3, r0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b002      	add	sp, #8
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e04f      	b.n	80037ba <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2225      	movs	r2, #37	@ 0x25
 800371e:	5c9b      	ldrb	r3, [r3, r2]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d008      	beq.n	8003738 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2204      	movs	r2, #4
 800372a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2224      	movs	r2, #36	@ 0x24
 8003730:	2100      	movs	r1, #0
 8003732:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e040      	b.n	80037ba <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	210e      	movs	r1, #14
 8003744:	438a      	bics	r2, r1
 8003746:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003752:	491c      	ldr	r1, [pc, #112]	@ (80037c4 <HAL_DMA_Abort+0xbc>)
 8003754:	400a      	ands	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2101      	movs	r1, #1
 8003764:	438a      	bics	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376c:	221c      	movs	r2, #28
 800376e:	401a      	ands	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	2101      	movs	r1, #1
 8003776:	4091      	lsls	r1, r2
 8003778:	000a      	movs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003784:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	490a      	ldr	r1, [pc, #40]	@ (80037c4 <HAL_DMA_Abort+0xbc>)
 800379a:	400a      	ands	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2225      	movs	r2, #37	@ 0x25
 80037ac:	2101      	movs	r1, #1
 80037ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	@ 0x24
 80037b4:	2100      	movs	r1, #0
 80037b6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	fffffeff 	.word	0xfffffeff

080037c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d0:	210f      	movs	r1, #15
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2225      	movs	r2, #37	@ 0x25
 80037dc:	5c9b      	ldrb	r3, [r3, r2]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d006      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2204      	movs	r2, #4
 80037e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e048      	b.n	8003884 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	210e      	movs	r1, #14
 80037fe:	438a      	bics	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	438a      	bics	r2, r1
 8003810:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381c:	491d      	ldr	r1, [pc, #116]	@ (8003894 <HAL_DMA_Abort_IT+0xcc>)
 800381e:	400a      	ands	r2, r1
 8003820:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	221c      	movs	r2, #28
 8003828:	401a      	ands	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	2101      	movs	r1, #1
 8003830:	4091      	lsls	r1, r2
 8003832:	000a      	movs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800383e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	4910      	ldr	r1, [pc, #64]	@ (8003894 <HAL_DMA_Abort_IT+0xcc>)
 8003854:	400a      	ands	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003860:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2225      	movs	r2, #37	@ 0x25
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2224      	movs	r2, #36	@ 0x24
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	0010      	movs	r0, r2
 8003882:	4798      	blx	r3
    }
  }
  return status;
 8003884:	230f      	movs	r3, #15
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	781b      	ldrb	r3, [r3, #0]
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b004      	add	sp, #16
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	fffffeff 	.word	0xfffffeff

08003898 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e14e      	b.n	8003b48 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	225c      	movs	r2, #92	@ 0x5c
 80038ae:	5c9b      	ldrb	r3, [r3, r2]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d107      	bne.n	80038c6 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	225d      	movs	r2, #93	@ 0x5d
 80038ba:	2100      	movs	r1, #0
 80038bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7ff fb69 	bl	8002f98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2110      	movs	r1, #16
 80038d2:	438a      	bics	r2, r1
 80038d4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038d6:	f7ff fe19 	bl	800350c <HAL_GetTick>
 80038da:	0003      	movs	r3, r0
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80038de:	e012      	b.n	8003906 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80038e0:	f7ff fe14 	bl	800350c <HAL_GetTick>
 80038e4:	0002      	movs	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b0a      	cmp	r3, #10
 80038ec:	d90b      	bls.n	8003906 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f2:	2201      	movs	r2, #1
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	225c      	movs	r2, #92	@ 0x5c
 80038fe:	2103      	movs	r1, #3
 8003900:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e120      	b.n	8003b48 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2208      	movs	r2, #8
 800390e:	4013      	ands	r3, r2
 8003910:	2b08      	cmp	r3, #8
 8003912:	d0e5      	beq.n	80038e0 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2101      	movs	r1, #1
 8003920:	430a      	orrs	r2, r1
 8003922:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003924:	f7ff fdf2 	bl	800350c <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800392c:	e012      	b.n	8003954 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800392e:	f7ff fded 	bl	800350c <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b0a      	cmp	r3, #10
 800393a:	d90b      	bls.n	8003954 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003940:	2201      	movs	r2, #1
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	225c      	movs	r2, #92	@ 0x5c
 800394c:	2103      	movs	r1, #3
 800394e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0f9      	b.n	8003b48 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	d0e6      	beq.n	800392e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2102      	movs	r1, #2
 800396c:	430a      	orrs	r2, r1
 800396e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a76      	ldr	r2, [pc, #472]	@ (8003b50 <HAL_FDCAN_Init+0x2b8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d103      	bne.n	8003982 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800397a:	4a76      	ldr	r2, [pc, #472]	@ (8003b54 <HAL_FDCAN_Init+0x2bc>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	7c1b      	ldrb	r3, [r3, #16]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d108      	bne.n	800399c <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2140      	movs	r1, #64	@ 0x40
 8003996:	438a      	bics	r2, r1
 8003998:	619a      	str	r2, [r3, #24]
 800399a:	e007      	b.n	80039ac <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2140      	movs	r1, #64	@ 0x40
 80039a8:	430a      	orrs	r2, r1
 80039aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	7c5b      	ldrb	r3, [r3, #17]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d109      	bne.n	80039c8 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2180      	movs	r1, #128	@ 0x80
 80039c0:	01c9      	lsls	r1, r1, #7
 80039c2:	430a      	orrs	r2, r1
 80039c4:	619a      	str	r2, [r3, #24]
 80039c6:	e007      	b.n	80039d8 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4961      	ldr	r1, [pc, #388]	@ (8003b58 <HAL_FDCAN_Init+0x2c0>)
 80039d4:	400a      	ands	r2, r1
 80039d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7c9b      	ldrb	r3, [r3, #18]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d108      	bne.n	80039f2 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	495c      	ldr	r1, [pc, #368]	@ (8003b5c <HAL_FDCAN_Init+0x2c4>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	619a      	str	r2, [r3, #24]
 80039f0:	e008      	b.n	8003a04 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2180      	movs	r1, #128	@ 0x80
 80039fe:	0149      	lsls	r1, r1, #5
 8003a00:	430a      	orrs	r2, r1
 8003a02:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	4a55      	ldr	r2, [pc, #340]	@ (8003b60 <HAL_FDCAN_Init+0x2c8>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	21a4      	movs	r1, #164	@ 0xa4
 8003a28:	438a      	bics	r2, r1
 8003a2a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2110      	movs	r1, #16
 8003a38:	438a      	bics	r2, r1
 8003a3a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d108      	bne.n	8003a56 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2104      	movs	r1, #4
 8003a50:	430a      	orrs	r2, r1
 8003a52:	619a      	str	r2, [r3, #24]
 8003a54:	e02c      	b.n	8003ab0 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d028      	beq.n	8003ab0 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d01c      	beq.n	8003aa0 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2180      	movs	r1, #128	@ 0x80
 8003a72:	430a      	orrs	r2, r1
 8003a74:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2110      	movs	r1, #16
 8003a82:	430a      	orrs	r2, r1
 8003a84:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d110      	bne.n	8003ab0 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2120      	movs	r1, #32
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	619a      	str	r2, [r3, #24]
 8003a9e:	e007      	b.n	8003ab0 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2120      	movs	r1, #32
 8003aac:	430a      	orrs	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ac0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ad8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ada:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	23c0      	movs	r3, #192	@ 0xc0
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d115      	bne.n	8003b14 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	3b01      	subs	r3, #1
 8003af4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003af6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afc:	3b01      	subs	r3, #1
 8003afe:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003b00:	431a      	orrs	r2, r3
 8003b02:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003b10:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b12:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	22c0      	movs	r2, #192	@ 0xc0
 8003b1a:	5899      	ldr	r1, [r3, r2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	21c0      	movs	r1, #192	@ 0xc0
 8003b28:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 fbf3 	bl	8004318 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	225c      	movs	r2, #92	@ 0x5c
 8003b42:	2101      	movs	r1, #1
 8003b44:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b004      	add	sp, #16
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40006400 	.word	0x40006400
 8003b54:	40006500 	.word	0x40006500
 8003b58:	ffffbfff 	.word	0xffffbfff
 8003b5c:	ffffefff 	.word	0xffffefff
 8003b60:	fffffcff 	.word	0xfffffcff

08003b64 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	225c      	movs	r2, #92	@ 0x5c
 8003b70:	5c9b      	ldrb	r3, [r3, r2]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d110      	bne.n	8003b9a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	225c      	movs	r2, #92	@ 0x5c
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e006      	b.n	8003ba8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
  }
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	225c      	movs	r2, #92	@ 0x5c
 8003bc0:	5c9b      	ldrb	r3, [r3, r2]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d12d      	bne.n	8003c24 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	22c4      	movs	r2, #196	@ 0xc4
 8003bce:	589a      	ldr	r2, [r3, r2]
 8003bd0:	2380      	movs	r3, #128	@ 0x80
 8003bd2:	039b      	lsls	r3, r3, #14
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d008      	beq.n	8003bea <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bdc:	2280      	movs	r2, #128	@ 0x80
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e023      	b.n	8003c32 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	22c4      	movs	r2, #196	@ 0xc4
 8003bf0:	589b      	ldr	r3, [r3, r2]
 8003bf2:	0c1b      	lsrs	r3, r3, #16
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fbf5 	bl	80043f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4091      	lsls	r1, r2
 8003c10:	000a      	movs	r2, r1
 8003c12:	21cc      	movs	r1, #204	@ 0xcc
 8003c14:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003c16:	2201      	movs	r2, #1
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e006      	b.n	8003c32 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c28:	2208      	movs	r2, #8
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
  }
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b006      	add	sp, #24
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c4e:	201b      	movs	r0, #27
 8003c50:	183b      	adds	r3, r7, r0
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	215c      	movs	r1, #92	@ 0x5c
 8003c56:	5c52      	ldrb	r2, [r2, r1]
 8003c58:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003c5a:	183b      	adds	r3, r7, r0
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d000      	beq.n	8003c64 <HAL_FDCAN_GetRxMessage+0x28>
 8003c62:	e0ec      	b.n	8003e3e <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b40      	cmp	r3, #64	@ 0x40
 8003c68:	d137      	bne.n	8003cda <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2290      	movs	r2, #144	@ 0x90
 8003c70:	589b      	ldr	r3, [r3, r2]
 8003c72:	220f      	movs	r2, #15
 8003c74:	4013      	ands	r3, r2
 8003c76:	d108      	bne.n	8003c8a <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7c:	2280      	movs	r2, #128	@ 0x80
 8003c7e:	0052      	lsls	r2, r2, #1
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e0e0      	b.n	8003e4c <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2290      	movs	r2, #144	@ 0x90
 8003c90:	589b      	ldr	r3, [r3, r2]
 8003c92:	0e1b      	lsrs	r3, r3, #24
 8003c94:	2201      	movs	r2, #1
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10a      	bne.n	8003cb2 <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2280      	movs	r2, #128	@ 0x80
 8003ca2:	589b      	ldr	r3, [r3, r2]
 8003ca4:	0a5b      	lsrs	r3, r3, #9
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2290      	movs	r2, #144	@ 0x90
 8003cb8:	589b      	ldr	r3, [r3, r2]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	18d3      	adds	r3, r2, r3
 8003cc4:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	0013      	movs	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	189b      	adds	r3, r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	18cb      	adds	r3, r1, r3
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd8:	e036      	b.n	8003d48 <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2298      	movs	r2, #152	@ 0x98
 8003ce0:	589b      	ldr	r3, [r3, r2]
 8003ce2:	220f      	movs	r2, #15
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d108      	bne.n	8003cfa <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cec:	2280      	movs	r2, #128	@ 0x80
 8003cee:	0052      	lsls	r2, r2, #1
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0a8      	b.n	8003e4c <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2298      	movs	r2, #152	@ 0x98
 8003d00:	589b      	ldr	r3, [r3, r2]
 8003d02:	0e1b      	lsrs	r3, r3, #24
 8003d04:	2201      	movs	r2, #1
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d10a      	bne.n	8003d22 <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2280      	movs	r2, #128	@ 0x80
 8003d12:	589b      	ldr	r3, [r3, r2]
 8003d14:	0a1b      	lsrs	r3, r3, #8
 8003d16:	2201      	movs	r2, #1
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2298      	movs	r2, #152	@ 0x98
 8003d28:	589b      	ldr	r3, [r3, r2]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4013      	ands	r3, r2
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	18d3      	adds	r3, r2, r3
 8003d34:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	0013      	movs	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	18cb      	adds	r3, r1, r3
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2380      	movs	r3, #128	@ 0x80
 8003d4e:	05db      	lsls	r3, r3, #23
 8003d50:	401a      	ands	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0c9b      	lsrs	r3, r3, #18
 8003d64:	055b      	lsls	r3, r3, #21
 8003d66:	0d5a      	lsrs	r2, r3, #21
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e005      	b.n	8003d7a <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	08da      	lsrs	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	2380      	movs	r3, #128	@ 0x80
 8003d80:	059b      	lsls	r3, r3, #22
 8003d82:	401a      	ands	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	0fdb      	lsrs	r3, r3, #31
 8003d8e:	07da      	lsls	r2, r3, #31
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	3304      	adds	r3, #4
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	0c1a      	lsrs	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	220f      	movs	r2, #15
 8003dae:	401a      	ands	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	035b      	lsls	r3, r3, #13
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	2380      	movs	r3, #128	@ 0x80
 8003dc8:	039b      	lsls	r3, r3, #14
 8003dca:	401a      	ands	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0e1b      	lsrs	r3, r3, #24
 8003dd6:	227f      	movs	r2, #127	@ 0x7f
 8003dd8:	401a      	ands	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	0fda      	lsrs	r2, r3, #31
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	3304      	adds	r3, #4
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	e00a      	b.n	8003e0e <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	18d2      	adds	r2, r2, r3
 8003dfe:	6839      	ldr	r1, [r7, #0]
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	18cb      	adds	r3, r1, r3
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4a10      	ldr	r2, [pc, #64]	@ (8003e54 <HAL_FDCAN_GetRxMessage+0x218>)
 8003e14:	5cd3      	ldrb	r3, [r2, r3]
 8003e16:	001a      	movs	r2, r3
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d3ec      	bcc.n	8003df8 <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b40      	cmp	r3, #64	@ 0x40
 8003e22:	d105      	bne.n	8003e30 <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2194      	movs	r1, #148	@ 0x94
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	505a      	str	r2, [r3, r1]
 8003e2e:	e004      	b.n	8003e3a <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	219c      	movs	r1, #156	@ 0x9c
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e006      	b.n	8003e4c <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e42:	2208      	movs	r2, #8
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
  }
}
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b00a      	add	sp, #40	@ 0x28
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	080091a0 	.word	0x080091a0

08003e58 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003e64:	2017      	movs	r0, #23
 8003e66:	183b      	adds	r3, r7, r0
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	215c      	movs	r1, #92	@ 0x5c
 8003e6c:	5c52      	ldrb	r2, [r2, r1]
 8003e6e:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003e70:	0002      	movs	r2, r0
 8003e72:	18bb      	adds	r3, r7, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d004      	beq.n	8003e84 <HAL_FDCAN_ActivateNotification+0x2c>
 8003e7a:	18bb      	adds	r3, r7, r2
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d000      	beq.n	8003e84 <HAL_FDCAN_ActivateNotification+0x2c>
 8003e82:	e0b4      	b.n	8003fee <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8a:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2207      	movs	r2, #7
 8003e90:	4013      	ands	r3, r2
 8003e92:	d003      	beq.n	8003e9c <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2201      	movs	r2, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d034      	beq.n	8003f06 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2238      	movs	r2, #56	@ 0x38
 8003ea0:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003ea2:	d003      	beq.n	8003eac <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d02c      	beq.n	8003f06 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	23e0      	movs	r3, #224	@ 0xe0
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003eb4:	d003      	beq.n	8003ebe <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d023      	beq.n	8003f06 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	23f0      	movs	r3, #240	@ 0xf0
 8003ec2:	015b      	lsls	r3, r3, #5
 8003ec4:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003ec6:	d003      	beq.n	8003ed0 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2208      	movs	r2, #8
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d01a      	beq.n	8003f06 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	23e0      	movs	r3, #224	@ 0xe0
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003ed8:	d003      	beq.n	8003ee2 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2210      	movs	r2, #16
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d011      	beq.n	8003f06 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	23c0      	movs	r3, #192	@ 0xc0
 8003ee6:	029b      	lsls	r3, r3, #10
 8003ee8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003eea:	d003      	beq.n	8003ef4 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d008      	beq.n	8003f06 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	23fc      	movs	r3, #252	@ 0xfc
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003efc:	d00b      	beq.n	8003f16 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2240      	movs	r2, #64	@ 0x40
 8003f02:	4013      	ands	r3, r2
 8003f04:	d107      	bne.n	8003f16 <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2101      	movs	r1, #1
 8003f12:	430a      	orrs	r2, r1
 8003f14:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2207      	movs	r2, #7
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2201      	movs	r2, #1
 8003f22:	4013      	ands	r3, r2
 8003f24:	d134      	bne.n	8003f90 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2238      	movs	r2, #56	@ 0x38
 8003f2a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003f2c:	d003      	beq.n	8003f36 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2202      	movs	r2, #2
 8003f32:	4013      	ands	r3, r2
 8003f34:	d12c      	bne.n	8003f90 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	23e0      	movs	r3, #224	@ 0xe0
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003f3e:	d003      	beq.n	8003f48 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	2204      	movs	r2, #4
 8003f44:	4013      	ands	r3, r2
 8003f46:	d123      	bne.n	8003f90 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	23f0      	movs	r3, #240	@ 0xf0
 8003f4c:	015b      	lsls	r3, r3, #5
 8003f4e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003f50:	d003      	beq.n	8003f5a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2208      	movs	r2, #8
 8003f56:	4013      	ands	r3, r2
 8003f58:	d11a      	bne.n	8003f90 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	23e0      	movs	r3, #224	@ 0xe0
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003f62:	d003      	beq.n	8003f6c <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2210      	movs	r2, #16
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	23c0      	movs	r3, #192	@ 0xc0
 8003f70:	029b      	lsls	r3, r3, #10
 8003f72:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003f74:	d003      	beq.n	8003f7e <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d108      	bne.n	8003f90 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	23fc      	movs	r3, #252	@ 0xfc
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003f86:	d00b      	beq.n	8003fa0 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2240      	movs	r2, #64	@ 0x40
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2280      	movs	r2, #128	@ 0x80
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	22dc      	movs	r2, #220	@ 0xdc
 8003fae:	5899      	ldr	r1, [r3, r2]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	21dc      	movs	r1, #220	@ 0xdc
 8003fba:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	2380      	movs	r3, #128	@ 0x80
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	22e0      	movs	r2, #224	@ 0xe0
 8003fcc:	5899      	ldr	r1, [r3, r2]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	21e0      	movs	r1, #224	@ 0xe0
 8003fd8:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e006      	b.n	8003ffc <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
  }
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b006      	add	sp, #24
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08c      	sub	sp, #48	@ 0x30
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004012:	23e0      	movs	r3, #224	@ 0xe0
 8004014:	015b      	lsls	r3, r3, #5
 8004016:	4013      	ands	r3, r2
 8004018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004022:	4013      	ands	r3, r2
 8004024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	2207      	movs	r2, #7
 800402e:	4013      	ands	r3, r2
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	4013      	ands	r3, r2
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004044:	2238      	movs	r2, #56	@ 0x38
 8004046:	4013      	ands	r3, r2
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	4013      	ands	r3, r2
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800405c:	23f1      	movs	r3, #241	@ 0xf1
 800405e:	041b      	lsls	r3, r3, #16
 8004060:	4013      	ands	r3, r2
 8004062:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	4013      	ands	r3, r2
 800406e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004076:	23e0      	movs	r3, #224	@ 0xe0
 8004078:	031b      	lsls	r3, r3, #12
 800407a:	4013      	ands	r3, r2
 800407c:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	4013      	ands	r3, r2
 8004088:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004090:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004098:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2240      	movs	r2, #64	@ 0x40
 800409e:	4013      	ands	r3, r2
 80040a0:	d00b      	beq.n	80040ba <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2240      	movs	r2, #64	@ 0x40
 80040a6:	4013      	ands	r3, r2
 80040a8:	d007      	beq.n	80040ba <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2240      	movs	r2, #64	@ 0x40
 80040b0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 f916 	bl	80042e6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	2380      	movs	r3, #128	@ 0x80
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4013      	ands	r3, r2
 80040c2:	d01b      	beq.n	80040fc <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	2380      	movs	r3, #128	@ 0x80
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4013      	ands	r3, r2
 80040cc:	d016      	beq.n	80040fc <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	22d8      	movs	r2, #216	@ 0xd8
 80040d4:	589b      	ldr	r3, [r3, r2]
 80040d6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	22e0      	movs	r2, #224	@ 0xe0
 80040de:	589a      	ldr	r2, [r3, r2]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2280      	movs	r2, #128	@ 0x80
 80040ec:	0052      	lsls	r2, r2, #1
 80040ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0011      	movs	r1, r2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f8dc 	bl	80042b4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80040fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004108:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800410a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	0011      	movs	r1, r2
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f8ac 	bl	800426e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d009      	beq.n	8004130 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004122:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0011      	movs	r1, r2
 800412a:	0018      	movs	r0, r3
 800412c:	f7fd fd0c 	bl	8001b48 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800413e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0011      	movs	r1, r2
 8004144:	0018      	movs	r0, r3
 8004146:	f000 f89b 	bl	8004280 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	2380      	movs	r3, #128	@ 0x80
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4013      	ands	r3, r2
 8004152:	d00d      	beq.n	8004170 <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4013      	ands	r3, r2
 800415c:	d008      	beq.n	8004170 <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2280      	movs	r2, #128	@ 0x80
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	0018      	movs	r0, r3
 800416c:	f000 f891 	bl	8004292 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2280      	movs	r2, #128	@ 0x80
 8004174:	4013      	ands	r3, r2
 8004176:	d019      	beq.n	80041ac <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2280      	movs	r2, #128	@ 0x80
 800417c:	4013      	ands	r3, r2
 800417e:	d015      	beq.n	80041ac <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	22d4      	movs	r2, #212	@ 0xd4
 8004186:	589b      	ldr	r3, [r3, r2]
 8004188:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	22dc      	movs	r2, #220	@ 0xdc
 8004190:	589a      	ldr	r2, [r3, r2]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2280      	movs	r2, #128	@ 0x80
 800419e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	0011      	movs	r1, r2
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 f87b 	bl	80042a2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	4013      	ands	r3, r2
 80041b4:	d00d      	beq.n	80041d2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	019b      	lsls	r3, r3, #6
 80041bc:	4013      	ands	r3, r2
 80041be:	d008      	beq.n	80041d2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2280      	movs	r2, #128	@ 0x80
 80041c6:	0192      	lsls	r2, r2, #6
 80041c8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 f87a 	bl	80042c6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	2380      	movs	r3, #128	@ 0x80
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	4013      	ands	r3, r2
 80041da:	d00d      	beq.n	80041f8 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	4013      	ands	r3, r2
 80041e4:	d008      	beq.n	80041f8 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2280      	movs	r2, #128	@ 0x80
 80041ec:	0212      	lsls	r2, r2, #8
 80041ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 f86f 	bl	80042d6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4013      	ands	r3, r2
 8004200:	d00f      	beq.n	8004222 <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	2380      	movs	r3, #128	@ 0x80
 8004206:	01db      	lsls	r3, r3, #7
 8004208:	4013      	ands	r3, r2
 800420a:	d00a      	beq.n	8004222 <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	01d2      	lsls	r2, r2, #7
 8004214:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f000 f865 	bl	8004306 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f000 f848 	bl	80042f6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	b00c      	add	sp, #48	@ 0x30
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b002      	add	sp, #8
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80042ac:	46c0      	nop			@ (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b002      	add	sp, #8
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b002      	add	sp, #8
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b002      	add	sp, #8
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b002      	add	sp, #8
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004310:	46c0      	nop			@ (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}

08004318 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004320:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8004322:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2e      	ldr	r2, [pc, #184]	@ (80043e4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d105      	bne.n	800433a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	22d4      	movs	r2, #212	@ 0xd4
 8004332:	0092      	lsls	r2, r2, #2
 8004334:	4694      	mov	ip, r2
 8004336:	4463      	add	r3, ip
 8004338:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2280      	movs	r2, #128	@ 0x80
 8004346:	589b      	ldr	r3, [r3, r2]
 8004348:	4a27      	ldr	r2, [pc, #156]	@ (80043e8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800434a:	4013      	ands	r3, r2
 800434c:	0019      	movs	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004352:	041a      	lsls	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	2180      	movs	r1, #128	@ 0x80
 800435c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3370      	adds	r3, #112	@ 0x70
 8004362:	001a      	movs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2280      	movs	r2, #128	@ 0x80
 800436e:	589b      	ldr	r3, [r3, r2]
 8004370:	4a1e      	ldr	r2, [pc, #120]	@ (80043ec <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004372:	4013      	ands	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437a:	061a      	lsls	r2, r3, #24
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	2180      	movs	r1, #128	@ 0x80
 8004384:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	33b0      	adds	r3, #176	@ 0xb0
 800438a:	001a      	movs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	3389      	adds	r3, #137	@ 0x89
 8004394:	33ff      	adds	r3, #255	@ 0xff
 8004396:	001a      	movs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2298      	movs	r2, #152	@ 0x98
 80043a0:	0092      	lsls	r2, r2, #2
 80043a2:	189a      	adds	r2, r3, r2
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	229e      	movs	r2, #158	@ 0x9e
 80043ac:	0092      	lsls	r2, r2, #2
 80043ae:	189a      	adds	r2, r3, r2
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e005      	b.n	80043c6 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3304      	adds	r3, #4
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	22d4      	movs	r2, #212	@ 0xd4
 80043ca:	0092      	lsls	r2, r2, #2
 80043cc:	4694      	mov	ip, r2
 80043ce:	4463      	add	r3, ip
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d3f1      	bcc.n	80043ba <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	46c0      	nop			@ (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b004      	add	sp, #16
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	4000b400 	.word	0x4000b400
 80043e4:	40006800 	.word	0x40006800
 80043e8:	ffe0ffff 	.word	0xffe0ffff
 80043ec:	f0ffffff 	.word	0xf0ffffff

080043f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800440e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004416:	4313      	orrs	r3, r2
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e00b      	b.n	8004434 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004424:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800442a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800442c:	2280      	movs	r2, #128	@ 0x80
 800442e:	05d2      	lsls	r2, r2, #23
 8004430:	4313      	orrs	r3, r2
 8004432:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800443e:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004444:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800444a:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	0013      	movs	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	189b      	adds	r3, r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	18cb      	adds	r3, r1, r3
 8004466:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	3304      	adds	r3, #4
 8004472:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	3304      	adds	r3, #4
 800447e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e020      	b.n	80044c8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	3303      	adds	r3, #3
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	18d3      	adds	r3, r2, r3
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	3302      	adds	r3, #2
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	18cb      	adds	r3, r1, r3
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800449e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3301      	adds	r3, #1
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	18cb      	adds	r3, r1, r3
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80044ac:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	188a      	adds	r2, r1, r2
 80044b4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80044b6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	3304      	adds	r3, #4
 80044c0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	3304      	adds	r3, #4
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a05      	ldr	r2, [pc, #20]	@ (80044e4 <FDCAN_CopyMessageToRAM+0xf4>)
 80044ce:	5cd3      	ldrb	r3, [r2, r3]
 80044d0:	001a      	movs	r2, r3
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d3d6      	bcc.n	8004486 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80044d8:	46c0      	nop			@ (mov r8, r8)
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	46bd      	mov	sp, r7
 80044de:	b008      	add	sp, #32
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	46c0      	nop			@ (mov r8, r8)
 80044e4:	080091a0 	.word	0x080091a0

080044e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f6:	e14d      	b.n	8004794 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2101      	movs	r1, #1
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4091      	lsls	r1, r2
 8004502:	000a      	movs	r2, r1
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d100      	bne.n	8004510 <HAL_GPIO_Init+0x28>
 800450e:	e13e      	b.n	800478e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2203      	movs	r2, #3
 8004516:	4013      	ands	r3, r2
 8004518:	2b01      	cmp	r3, #1
 800451a:	d005      	beq.n	8004528 <HAL_GPIO_Init+0x40>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2203      	movs	r2, #3
 8004522:	4013      	ands	r3, r2
 8004524:	2b02      	cmp	r3, #2
 8004526:	d130      	bne.n	800458a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	409a      	lsls	r2, r3
 8004536:	0013      	movs	r3, r2
 8004538:	43da      	mvns	r2, r3
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	409a      	lsls	r2, r3
 800454a:	0013      	movs	r3, r2
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800455e:	2201      	movs	r2, #1
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	409a      	lsls	r2, r3
 8004564:	0013      	movs	r3, r2
 8004566:	43da      	mvns	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	2201      	movs	r2, #1
 8004576:	401a      	ands	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	409a      	lsls	r2, r3
 800457c:	0013      	movs	r3, r2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	2b03      	cmp	r3, #3
 8004594:	d017      	beq.n	80045c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	2203      	movs	r2, #3
 80045a2:	409a      	lsls	r2, r3
 80045a4:	0013      	movs	r3, r2
 80045a6:	43da      	mvns	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	0013      	movs	r3, r2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2203      	movs	r2, #3
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d123      	bne.n	800461a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	08da      	lsrs	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3208      	adds	r2, #8
 80045da:	0092      	lsls	r2, r2, #2
 80045dc:	58d3      	ldr	r3, [r2, r3]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2207      	movs	r2, #7
 80045e4:	4013      	ands	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	220f      	movs	r2, #15
 80045ea:	409a      	lsls	r2, r3
 80045ec:	0013      	movs	r3, r2
 80045ee:	43da      	mvns	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2107      	movs	r1, #7
 80045fe:	400b      	ands	r3, r1
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	409a      	lsls	r2, r3
 8004604:	0013      	movs	r3, r2
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	08da      	lsrs	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3208      	adds	r2, #8
 8004614:	0092      	lsls	r2, r2, #2
 8004616:	6939      	ldr	r1, [r7, #16]
 8004618:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	2203      	movs	r2, #3
 8004626:	409a      	lsls	r2, r3
 8004628:	0013      	movs	r3, r2
 800462a:	43da      	mvns	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2203      	movs	r2, #3
 8004638:	401a      	ands	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	409a      	lsls	r2, r3
 8004640:	0013      	movs	r3, r2
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	23c0      	movs	r3, #192	@ 0xc0
 8004654:	029b      	lsls	r3, r3, #10
 8004656:	4013      	ands	r3, r2
 8004658:	d100      	bne.n	800465c <HAL_GPIO_Init+0x174>
 800465a:	e098      	b.n	800478e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800465c:	4a53      	ldr	r2, [pc, #332]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	089b      	lsrs	r3, r3, #2
 8004662:	3318      	adds	r3, #24
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	589b      	ldr	r3, [r3, r2]
 8004668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2203      	movs	r2, #3
 800466e:	4013      	ands	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	220f      	movs	r2, #15
 8004674:	409a      	lsls	r2, r3
 8004676:	0013      	movs	r3, r2
 8004678:	43da      	mvns	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	23a0      	movs	r3, #160	@ 0xa0
 8004684:	05db      	lsls	r3, r3, #23
 8004686:	429a      	cmp	r2, r3
 8004688:	d019      	beq.n	80046be <HAL_GPIO_Init+0x1d6>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a48      	ldr	r2, [pc, #288]	@ (80047b0 <HAL_GPIO_Init+0x2c8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_GPIO_Init+0x1d2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a47      	ldr	r2, [pc, #284]	@ (80047b4 <HAL_GPIO_Init+0x2cc>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00d      	beq.n	80046b6 <HAL_GPIO_Init+0x1ce>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a46      	ldr	r2, [pc, #280]	@ (80047b8 <HAL_GPIO_Init+0x2d0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <HAL_GPIO_Init+0x1ca>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a45      	ldr	r2, [pc, #276]	@ (80047bc <HAL_GPIO_Init+0x2d4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_GPIO_Init+0x1c6>
 80046aa:	2304      	movs	r3, #4
 80046ac:	e008      	b.n	80046c0 <HAL_GPIO_Init+0x1d8>
 80046ae:	2305      	movs	r3, #5
 80046b0:	e006      	b.n	80046c0 <HAL_GPIO_Init+0x1d8>
 80046b2:	2303      	movs	r3, #3
 80046b4:	e004      	b.n	80046c0 <HAL_GPIO_Init+0x1d8>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e002      	b.n	80046c0 <HAL_GPIO_Init+0x1d8>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_GPIO_Init+0x1d8>
 80046be:	2300      	movs	r3, #0
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	2103      	movs	r1, #3
 80046c4:	400a      	ands	r2, r1
 80046c6:	00d2      	lsls	r2, r2, #3
 80046c8:	4093      	lsls	r3, r2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80046d0:	4936      	ldr	r1, [pc, #216]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	3318      	adds	r3, #24
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046de:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43da      	mvns	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	2380      	movs	r3, #128	@ 0x80
 80046f4:	035b      	lsls	r3, r3, #13
 80046f6:	4013      	ands	r3, r2
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004702:	4b2a      	ldr	r3, [pc, #168]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004708:	4b28      	ldr	r3, [pc, #160]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43da      	mvns	r2, r3
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	2380      	movs	r3, #128	@ 0x80
 800471e:	039b      	lsls	r3, r3, #14
 8004720:	4013      	ands	r3, r2
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800472c:	4b1f      	ldr	r3, [pc, #124]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004732:	4a1e      	ldr	r2, [pc, #120]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 8004734:	2384      	movs	r3, #132	@ 0x84
 8004736:	58d3      	ldr	r3, [r2, r3]
 8004738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	43da      	mvns	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	2380      	movs	r3, #128	@ 0x80
 800474a:	029b      	lsls	r3, r3, #10
 800474c:	4013      	ands	r3, r2
 800474e:	d003      	beq.n	8004758 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004758:	4914      	ldr	r1, [pc, #80]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 800475a:	2284      	movs	r2, #132	@ 0x84
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004760:	4a12      	ldr	r2, [pc, #72]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 8004762:	2380      	movs	r3, #128	@ 0x80
 8004764:	58d3      	ldr	r3, [r2, r3]
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	43da      	mvns	r2, r3
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	2380      	movs	r3, #128	@ 0x80
 8004778:	025b      	lsls	r3, r3, #9
 800477a:	4013      	ands	r3, r2
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004786:	4909      	ldr	r1, [pc, #36]	@ (80047ac <HAL_GPIO_Init+0x2c4>)
 8004788:	2280      	movs	r2, #128	@ 0x80
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	3301      	adds	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	40da      	lsrs	r2, r3
 800479c:	1e13      	subs	r3, r2, #0
 800479e:	d000      	beq.n	80047a2 <HAL_GPIO_Init+0x2ba>
 80047a0:	e6aa      	b.n	80044f8 <HAL_GPIO_Init+0x10>
  }
}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	46c0      	nop			@ (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b006      	add	sp, #24
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021800 	.word	0x40021800
 80047b0:	50000400 	.word	0x50000400
 80047b4:	50000800 	.word	0x50000800
 80047b8:	50000c00 	.word	0x50000c00
 80047bc:	50001000 	.word	0x50001000

080047c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	000a      	movs	r2, r1
 80047ca:	1cbb      	adds	r3, r7, #2
 80047cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	1cba      	adds	r2, r7, #2
 80047d4:	8812      	ldrh	r2, [r2, #0]
 80047d6:	4013      	ands	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80047da:	230f      	movs	r3, #15
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e003      	b.n	80047ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047e4:	230f      	movs	r3, #15
 80047e6:	18fb      	adds	r3, r7, r3
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80047ec:	230f      	movs	r3, #15
 80047ee:	18fb      	adds	r3, r7, r3
 80047f0:	781b      	ldrb	r3, [r3, #0]
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b004      	add	sp, #16
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	0008      	movs	r0, r1
 8004804:	0011      	movs	r1, r2
 8004806:	1cbb      	adds	r3, r7, #2
 8004808:	1c02      	adds	r2, r0, #0
 800480a:	801a      	strh	r2, [r3, #0]
 800480c:	1c7b      	adds	r3, r7, #1
 800480e:	1c0a      	adds	r2, r1, #0
 8004810:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004812:	1c7b      	adds	r3, r7, #1
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800481a:	1cbb      	adds	r3, r7, #2
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004822:	e003      	b.n	800482c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004824:	1cbb      	adds	r3, r7, #2
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800482c:	46c0      	nop			@ (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	000a      	movs	r2, r1
 800483e:	1cbb      	adds	r3, r7, #2
 8004840:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004848:	1cbb      	adds	r3, r7, #2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4013      	ands	r3, r2
 8004850:	041a      	lsls	r2, r3, #16
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	43db      	mvns	r3, r3
 8004856:	1cb9      	adds	r1, r7, #2
 8004858:	8809      	ldrh	r1, [r1, #0]
 800485a:	400b      	ands	r3, r1
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	619a      	str	r2, [r3, #24]
}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b004      	add	sp, #16
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e03d      	b.n	80048fa <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a20      	ldr	r2, [pc, #128]	@ (8004904 <HAL_IWDG_Init+0x98>)
 8004884:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1f      	ldr	r2, [pc, #124]	@ (8004908 <HAL_IWDG_Init+0x9c>)
 800488c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6852      	ldr	r2, [r2, #4]
 8004896:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6892      	ldr	r2, [r2, #8]
 80048a0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80048a2:	f7fe fe33 	bl	800350c <HAL_GetTick>
 80048a6:	0003      	movs	r3, r0
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80048aa:	e00e      	b.n	80048ca <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80048ac:	f7fe fe2e 	bl	800350c <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b31      	cmp	r3, #49	@ 0x31
 80048b8:	d907      	bls.n	80048ca <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2207      	movs	r2, #7
 80048c2:	4013      	ands	r3, r2
 80048c4:	d001      	beq.n	80048ca <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e017      	b.n	80048fa <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2207      	movs	r2, #7
 80048d2:	4013      	ands	r3, r2
 80048d4:	d1ea      	bne.n	80048ac <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d005      	beq.n	80048f0 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68d2      	ldr	r2, [r2, #12]
 80048ec:	611a      	str	r2, [r3, #16]
 80048ee:	e003      	b.n	80048f8 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a05      	ldr	r2, [pc, #20]	@ (800490c <HAL_IWDG_Init+0xa0>)
 80048f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b004      	add	sp, #16
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	0000cccc 	.word	0x0000cccc
 8004908:	00005555 	.word	0x00005555
 800490c:	0000aaaa 	.word	0x0000aaaa

08004910 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a03      	ldr	r2, [pc, #12]	@ (800492c <HAL_IWDG_Refresh+0x1c>)
 800491e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b002      	add	sp, #8
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	0000aaaa 	.word	0x0000aaaa

08004930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004938:	4b19      	ldr	r3, [pc, #100]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a19      	ldr	r2, [pc, #100]	@ (80049a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800493e:	4013      	ands	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	4b17      	ldr	r3, [pc, #92]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	429a      	cmp	r2, r3
 8004952:	d11f      	bne.n	8004994 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004954:	4b14      	ldr	r3, [pc, #80]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	0013      	movs	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	189b      	adds	r3, r3, r2
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	4912      	ldr	r1, [pc, #72]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004962:	0018      	movs	r0, r3
 8004964:	f7fb fbd6 	bl	8000114 <__udivsi3>
 8004968:	0003      	movs	r3, r0
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800496e:	e008      	b.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b01      	subs	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e001      	b.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e009      	b.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004982:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	2380      	movs	r3, #128	@ 0x80
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	401a      	ands	r2, r3
 800498c:	2380      	movs	r3, #128	@ 0x80
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	429a      	cmp	r2, r3
 8004992:	d0ed      	beq.n	8004970 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b004      	add	sp, #16
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	40007000 	.word	0x40007000
 80049a4:	fffff9ff 	.word	0xfffff9ff
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	000f4240 	.word	0x000f4240

080049b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80049b4:	4b03      	ldr	r3, [pc, #12]	@ (80049c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	23e0      	movs	r3, #224	@ 0xe0
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	4013      	ands	r3, r2
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f000 fb50 	bl	800507c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	4013      	ands	r3, r2
 80049e4:	d100      	bne.n	80049e8 <HAL_RCC_OscConfig+0x20>
 80049e6:	e07c      	b.n	8004ae2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e8:	4bc3      	ldr	r3, [pc, #780]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2238      	movs	r2, #56	@ 0x38
 80049ee:	4013      	ands	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f2:	4bc1      	ldr	r3, [pc, #772]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2203      	movs	r2, #3
 80049f8:	4013      	ands	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d102      	bne.n	8004a08 <HAL_RCC_OscConfig+0x40>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d002      	beq.n	8004a0e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d10b      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0e:	4bba      	ldr	r3, [pc, #744]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	4013      	ands	r3, r2
 8004a18:	d062      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x118>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d15e      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e32a      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	2380      	movs	r3, #128	@ 0x80
 8004a2c:	025b      	lsls	r3, r3, #9
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_OscConfig+0x7a>
 8004a32:	4bb1      	ldr	r3, [pc, #708]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4bb0      	ldr	r3, [pc, #704]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a38:	2180      	movs	r1, #128	@ 0x80
 8004a3a:	0249      	lsls	r1, r1, #9
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e020      	b.n	8004a84 <HAL_RCC_OscConfig+0xbc>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	23a0      	movs	r3, #160	@ 0xa0
 8004a48:	02db      	lsls	r3, r3, #11
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d10e      	bne.n	8004a6c <HAL_RCC_OscConfig+0xa4>
 8004a4e:	4baa      	ldr	r3, [pc, #680]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4ba9      	ldr	r3, [pc, #676]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a54:	2180      	movs	r1, #128	@ 0x80
 8004a56:	02c9      	lsls	r1, r1, #11
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	4ba6      	ldr	r3, [pc, #664]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4ba5      	ldr	r3, [pc, #660]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a62:	2180      	movs	r1, #128	@ 0x80
 8004a64:	0249      	lsls	r1, r1, #9
 8004a66:	430a      	orrs	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xbc>
 8004a6c:	4ba2      	ldr	r3, [pc, #648]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4ba1      	ldr	r3, [pc, #644]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a72:	49a2      	ldr	r1, [pc, #648]	@ (8004cfc <HAL_RCC_OscConfig+0x334>)
 8004a74:	400a      	ands	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	4b9f      	ldr	r3, [pc, #636]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b9e      	ldr	r3, [pc, #632]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a7e:	49a0      	ldr	r1, [pc, #640]	@ (8004d00 <HAL_RCC_OscConfig+0x338>)
 8004a80:	400a      	ands	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d014      	beq.n	8004ab6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fe fd3e 	bl	800350c <HAL_GetTick>
 8004a90:	0003      	movs	r3, r0
 8004a92:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a96:	f7fe fd39 	bl	800350c <HAL_GetTick>
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b64      	cmp	r3, #100	@ 0x64
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e2e9      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa8:	4b93      	ldr	r3, [pc, #588]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	2380      	movs	r3, #128	@ 0x80
 8004aae:	029b      	lsls	r3, r3, #10
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0xce>
 8004ab4:	e015      	b.n	8004ae2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fe fd29 	bl	800350c <HAL_GetTick>
 8004aba:	0003      	movs	r3, r0
 8004abc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac0:	f7fe fd24 	bl	800350c <HAL_GetTick>
 8004ac4:	0002      	movs	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	@ 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e2d4      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad2:	4b89      	ldr	r3, [pc, #548]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	2380      	movs	r3, #128	@ 0x80
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	4013      	ands	r3, r2
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0xf8>
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d100      	bne.n	8004aee <HAL_RCC_OscConfig+0x126>
 8004aec:	e099      	b.n	8004c22 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aee:	4b82      	ldr	r3, [pc, #520]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2238      	movs	r2, #56	@ 0x38
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af8:	4b7f      	ldr	r3, [pc, #508]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2203      	movs	r2, #3
 8004afe:	4013      	ands	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d102      	bne.n	8004b0e <HAL_RCC_OscConfig+0x146>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d002      	beq.n	8004b14 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d135      	bne.n	8004b80 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b14:	4b78      	ldr	r3, [pc, #480]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	2380      	movs	r3, #128	@ 0x80
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_OscConfig+0x164>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e2a7      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b72      	ldr	r3, [pc, #456]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4a74      	ldr	r2, [pc, #464]	@ (8004d04 <HAL_RCC_OscConfig+0x33c>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	4b6e      	ldr	r3, [pc, #440]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b48:	4b6b      	ldr	r3, [pc, #428]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004d08 <HAL_RCC_OscConfig+0x340>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	0019      	movs	r1, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	4b68      	ldr	r3, [pc, #416]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b5c:	4b66      	ldr	r3, [pc, #408]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	0adb      	lsrs	r3, r3, #11
 8004b62:	2207      	movs	r2, #7
 8004b64:	4013      	ands	r3, r2
 8004b66:	4a69      	ldr	r2, [pc, #420]	@ (8004d0c <HAL_RCC_OscConfig+0x344>)
 8004b68:	40da      	lsrs	r2, r3
 8004b6a:	4b69      	ldr	r3, [pc, #420]	@ (8004d10 <HAL_RCC_OscConfig+0x348>)
 8004b6c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b6e:	4b69      	ldr	r3, [pc, #420]	@ (8004d14 <HAL_RCC_OscConfig+0x34c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7fe fc6e 	bl	8003454 <HAL_InitTick>
 8004b78:	1e03      	subs	r3, r0, #0
 8004b7a:	d051      	beq.n	8004c20 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e27d      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d030      	beq.n	8004bea <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b88:	4b5b      	ldr	r3, [pc, #364]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a5e      	ldr	r2, [pc, #376]	@ (8004d08 <HAL_RCC_OscConfig+0x340>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	0019      	movs	r1, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	4b58      	ldr	r3, [pc, #352]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004b9c:	4b56      	ldr	r3, [pc, #344]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b55      	ldr	r3, [pc, #340]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004ba2:	2180      	movs	r1, #128	@ 0x80
 8004ba4:	0049      	lsls	r1, r1, #1
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fe fcaf 	bl	800350c <HAL_GetTick>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7fe fcaa 	bl	800350c <HAL_GetTick>
 8004bb8:	0002      	movs	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e25a      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	2380      	movs	r3, #128	@ 0x80
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd2:	4b49      	ldr	r3, [pc, #292]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4a4b      	ldr	r2, [pc, #300]	@ (8004d04 <HAL_RCC_OscConfig+0x33c>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	021a      	lsls	r2, r3, #8
 8004be2:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004be4:	430a      	orrs	r2, r1
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	e01b      	b.n	8004c22 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004bea:	4b43      	ldr	r3, [pc, #268]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004bf0:	4949      	ldr	r1, [pc, #292]	@ (8004d18 <HAL_RCC_OscConfig+0x350>)
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fe fc89 	bl	800350c <HAL_GetTick>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c00:	f7fe fc84 	bl	800350c <HAL_GetTick>
 8004c04:	0002      	movs	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e234      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c12:	4b39      	ldr	r3, [pc, #228]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	2380      	movs	r3, #128	@ 0x80
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x238>
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c20:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2208      	movs	r2, #8
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d047      	beq.n	8004cbc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c2c:	4b32      	ldr	r3, [pc, #200]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2238      	movs	r2, #56	@ 0x38
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b18      	cmp	r3, #24
 8004c36:	d10a      	bne.n	8004c4e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004c38:	4b2f      	ldr	r3, [pc, #188]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d03c      	beq.n	8004cbc <HAL_RCC_OscConfig+0x2f4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d138      	bne.n	8004cbc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e216      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d019      	beq.n	8004c8a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c56:	4b28      	ldr	r3, [pc, #160]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004c58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c5a:	4b27      	ldr	r3, [pc, #156]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fe fc53 	bl	800350c <HAL_GetTick>
 8004c66:	0003      	movs	r3, r0
 8004c68:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6c:	f7fe fc4e 	bl	800350c <HAL_GetTick>
 8004c70:	0002      	movs	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e1fe      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c82:	2202      	movs	r2, #2
 8004c84:	4013      	ands	r3, r2
 8004c86:	d0f1      	beq.n	8004c6c <HAL_RCC_OscConfig+0x2a4>
 8004c88:	e018      	b.n	8004cbc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004c8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004c90:	2101      	movs	r1, #1
 8004c92:	438a      	bics	r2, r1
 8004c94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c96:	f7fe fc39 	bl	800350c <HAL_GetTick>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca0:	f7fe fc34 	bl	800350c <HAL_GetTick>
 8004ca4:	0002      	movs	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e1e4      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb2:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d1f1      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d100      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x300>
 8004cc6:	e0c7      	b.n	8004e58 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc8:	231f      	movs	r3, #31
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004cd0:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2238      	movs	r2, #56	@ 0x38
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d11f      	bne.n	8004d1c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004cdc:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d100      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x320>
 8004ce6:	e0b7      	b.n	8004e58 <HAL_RCC_OscConfig+0x490>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d000      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x32a>
 8004cf0:	e0b2      	b.n	8004e58 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e1c2      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	fffeffff 	.word	0xfffeffff
 8004d00:	fffbffff 	.word	0xfffbffff
 8004d04:	ffff80ff 	.word	0xffff80ff
 8004d08:	ffffc7ff 	.word	0xffffc7ff
 8004d0c:	00f42400 	.word	0x00f42400
 8004d10:	2000000c 	.word	0x2000000c
 8004d14:	20000010 	.word	0x20000010
 8004d18:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d1c:	4bb5      	ldr	r3, [pc, #724]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004d1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	055b      	lsls	r3, r3, #21
 8004d24:	4013      	ands	r3, r2
 8004d26:	d101      	bne.n	8004d2c <HAL_RCC_OscConfig+0x364>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x366>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d011      	beq.n	8004d56 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4bb0      	ldr	r3, [pc, #704]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d36:	4baf      	ldr	r3, [pc, #700]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004d38:	2180      	movs	r1, #128	@ 0x80
 8004d3a:	0549      	lsls	r1, r1, #21
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d40:	4bac      	ldr	r3, [pc, #688]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d44:	2380      	movs	r3, #128	@ 0x80
 8004d46:	055b      	lsls	r3, r3, #21
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004d4e:	231f      	movs	r3, #31
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	2201      	movs	r2, #1
 8004d54:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d56:	4ba8      	ldr	r3, [pc, #672]	@ (8004ff8 <HAL_RCC_OscConfig+0x630>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d11a      	bne.n	8004d98 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d62:	4ba5      	ldr	r3, [pc, #660]	@ (8004ff8 <HAL_RCC_OscConfig+0x630>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4ba4      	ldr	r3, [pc, #656]	@ (8004ff8 <HAL_RCC_OscConfig+0x630>)
 8004d68:	2180      	movs	r1, #128	@ 0x80
 8004d6a:	0049      	lsls	r1, r1, #1
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004d70:	f7fe fbcc 	bl	800350c <HAL_GetTick>
 8004d74:	0003      	movs	r3, r0
 8004d76:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7a:	f7fe fbc7 	bl	800350c <HAL_GetTick>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e177      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d8c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ff8 <HAL_RCC_OscConfig+0x630>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2380      	movs	r3, #128	@ 0x80
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4013      	ands	r3, r2
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d106      	bne.n	8004dae <HAL_RCC_OscConfig+0x3e6>
 8004da0:	4b94      	ldr	r3, [pc, #592]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004da2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004da4:	4b93      	ldr	r3, [pc, #588]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004da6:	2101      	movs	r1, #1
 8004da8:	430a      	orrs	r2, r1
 8004daa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dac:	e01c      	b.n	8004de8 <HAL_RCC_OscConfig+0x420>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x408>
 8004db6:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004db8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dba:	4b8e      	ldr	r3, [pc, #568]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004dbc:	2104      	movs	r1, #4
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dc2:	4b8c      	ldr	r3, [pc, #560]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dc6:	4b8b      	ldr	r3, [pc, #556]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004dc8:	2101      	movs	r1, #1
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dce:	e00b      	b.n	8004de8 <HAL_RCC_OscConfig+0x420>
 8004dd0:	4b88      	ldr	r3, [pc, #544]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004dd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dd4:	4b87      	ldr	r3, [pc, #540]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	438a      	bics	r2, r1
 8004dda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ddc:	4b85      	ldr	r3, [pc, #532]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004dde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004de0:	4b84      	ldr	r3, [pc, #528]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004de2:	2104      	movs	r1, #4
 8004de4:	438a      	bics	r2, r1
 8004de6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d014      	beq.n	8004e1a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fe fb8c 	bl	800350c <HAL_GetTick>
 8004df4:	0003      	movs	r3, r0
 8004df6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df8:	e009      	b.n	8004e0e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfa:	f7fe fb87 	bl	800350c <HAL_GetTick>
 8004dfe:	0002      	movs	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	4a7d      	ldr	r2, [pc, #500]	@ (8004ffc <HAL_RCC_OscConfig+0x634>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e136      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0e:	4b79      	ldr	r3, [pc, #484]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e12:	2202      	movs	r2, #2
 8004e14:	4013      	ands	r3, r2
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x432>
 8004e18:	e013      	b.n	8004e42 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fe fb77 	bl	800350c <HAL_GetTick>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e22:	e009      	b.n	8004e38 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e24:	f7fe fb72 	bl	800350c <HAL_GetTick>
 8004e28:	0002      	movs	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	4a73      	ldr	r2, [pc, #460]	@ (8004ffc <HAL_RCC_OscConfig+0x634>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e121      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e38:	4b6e      	ldr	r3, [pc, #440]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e42:	231f      	movs	r3, #31
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e4c:	4b69      	ldr	r3, [pc, #420]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e50:	4b68      	ldr	r3, [pc, #416]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004e52:	496b      	ldr	r1, [pc, #428]	@ (8005000 <HAL_RCC_OscConfig+0x638>)
 8004e54:	400a      	ands	r2, r1
 8004e56:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d039      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01b      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e6a:	4b62      	ldr	r3, [pc, #392]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b61      	ldr	r3, [pc, #388]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004e70:	2180      	movs	r1, #128	@ 0x80
 8004e72:	03c9      	lsls	r1, r1, #15
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fe fb48 	bl	800350c <HAL_GetTick>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e82:	f7fe fb43 	bl	800350c <HAL_GetTick>
 8004e86:	0002      	movs	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e0f3      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004e94:	4b57      	ldr	r3, [pc, #348]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2380      	movs	r3, #128	@ 0x80
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCC_OscConfig+0x4ba>
 8004ea0:	e019      	b.n	8004ed6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea2:	4b54      	ldr	r3, [pc, #336]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b53      	ldr	r3, [pc, #332]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004ea8:	4956      	ldr	r1, [pc, #344]	@ (8005004 <HAL_RCC_OscConfig+0x63c>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fe fb2d 	bl	800350c <HAL_GetTick>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eb8:	f7fe fb28 	bl	800350c <HAL_GetTick>
 8004ebc:	0002      	movs	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e0d8      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004eca:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	2380      	movs	r3, #128	@ 0x80
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d100      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x518>
 8004ede:	e0cc      	b.n	800507a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ee0:	4b44      	ldr	r3, [pc, #272]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2238      	movs	r2, #56	@ 0x38
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d100      	bne.n	8004eee <HAL_RCC_OscConfig+0x526>
 8004eec:	e07b      	b.n	8004fe6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d156      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004efc:	4942      	ldr	r1, [pc, #264]	@ (8005008 <HAL_RCC_OscConfig+0x640>)
 8004efe:	400a      	ands	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f02:	f7fe fb03 	bl	800350c <HAL_GetTick>
 8004f06:	0003      	movs	r3, r0
 8004f08:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fe fafe 	bl	800350c <HAL_GetTick>
 8004f10:	0002      	movs	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e0ae      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1e:	4b35      	ldr	r3, [pc, #212]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	2380      	movs	r3, #128	@ 0x80
 8004f24:	049b      	lsls	r3, r3, #18
 8004f26:	4013      	ands	r3, r2
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f2a:	4b32      	ldr	r3, [pc, #200]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	4a37      	ldr	r2, [pc, #220]	@ (800500c <HAL_RCC_OscConfig+0x644>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	0019      	movs	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	431a      	orrs	r2, r3
 8004f58:	4b26      	ldr	r3, [pc, #152]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f5e:	4b25      	ldr	r3, [pc, #148]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b24      	ldr	r3, [pc, #144]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004f64:	2180      	movs	r1, #128	@ 0x80
 8004f66:	0449      	lsls	r1, r1, #17
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004f6c:	4b21      	ldr	r3, [pc, #132]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	4b20      	ldr	r3, [pc, #128]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004f72:	2180      	movs	r1, #128	@ 0x80
 8004f74:	0549      	lsls	r1, r1, #21
 8004f76:	430a      	orrs	r2, r1
 8004f78:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7a:	f7fe fac7 	bl	800350c <HAL_GetTick>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fe fac2 	bl	800350c <HAL_GetTick>
 8004f88:	0002      	movs	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e072      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f96:	4b17      	ldr	r3, [pc, #92]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	2380      	movs	r3, #128	@ 0x80
 8004f9c:	049b      	lsls	r3, r3, #18
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x5bc>
 8004fa2:	e06a      	b.n	800507a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa4:	4b13      	ldr	r3, [pc, #76]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b12      	ldr	r3, [pc, #72]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004faa:	4917      	ldr	r1, [pc, #92]	@ (8005008 <HAL_RCC_OscConfig+0x640>)
 8004fac:	400a      	ands	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fe faac 	bl	800350c <HAL_GetTick>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fba:	f7fe faa7 	bl	800350c <HAL_GetTick>
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e057      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fcc:	4b09      	ldr	r3, [pc, #36]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	2380      	movs	r3, #128	@ 0x80
 8004fd2:	049b      	lsls	r3, r3, #18
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d1f0      	bne.n	8004fba <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004fd8:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_RCC_OscConfig+0x62c>)
 8004fde:	490c      	ldr	r1, [pc, #48]	@ (8005010 <HAL_RCC_OscConfig+0x648>)
 8004fe0:	400a      	ands	r2, r1
 8004fe2:	60da      	str	r2, [r3, #12]
 8004fe4:	e049      	b.n	800507a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d112      	bne.n	8005014 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e044      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	00001388 	.word	0x00001388
 8005000:	efffffff 	.word	0xefffffff
 8005004:	ffbfffff 	.word	0xffbfffff
 8005008:	feffffff 	.word	0xfeffffff
 800500c:	11c1808c 	.word	0x11c1808c
 8005010:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005014:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <HAL_RCC_OscConfig+0x6bc>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2203      	movs	r2, #3
 800501e:	401a      	ands	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	429a      	cmp	r2, r3
 8005026:	d126      	bne.n	8005076 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2270      	movs	r2, #112	@ 0x70
 800502c:	401a      	ands	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d11f      	bne.n	8005076 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	23fe      	movs	r3, #254	@ 0xfe
 800503a:	01db      	lsls	r3, r3, #7
 800503c:	401a      	ands	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d116      	bne.n	8005076 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	23f8      	movs	r3, #248	@ 0xf8
 800504c:	039b      	lsls	r3, r3, #14
 800504e:	401a      	ands	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d10e      	bne.n	8005076 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	23e0      	movs	r3, #224	@ 0xe0
 800505c:	051b      	lsls	r3, r3, #20
 800505e:	401a      	ands	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d106      	bne.n	8005076 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	0f5b      	lsrs	r3, r3, #29
 800506c:	075a      	lsls	r2, r3, #29
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d001      	beq.n	800507a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	0018      	movs	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	b008      	add	sp, #32
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40021000 	.word	0x40021000

08005088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0e9      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800509c:	4b76      	ldr	r3, [pc, #472]	@ (8005278 <HAL_RCC_ClockConfig+0x1f0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2207      	movs	r2, #7
 80050a2:	4013      	ands	r3, r2
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d91e      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b73      	ldr	r3, [pc, #460]	@ (8005278 <HAL_RCC_ClockConfig+0x1f0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2207      	movs	r2, #7
 80050b0:	4393      	bics	r3, r2
 80050b2:	0019      	movs	r1, r3
 80050b4:	4b70      	ldr	r3, [pc, #448]	@ (8005278 <HAL_RCC_ClockConfig+0x1f0>)
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050bc:	f7fe fa26 	bl	800350c <HAL_GetTick>
 80050c0:	0003      	movs	r3, r0
 80050c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050c4:	e009      	b.n	80050da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c6:	f7fe fa21 	bl	800350c <HAL_GetTick>
 80050ca:	0002      	movs	r2, r0
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	4a6a      	ldr	r2, [pc, #424]	@ (800527c <HAL_RCC_ClockConfig+0x1f4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e0ca      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050da:	4b67      	ldr	r3, [pc, #412]	@ (8005278 <HAL_RCC_ClockConfig+0x1f0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2207      	movs	r2, #7
 80050e0:	4013      	ands	r3, r2
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d1ee      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2202      	movs	r2, #2
 80050ee:	4013      	ands	r3, r2
 80050f0:	d015      	beq.n	800511e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2204      	movs	r2, #4
 80050f8:	4013      	ands	r3, r2
 80050fa:	d006      	beq.n	800510a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050fc:	4b60      	ldr	r3, [pc, #384]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4b5f      	ldr	r3, [pc, #380]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 8005102:	21e0      	movs	r1, #224	@ 0xe0
 8005104:	01c9      	lsls	r1, r1, #7
 8005106:	430a      	orrs	r2, r1
 8005108:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510a:	4b5d      	ldr	r3, [pc, #372]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	4a5d      	ldr	r2, [pc, #372]	@ (8005284 <HAL_RCC_ClockConfig+0x1fc>)
 8005110:	4013      	ands	r3, r2
 8005112:	0019      	movs	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	4b59      	ldr	r3, [pc, #356]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2201      	movs	r2, #1
 8005124:	4013      	ands	r3, r2
 8005126:	d057      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005130:	4b53      	ldr	r3, [pc, #332]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	2380      	movs	r3, #128	@ 0x80
 8005136:	029b      	lsls	r3, r3, #10
 8005138:	4013      	ands	r3, r2
 800513a:	d12b      	bne.n	8005194 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e097      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d107      	bne.n	8005158 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005148:	4b4d      	ldr	r3, [pc, #308]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	2380      	movs	r3, #128	@ 0x80
 800514e:	049b      	lsls	r3, r3, #18
 8005150:	4013      	ands	r3, r2
 8005152:	d11f      	bne.n	8005194 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e08b      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d107      	bne.n	8005170 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005160:	4b47      	ldr	r3, [pc, #284]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4013      	ands	r3, r2
 800516a:	d113      	bne.n	8005194 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e07f      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d106      	bne.n	8005186 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005178:	4b41      	ldr	r3, [pc, #260]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 800517a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800517c:	2202      	movs	r2, #2
 800517e:	4013      	ands	r3, r2
 8005180:	d108      	bne.n	8005194 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e074      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005186:	4b3e      	ldr	r3, [pc, #248]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 8005188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518a:	2202      	movs	r2, #2
 800518c:	4013      	ands	r3, r2
 800518e:	d101      	bne.n	8005194 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e06d      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005194:	4b3a      	ldr	r3, [pc, #232]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2207      	movs	r2, #7
 800519a:	4393      	bics	r3, r2
 800519c:	0019      	movs	r1, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	4b37      	ldr	r3, [pc, #220]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 80051a4:	430a      	orrs	r2, r1
 80051a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a8:	f7fe f9b0 	bl	800350c <HAL_GetTick>
 80051ac:	0003      	movs	r3, r0
 80051ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b0:	e009      	b.n	80051c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b2:	f7fe f9ab 	bl	800350c <HAL_GetTick>
 80051b6:	0002      	movs	r2, r0
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	4a2f      	ldr	r2, [pc, #188]	@ (800527c <HAL_RCC_ClockConfig+0x1f4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e054      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2238      	movs	r2, #56	@ 0x38
 80051cc:	401a      	ands	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d1ec      	bne.n	80051b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051d8:	4b27      	ldr	r3, [pc, #156]	@ (8005278 <HAL_RCC_ClockConfig+0x1f0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2207      	movs	r2, #7
 80051de:	4013      	ands	r3, r2
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d21e      	bcs.n	8005224 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	4b24      	ldr	r3, [pc, #144]	@ (8005278 <HAL_RCC_ClockConfig+0x1f0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2207      	movs	r2, #7
 80051ec:	4393      	bics	r3, r2
 80051ee:	0019      	movs	r1, r3
 80051f0:	4b21      	ldr	r3, [pc, #132]	@ (8005278 <HAL_RCC_ClockConfig+0x1f0>)
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051f8:	f7fe f988 	bl	800350c <HAL_GetTick>
 80051fc:	0003      	movs	r3, r0
 80051fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005200:	e009      	b.n	8005216 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005202:	f7fe f983 	bl	800350c <HAL_GetTick>
 8005206:	0002      	movs	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <HAL_RCC_ClockConfig+0x1f4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e02c      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005216:	4b18      	ldr	r3, [pc, #96]	@ (8005278 <HAL_RCC_ClockConfig+0x1f0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2207      	movs	r2, #7
 800521c:	4013      	ands	r3, r2
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d1ee      	bne.n	8005202 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2204      	movs	r2, #4
 800522a:	4013      	ands	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800522e:	4b14      	ldr	r3, [pc, #80]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	4a15      	ldr	r2, [pc, #84]	@ (8005288 <HAL_RCC_ClockConfig+0x200>)
 8005234:	4013      	ands	r3, r2
 8005236:	0019      	movs	r1, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005242:	f000 f88d 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 8005246:	0001      	movs	r1, r0
 8005248:	4b0d      	ldr	r3, [pc, #52]	@ (8005280 <HAL_RCC_ClockConfig+0x1f8>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	220f      	movs	r2, #15
 8005250:	401a      	ands	r2, r3
 8005252:	4b0e      	ldr	r3, [pc, #56]	@ (800528c <HAL_RCC_ClockConfig+0x204>)
 8005254:	0092      	lsls	r2, r2, #2
 8005256:	58d3      	ldr	r3, [r2, r3]
 8005258:	221f      	movs	r2, #31
 800525a:	4013      	ands	r3, r2
 800525c:	000a      	movs	r2, r1
 800525e:	40da      	lsrs	r2, r3
 8005260:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <HAL_RCC_ClockConfig+0x208>)
 8005262:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005264:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <HAL_RCC_ClockConfig+0x20c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	0018      	movs	r0, r3
 800526a:	f7fe f8f3 	bl	8003454 <HAL_InitTick>
 800526e:	0003      	movs	r3, r0
}
 8005270:	0018      	movs	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	b004      	add	sp, #16
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40022000 	.word	0x40022000
 800527c:	00001388 	.word	0x00001388
 8005280:	40021000 	.word	0x40021000
 8005284:	fffff0ff 	.word	0xfffff0ff
 8005288:	ffff8fff 	.word	0xffff8fff
 800528c:	08009140 	.word	0x08009140
 8005290:	2000000c 	.word	0x2000000c
 8005294:	20000010 	.word	0x20000010

08005298 <HAL_RCC_MCOConfig>:
  *
  * (*) Feature not available on all devices of the family
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	@ 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80052a4:	2010      	movs	r0, #16
 80052a6:	183b      	adds	r3, r7, r0
 80052a8:	2202      	movs	r2, #2
 80052aa:	605a      	str	r2, [r3, #4]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ac:	183b      	adds	r3, r7, r0
 80052ae:	2203      	movs	r2, #3
 80052b0:	60da      	str	r2, [r3, #12]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80052b2:	183b      	adds	r3, r7, r0
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	2380      	movs	r3, #128	@ 0x80
 80052bc:	055b      	lsls	r3, r3, #21
 80052be:	4013      	ands	r3, r2
 80052c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	220f      	movs	r2, #15
 80052c8:	4013      	ands	r3, r2
 80052ca:	22a0      	movs	r2, #160	@ 0xa0
 80052cc:	0352      	lsls	r2, r2, #13
 80052ce:	4694      	mov	ip, r2
 80052d0:	4463      	add	r3, ip
 80052d2:	029b      	lsls	r3, r3, #10
 80052d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	220f      	movs	r2, #15
 80052dc:	4013      	ands	r3, r2
 80052de:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->IOPENR, (1UL << mco_gpio_index ));
 80052e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005358 <HAL_RCC_MCOConfig+0xc0>)
 80052e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80052e4:	2201      	movs	r2, #1
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	409a      	lsls	r2, r3
 80052ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005358 <HAL_RCC_MCOConfig+0xc0>)
 80052ec:	430a      	orrs	r2, r1
 80052ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	0c1a      	lsrs	r2, r3, #16
 80052f6:	183b      	adds	r3, r7, r0
 80052f8:	601a      	str	r2, [r3, #0]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	0d1b      	lsrs	r3, r3, #20
 80052fe:	22ff      	movs	r2, #255	@ 0xff
 8005300:	401a      	ands	r2, r3
 8005302:	183b      	adds	r3, r7, r0
 8005304:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8005306:	183a      	adds	r2, r7, r0
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	0011      	movs	r1, r2
 800530c:	0018      	movs	r0, r3
 800530e:	f7ff f8eb 	bl	80044e8 <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <HAL_RCC_MCOConfig+0x96>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8005318:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <HAL_RCC_MCOConfig+0xc0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	0a19      	lsrs	r1, r3, #8
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	431a      	orrs	r2, r3
 8005326:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <HAL_RCC_MCOConfig+0xc0>)
 8005328:	430a      	orrs	r2, r1
 800532a:	609a      	str	r2, [r3, #8]
#endif /* RCC_MCO2_SUPPORT */
  else
  {
    /* Nothing to do */
  }
}
 800532c:	e00f      	b.n	800534e <HAL_RCC_MCOConfig+0xb6>
  else if (mcoindex == RCC_MCO2_INDEX)
 800532e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005330:	2380      	movs	r3, #128	@ 0x80
 8005332:	055b      	lsls	r3, r3, #21
 8005334:	429a      	cmp	r2, r3
 8005336:	d10a      	bne.n	800534e <HAL_RCC_MCOConfig+0xb6>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2SEL | RCC_CFGR_MCO2PRE), (RCC_MCOSource | RCC_MCODiv));
 8005338:	4b07      	ldr	r3, [pc, #28]	@ (8005358 <HAL_RCC_MCOConfig+0xc0>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	4a07      	ldr	r2, [pc, #28]	@ (800535c <HAL_RCC_MCOConfig+0xc4>)
 800533e:	4013      	ands	r3, r2
 8005340:	0019      	movs	r1, r3
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	431a      	orrs	r2, r3
 8005348:	4b03      	ldr	r3, [pc, #12]	@ (8005358 <HAL_RCC_MCOConfig+0xc0>)
 800534a:	430a      	orrs	r2, r1
 800534c:	609a      	str	r2, [r3, #8]
}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	46bd      	mov	sp, r7
 8005352:	b00c      	add	sp, #48	@ 0x30
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			@ (mov r8, r8)
 8005358:	40021000 	.word	0x40021000
 800535c:	ff00ffff 	.word	0xff00ffff

08005360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005366:	4b3c      	ldr	r3, [pc, #240]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2238      	movs	r2, #56	@ 0x38
 800536c:	4013      	ands	r3, r2
 800536e:	d10f      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005370:	4b39      	ldr	r3, [pc, #228]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	0adb      	lsrs	r3, r3, #11
 8005376:	2207      	movs	r2, #7
 8005378:	4013      	ands	r3, r2
 800537a:	2201      	movs	r2, #1
 800537c:	409a      	lsls	r2, r3
 800537e:	0013      	movs	r3, r2
 8005380:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	4835      	ldr	r0, [pc, #212]	@ (800545c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005386:	f7fa fec5 	bl	8000114 <__udivsi3>
 800538a:	0003      	movs	r3, r0
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e05d      	b.n	800544c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005390:	4b31      	ldr	r3, [pc, #196]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2238      	movs	r2, #56	@ 0x38
 8005396:	4013      	ands	r3, r2
 8005398:	2b08      	cmp	r3, #8
 800539a:	d102      	bne.n	80053a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800539c:	4b30      	ldr	r3, [pc, #192]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x100>)
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	e054      	b.n	800544c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2238      	movs	r2, #56	@ 0x38
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d138      	bne.n	8005420 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80053ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2203      	movs	r2, #3
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053b8:	4b27      	ldr	r3, [pc, #156]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	2207      	movs	r2, #7
 80053c0:	4013      	ands	r3, r2
 80053c2:	3301      	adds	r3, #1
 80053c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d10d      	bne.n	80053e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	4824      	ldr	r0, [pc, #144]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x100>)
 80053d0:	f7fa fea0 	bl	8000114 <__udivsi3>
 80053d4:	0003      	movs	r3, r0
 80053d6:	0019      	movs	r1, r3
 80053d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	0a1b      	lsrs	r3, r3, #8
 80053de:	227f      	movs	r2, #127	@ 0x7f
 80053e0:	4013      	ands	r3, r2
 80053e2:	434b      	muls	r3, r1
 80053e4:	617b      	str	r3, [r7, #20]
        break;
 80053e6:	e00d      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	481c      	ldr	r0, [pc, #112]	@ (800545c <HAL_RCC_GetSysClockFreq+0xfc>)
 80053ec:	f7fa fe92 	bl	8000114 <__udivsi3>
 80053f0:	0003      	movs	r3, r0
 80053f2:	0019      	movs	r1, r3
 80053f4:	4b18      	ldr	r3, [pc, #96]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	227f      	movs	r2, #127	@ 0x7f
 80053fc:	4013      	ands	r3, r2
 80053fe:	434b      	muls	r3, r1
 8005400:	617b      	str	r3, [r7, #20]
        break;
 8005402:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005404:	4b14      	ldr	r3, [pc, #80]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	0f5b      	lsrs	r3, r3, #29
 800540a:	2207      	movs	r2, #7
 800540c:	4013      	ands	r3, r2
 800540e:	3301      	adds	r3, #1
 8005410:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	6978      	ldr	r0, [r7, #20]
 8005416:	f7fa fe7d 	bl	8000114 <__udivsi3>
 800541a:	0003      	movs	r3, r0
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	e015      	b.n	800544c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005420:	4b0d      	ldr	r3, [pc, #52]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2238      	movs	r2, #56	@ 0x38
 8005426:	4013      	ands	r3, r2
 8005428:	2b20      	cmp	r3, #32
 800542a:	d103      	bne.n	8005434 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e00b      	b.n	800544c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005434:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2238      	movs	r2, #56	@ 0x38
 800543a:	4013      	ands	r3, r2
 800543c:	2b18      	cmp	r3, #24
 800543e:	d103      	bne.n	8005448 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005440:	23fa      	movs	r3, #250	@ 0xfa
 8005442:	01db      	lsls	r3, r3, #7
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	e001      	b.n	800544c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800544c:	693b      	ldr	r3, [r7, #16]
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b006      	add	sp, #24
 8005454:	bd80      	pop	{r7, pc}
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	40021000 	.word	0x40021000
 800545c:	00f42400 	.word	0x00f42400
 8005460:	007a1200 	.word	0x007a1200

08005464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005468:	4b02      	ldr	r3, [pc, #8]	@ (8005474 <HAL_RCC_GetHCLKFreq+0x10>)
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	2000000c 	.word	0x2000000c

08005478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800547c:	f7ff fff2 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 8005480:	0004      	movs	r4, r0
 8005482:	f7ff fa95 	bl	80049b0 <LL_RCC_GetAPB1Prescaler>
 8005486:	0003      	movs	r3, r0
 8005488:	0b1a      	lsrs	r2, r3, #12
 800548a:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800548c:	0092      	lsls	r2, r2, #2
 800548e:	58d3      	ldr	r3, [r2, r3]
 8005490:	221f      	movs	r2, #31
 8005492:	4013      	ands	r3, r2
 8005494:	40dc      	lsrs	r4, r3
 8005496:	0023      	movs	r3, r4
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	bdb0      	pop	{r4, r5, r7, pc}
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	08009180 	.word	0x08009180

080054a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80054ac:	2313      	movs	r3, #19
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054b4:	2312      	movs	r3, #18
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	2380      	movs	r3, #128	@ 0x80
 80054c2:	029b      	lsls	r3, r3, #10
 80054c4:	4013      	ands	r3, r2
 80054c6:	d100      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x26>
 80054c8:	e0ad      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ca:	2011      	movs	r0, #17
 80054cc:	183b      	adds	r3, r7, r0
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d2:	4b47      	ldr	r3, [pc, #284]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80054d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054d6:	2380      	movs	r3, #128	@ 0x80
 80054d8:	055b      	lsls	r3, r3, #21
 80054da:	4013      	ands	r3, r2
 80054dc:	d110      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054de:	4b44      	ldr	r3, [pc, #272]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80054e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054e2:	4b43      	ldr	r3, [pc, #268]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80054e4:	2180      	movs	r1, #128	@ 0x80
 80054e6:	0549      	lsls	r1, r1, #21
 80054e8:	430a      	orrs	r2, r1
 80054ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80054ec:	4b40      	ldr	r3, [pc, #256]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80054ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054f0:	2380      	movs	r3, #128	@ 0x80
 80054f2:	055b      	lsls	r3, r3, #21
 80054f4:	4013      	ands	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fa:	183b      	adds	r3, r7, r0
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005500:	4b3c      	ldr	r3, [pc, #240]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b3b      	ldr	r3, [pc, #236]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005506:	2180      	movs	r1, #128	@ 0x80
 8005508:	0049      	lsls	r1, r1, #1
 800550a:	430a      	orrs	r2, r1
 800550c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800550e:	f7fd fffd 	bl	800350c <HAL_GetTick>
 8005512:	0003      	movs	r3, r0
 8005514:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005516:	e00b      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005518:	f7fd fff8 	bl	800350c <HAL_GetTick>
 800551c:	0002      	movs	r2, r0
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d904      	bls.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005526:	2313      	movs	r3, #19
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2203      	movs	r2, #3
 800552c:	701a      	strb	r2, [r3, #0]
        break;
 800552e:	e005      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005530:	4b30      	ldr	r3, [pc, #192]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	2380      	movs	r3, #128	@ 0x80
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4013      	ands	r3, r2
 800553a:	d0ed      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800553c:	2313      	movs	r3, #19
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d15e      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005546:	4b2a      	ldr	r3, [pc, #168]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005548:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800554a:	23c0      	movs	r3, #192	@ 0xc0
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4013      	ands	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d019      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	429a      	cmp	r2, r3
 8005560:	d014      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005562:	4b23      	ldr	r3, [pc, #140]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005566:	4a24      	ldr	r2, [pc, #144]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005568:	4013      	ands	r3, r2
 800556a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800556c:	4b20      	ldr	r3, [pc, #128]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800556e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005570:	4b1f      	ldr	r3, [pc, #124]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005572:	2180      	movs	r1, #128	@ 0x80
 8005574:	0249      	lsls	r1, r1, #9
 8005576:	430a      	orrs	r2, r1
 8005578:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800557a:	4b1d      	ldr	r3, [pc, #116]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800557c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800557e:	4b1c      	ldr	r3, [pc, #112]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005580:	491e      	ldr	r1, [pc, #120]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005582:	400a      	ands	r2, r1
 8005584:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005586:	4b1a      	ldr	r3, [pc, #104]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2201      	movs	r2, #1
 8005590:	4013      	ands	r3, r2
 8005592:	d016      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fd ffba 	bl	800350c <HAL_GetTick>
 8005598:	0003      	movs	r3, r0
 800559a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800559c:	e00c      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559e:	f7fd ffb5 	bl	800350c <HAL_GetTick>
 80055a2:	0002      	movs	r2, r0
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	4a15      	ldr	r2, [pc, #84]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d904      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80055ae:	2313      	movs	r3, #19
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	2203      	movs	r2, #3
 80055b4:	701a      	strb	r2, [r3, #0]
            break;
 80055b6:	e004      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b8:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055bc:	2202      	movs	r2, #2
 80055be:	4013      	ands	r3, r2
 80055c0:	d0ed      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80055c2:	2313      	movs	r3, #19
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055cc:	4b08      	ldr	r3, [pc, #32]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d0:	4a09      	ldr	r2, [pc, #36]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	0019      	movs	r1, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055da:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055dc:	430a      	orrs	r2, r1
 80055de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055e0:	e016      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055e2:	2312      	movs	r3, #18
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	2213      	movs	r2, #19
 80055e8:	18ba      	adds	r2, r7, r2
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e00f      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80055f0:	40021000 	.word	0x40021000
 80055f4:	40007000 	.word	0x40007000
 80055f8:	fffffcff 	.word	0xfffffcff
 80055fc:	fffeffff 	.word	0xfffeffff
 8005600:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	2312      	movs	r3, #18
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	2213      	movs	r2, #19
 800560a:	18ba      	adds	r2, r7, r2
 800560c:	7812      	ldrb	r2, [r2, #0]
 800560e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005610:	2311      	movs	r3, #17
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561a:	4bb6      	ldr	r3, [pc, #728]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800561c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800561e:	4bb5      	ldr	r3, [pc, #724]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005620:	49b5      	ldr	r1, [pc, #724]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005622:	400a      	ands	r2, r1
 8005624:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2201      	movs	r2, #1
 800562c:	4013      	ands	r3, r2
 800562e:	d009      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005630:	4bb0      	ldr	r3, [pc, #704]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005634:	2203      	movs	r2, #3
 8005636:	4393      	bics	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	4bad      	ldr	r3, [pc, #692]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005640:	430a      	orrs	r2, r1
 8005642:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2202      	movs	r2, #2
 800564a:	4013      	ands	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800564e:	4ba9      	ldr	r3, [pc, #676]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005652:	220c      	movs	r2, #12
 8005654:	4393      	bics	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	4ba5      	ldr	r3, [pc, #660]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800565e:	430a      	orrs	r2, r1
 8005660:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2204      	movs	r2, #4
 8005668:	4013      	ands	r3, r2
 800566a:	d009      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800566c:	4ba1      	ldr	r3, [pc, #644]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800566e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005670:	2230      	movs	r2, #48	@ 0x30
 8005672:	4393      	bics	r3, r2
 8005674:	0019      	movs	r1, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	4b9e      	ldr	r3, [pc, #632]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800567c:	430a      	orrs	r2, r1
 800567e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2210      	movs	r2, #16
 8005686:	4013      	ands	r3, r2
 8005688:	d009      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800568a:	4b9a      	ldr	r3, [pc, #616]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800568c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568e:	4a9b      	ldr	r2, [pc, #620]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005690:	4013      	ands	r3, r2
 8005692:	0019      	movs	r1, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	4b96      	ldr	r3, [pc, #600]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800569a:	430a      	orrs	r2, r1
 800569c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	2380      	movs	r3, #128	@ 0x80
 80056a4:	015b      	lsls	r3, r3, #5
 80056a6:	4013      	ands	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80056aa:	4b92      	ldr	r3, [pc, #584]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ae:	4a94      	ldr	r2, [pc, #592]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	0019      	movs	r1, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	695a      	ldr	r2, [r3, #20]
 80056b8:	4b8e      	ldr	r3, [pc, #568]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056ba:	430a      	orrs	r2, r1
 80056bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4013      	ands	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ca:	4b8a      	ldr	r3, [pc, #552]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ce:	4a8d      	ldr	r2, [pc, #564]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	0019      	movs	r1, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056d8:	4b86      	ldr	r3, [pc, #536]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056da:	430a      	orrs	r2, r1
 80056dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	2380      	movs	r3, #128	@ 0x80
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4013      	ands	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056ea:	4b82      	ldr	r3, [pc, #520]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ee:	4a86      	ldr	r2, [pc, #536]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	0019      	movs	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f8:	4b7e      	ldr	r3, [pc, #504]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056fa:	430a      	orrs	r2, r1
 80056fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2220      	movs	r2, #32
 8005704:	4013      	ands	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005708:	4b7a      	ldr	r3, [pc, #488]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800570a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570c:	4a7f      	ldr	r2, [pc, #508]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	4b77      	ldr	r3, [pc, #476]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005718:	430a      	orrs	r2, r1
 800571a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2240      	movs	r2, #64	@ 0x40
 8005722:	4013      	ands	r3, r2
 8005724:	d009      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005726:	4b73      	ldr	r3, [pc, #460]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572a:	4a79      	ldr	r2, [pc, #484]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800572c:	4013      	ands	r3, r2
 800572e:	0019      	movs	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	4b6f      	ldr	r3, [pc, #444]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005736:	430a      	orrs	r2, r1
 8005738:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	4013      	ands	r3, r2
 8005744:	d015      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005746:	4b6b      	ldr	r3, [pc, #428]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	0899      	lsrs	r1, r3, #2
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005752:	4b68      	ldr	r3, [pc, #416]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005754:	430a      	orrs	r2, r1
 8005756:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800575c:	2380      	movs	r3, #128	@ 0x80
 800575e:	05db      	lsls	r3, r3, #23
 8005760:	429a      	cmp	r2, r3
 8005762:	d106      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005764:	4b63      	ldr	r3, [pc, #396]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	4b62      	ldr	r3, [pc, #392]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800576a:	2180      	movs	r1, #128	@ 0x80
 800576c:	0249      	lsls	r1, r1, #9
 800576e:	430a      	orrs	r2, r1
 8005770:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	2380      	movs	r3, #128	@ 0x80
 8005778:	031b      	lsls	r3, r3, #12
 800577a:	4013      	ands	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800577e:	4b5d      	ldr	r3, [pc, #372]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005782:	2240      	movs	r2, #64	@ 0x40
 8005784:	4393      	bics	r3, r2
 8005786:	0019      	movs	r1, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578c:	4b59      	ldr	r3, [pc, #356]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800578e:	430a      	orrs	r2, r1
 8005790:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	2380      	movs	r3, #128	@ 0x80
 8005798:	039b      	lsls	r3, r3, #14
 800579a:	4013      	ands	r3, r2
 800579c:	d016      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800579e:	4b55      	ldr	r3, [pc, #340]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a2:	4a5c      	ldr	r2, [pc, #368]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	0019      	movs	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057ac:	4b51      	ldr	r3, [pc, #324]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057ae:	430a      	orrs	r2, r1
 80057b0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b6:	2380      	movs	r3, #128	@ 0x80
 80057b8:	03db      	lsls	r3, r3, #15
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d106      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80057be:	4b4d      	ldr	r3, [pc, #308]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	4b4c      	ldr	r3, [pc, #304]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057c4:	2180      	movs	r1, #128	@ 0x80
 80057c6:	0449      	lsls	r1, r1, #17
 80057c8:	430a      	orrs	r2, r1
 80057ca:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	2380      	movs	r3, #128	@ 0x80
 80057d2:	03db      	lsls	r3, r3, #15
 80057d4:	4013      	ands	r3, r2
 80057d6:	d016      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80057d8:	4b46      	ldr	r3, [pc, #280]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057dc:	4a4e      	ldr	r2, [pc, #312]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80057de:	4013      	ands	r3, r2
 80057e0:	0019      	movs	r1, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057e6:	4b43      	ldr	r3, [pc, #268]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057e8:	430a      	orrs	r2, r1
 80057ea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	045b      	lsls	r3, r3, #17
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d106      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80057f8:	4b3e      	ldr	r3, [pc, #248]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	4b3d      	ldr	r3, [pc, #244]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057fe:	2180      	movs	r1, #128	@ 0x80
 8005800:	0449      	lsls	r1, r1, #17
 8005802:	430a      	orrs	r2, r1
 8005804:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	2380      	movs	r3, #128	@ 0x80
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	4013      	ands	r3, r2
 8005810:	d014      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005812:	4b38      	ldr	r3, [pc, #224]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005816:	2203      	movs	r2, #3
 8005818:	4393      	bics	r3, r2
 800581a:	0019      	movs	r1, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1a      	ldr	r2, [r3, #32]
 8005820:	4b34      	ldr	r3, [pc, #208]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005822:	430a      	orrs	r2, r1
 8005824:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d106      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800582e:	4b31      	ldr	r3, [pc, #196]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	4b30      	ldr	r3, [pc, #192]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005834:	2180      	movs	r1, #128	@ 0x80
 8005836:	0249      	lsls	r1, r1, #9
 8005838:	430a      	orrs	r2, r1
 800583a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	2380      	movs	r3, #128	@ 0x80
 8005842:	019b      	lsls	r3, r3, #6
 8005844:	4013      	ands	r3, r2
 8005846:	d014      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005848:	4b2a      	ldr	r3, [pc, #168]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800584a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584c:	220c      	movs	r2, #12
 800584e:	4393      	bics	r3, r2
 8005850:	0019      	movs	r1, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005856:	4b27      	ldr	r3, [pc, #156]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005858:	430a      	orrs	r2, r1
 800585a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	2b04      	cmp	r3, #4
 8005862:	d106      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005864:	4b23      	ldr	r3, [pc, #140]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	4b22      	ldr	r3, [pc, #136]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800586a:	2180      	movs	r1, #128	@ 0x80
 800586c:	0249      	lsls	r1, r1, #9
 800586e:	430a      	orrs	r2, r1
 8005870:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	2380      	movs	r3, #128	@ 0x80
 8005878:	045b      	lsls	r3, r3, #17
 800587a:	4013      	ands	r3, r2
 800587c:	d016      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800587e:	4b1d      	ldr	r3, [pc, #116]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005882:	4a22      	ldr	r2, [pc, #136]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005884:	4013      	ands	r3, r2
 8005886:	0019      	movs	r1, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800588c:	4b19      	ldr	r3, [pc, #100]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800588e:	430a      	orrs	r2, r1
 8005890:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005896:	2380      	movs	r3, #128	@ 0x80
 8005898:	019b      	lsls	r3, r3, #6
 800589a:	429a      	cmp	r2, r3
 800589c:	d106      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800589e:	4b15      	ldr	r3, [pc, #84]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	4b14      	ldr	r3, [pc, #80]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058a4:	2180      	movs	r1, #128	@ 0x80
 80058a6:	0449      	lsls	r1, r1, #17
 80058a8:	430a      	orrs	r2, r1
 80058aa:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	2380      	movs	r3, #128	@ 0x80
 80058b2:	049b      	lsls	r3, r3, #18
 80058b4:	4013      	ands	r3, r2
 80058b6:	d016      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058b8:	4b0e      	ldr	r3, [pc, #56]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058bc:	4a10      	ldr	r2, [pc, #64]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058be:	4013      	ands	r3, r2
 80058c0:	0019      	movs	r1, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058c6:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058c8:	430a      	orrs	r2, r1
 80058ca:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058d0:	2380      	movs	r3, #128	@ 0x80
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d106      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80058d8:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	4b05      	ldr	r3, [pc, #20]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058de:	2180      	movs	r1, #128	@ 0x80
 80058e0:	0449      	lsls	r1, r1, #17
 80058e2:	430a      	orrs	r2, r1
 80058e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80058e6:	2312      	movs	r3, #18
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	781b      	ldrb	r3, [r3, #0]
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b006      	add	sp, #24
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40021000 	.word	0x40021000
 80058f8:	efffffff 	.word	0xefffffff
 80058fc:	fffff3ff 	.word	0xfffff3ff
 8005900:	fffffcff 	.word	0xfffffcff
 8005904:	fff3ffff 	.word	0xfff3ffff
 8005908:	ffcfffff 	.word	0xffcfffff
 800590c:	ffffcfff 	.word	0xffffcfff
 8005910:	ffff3fff 	.word	0xffff3fff
 8005914:	ffbfffff 	.word	0xffbfffff
 8005918:	feffffff 	.word	0xfeffffff

0800591c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800591c:	b5b0      	push	{r4, r5, r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005924:	230f      	movs	r3, #15
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	2201      	movs	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d100      	bne.n	8005934 <HAL_RTC_Init+0x18>
 8005932:	e08c      	b.n	8005a4e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2229      	movs	r2, #41	@ 0x29
 8005938:	5c9b      	ldrb	r3, [r3, r2]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10b      	bne.n	8005958 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2228      	movs	r2, #40	@ 0x28
 8005944:	2100      	movs	r1, #0
 8005946:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2288      	movs	r2, #136	@ 0x88
 800594c:	0212      	lsls	r2, r2, #8
 800594e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	0018      	movs	r0, r3
 8005954:	f7fd fb92 	bl	800307c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2229      	movs	r2, #41	@ 0x29
 800595c:	2102      	movs	r1, #2
 800595e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2210      	movs	r2, #16
 8005968:	4013      	ands	r3, r2
 800596a:	2b10      	cmp	r3, #16
 800596c:	d062      	beq.n	8005a34 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	22ca      	movs	r2, #202	@ 0xca
 8005974:	625a      	str	r2, [r3, #36]	@ 0x24
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2253      	movs	r2, #83	@ 0x53
 800597c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800597e:	250f      	movs	r5, #15
 8005980:	197c      	adds	r4, r7, r5
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	0018      	movs	r0, r3
 8005986:	f000 f9cb 	bl	8005d20 <RTC_EnterInitMode>
 800598a:	0003      	movs	r3, r0
 800598c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800598e:	0028      	movs	r0, r5
 8005990:	183b      	adds	r3, r7, r0
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d12c      	bne.n	80059f2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	492e      	ldr	r1, [pc, #184]	@ (8005a5c <HAL_RTC_Init+0x140>)
 80059a4:	400a      	ands	r2, r1
 80059a6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6999      	ldr	r1, [r3, #24]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6912      	ldr	r2, [r2, #16]
 80059ce:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6919      	ldr	r1, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	041a      	lsls	r2, r3, #16
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80059e4:	183c      	adds	r4, r7, r0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	0018      	movs	r0, r3
 80059ea:	f000 f9db 	bl	8005da4 <RTC_ExitInitMode>
 80059ee:	0003      	movs	r3, r0
 80059f0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80059f2:	230f      	movs	r3, #15
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d116      	bne.n	8005a2a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	00d2      	lsls	r2, r2, #3
 8005a08:	08d2      	lsrs	r2, r2, #3
 8005a0a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6999      	ldr	r1, [r3, #24]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	22ff      	movs	r2, #255	@ 0xff
 8005a30:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a32:	e003      	b.n	8005a3c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005a34:	230f      	movs	r3, #15
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005a3c:	230f      	movs	r3, #15
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2229      	movs	r2, #41	@ 0x29
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005a4e:	230f      	movs	r3, #15
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	781b      	ldrb	r3, [r3, #0]
}
 8005a54:	0018      	movs	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b004      	add	sp, #16
 8005a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a5c:	fb8fffbf 	.word	0xfb8fffbf

08005a60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a60:	b5b0      	push	{r4, r5, r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2228      	movs	r2, #40	@ 0x28
 8005a70:	5c9b      	ldrb	r3, [r3, r2]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_RTC_SetTime+0x1a>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e092      	b.n	8005ba0 <HAL_RTC_SetTime+0x140>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2228      	movs	r2, #40	@ 0x28
 8005a7e:	2101      	movs	r1, #1
 8005a80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2229      	movs	r2, #41	@ 0x29
 8005a86:	2102      	movs	r1, #2
 8005a88:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	22ca      	movs	r2, #202	@ 0xca
 8005a90:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2253      	movs	r2, #83	@ 0x53
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a9a:	2513      	movs	r5, #19
 8005a9c:	197c      	adds	r4, r7, r5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f000 f93d 	bl	8005d20 <RTC_EnterInitMode>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005aaa:	197b      	adds	r3, r7, r5
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d162      	bne.n	8005b78 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d125      	bne.n	8005b04 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2240      	movs	r2, #64	@ 0x40
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d102      	bne.n	8005aca <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f000 f9ac 	bl	8005e2c <RTC_ByteToBcd2>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f000 f9a5 	bl	8005e2c <RTC_ByteToBcd2>
 8005ae2:	0003      	movs	r3, r0
 8005ae4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ae6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	789b      	ldrb	r3, [r3, #2]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f000 f99d 	bl	8005e2c <RTC_ByteToBcd2>
 8005af2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005af4:	0022      	movs	r2, r4
 8005af6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	78db      	ldrb	r3, [r3, #3]
 8005afc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e017      	b.n	8005b34 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	2240      	movs	r2, #64	@ 0x40
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d102      	bne.n	8005b16 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2200      	movs	r2, #0
 8005b14:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b22:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b28:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	78db      	ldrb	r3, [r3, #3]
 8005b2e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	491b      	ldr	r1, [pc, #108]	@ (8005ba8 <HAL_RTC_SetTime+0x148>)
 8005b3c:	400a      	ands	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4918      	ldr	r1, [pc, #96]	@ (8005bac <HAL_RTC_SetTime+0x14c>)
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6999      	ldr	r1, [r3, #24]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b68:	2313      	movs	r3, #19
 8005b6a:	18fc      	adds	r4, r7, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 f918 	bl	8005da4 <RTC_ExitInitMode>
 8005b74:	0003      	movs	r3, r0
 8005b76:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	22ff      	movs	r2, #255	@ 0xff
 8005b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8005b80:	2313      	movs	r3, #19
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2229      	movs	r2, #41	@ 0x29
 8005b8e:	2101      	movs	r1, #1
 8005b90:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2228      	movs	r2, #40	@ 0x28
 8005b96:	2100      	movs	r1, #0
 8005b98:	5499      	strb	r1, [r3, r2]

  return status;
 8005b9a:	2313      	movs	r3, #19
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	781b      	ldrb	r3, [r3, #0]
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b006      	add	sp, #24
 8005ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba8:	007f7f7f 	.word	0x007f7f7f
 8005bac:	fffbffff 	.word	0xfffbffff

08005bb0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bb0:	b5b0      	push	{r4, r5, r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2228      	movs	r2, #40	@ 0x28
 8005bc0:	5c9b      	ldrb	r3, [r3, r2]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_RTC_SetDate+0x1a>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e07e      	b.n	8005cc8 <HAL_RTC_SetDate+0x118>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2228      	movs	r2, #40	@ 0x28
 8005bce:	2101      	movs	r1, #1
 8005bd0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2229      	movs	r2, #41	@ 0x29
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10e      	bne.n	8005bfe <HAL_RTC_SetDate+0x4e>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	001a      	movs	r2, r3
 8005be6:	2310      	movs	r3, #16
 8005be8:	4013      	ands	r3, r2
 8005bea:	d008      	beq.n	8005bfe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	4393      	bics	r3, r2
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	330a      	adds	r3, #10
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11c      	bne.n	8005c3e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	78db      	ldrb	r3, [r3, #3]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f90f 	bl	8005e2c <RTC_ByteToBcd2>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	0018      	movs	r0, r3
 8005c18:	f000 f908 	bl	8005e2c <RTC_ByteToBcd2>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c20:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	789b      	ldrb	r3, [r3, #2]
 8005c26:	0018      	movs	r0, r3
 8005c28:	f000 f900 	bl	8005e2c <RTC_ByteToBcd2>
 8005c2c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c2e:	0022      	movs	r2, r4
 8005c30:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e00e      	b.n	8005c5c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	78db      	ldrb	r3, [r3, #3]
 8005c42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c4a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005c50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	22ca      	movs	r2, #202	@ 0xca
 8005c62:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2253      	movs	r2, #83	@ 0x53
 8005c6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c6c:	2513      	movs	r5, #19
 8005c6e:	197c      	adds	r4, r7, r5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 f854 	bl	8005d20 <RTC_EnterInitMode>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005c7c:	0028      	movs	r0, r5
 8005c7e:	183b      	adds	r3, r7, r0
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4910      	ldr	r1, [pc, #64]	@ (8005cd0 <HAL_RTC_SetDate+0x120>)
 8005c8e:	400a      	ands	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c92:	183c      	adds	r4, r7, r0
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 f884 	bl	8005da4 <RTC_ExitInitMode>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	22ff      	movs	r2, #255	@ 0xff
 8005ca6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005ca8:	2313      	movs	r3, #19
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2229      	movs	r2, #41	@ 0x29
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2228      	movs	r2, #40	@ 0x28
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	5499      	strb	r1, [r3, r2]

  return status;
 8005cc2:	2313      	movs	r3, #19
 8005cc4:	18fb      	adds	r3, r7, r3
 8005cc6:	781b      	ldrb	r3, [r3, #0]
}
 8005cc8:	0018      	movs	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b006      	add	sp, #24
 8005cce:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd0:	00ffff3f 	.word	0x00ffff3f

08005cd4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8005d1c <HAL_RTC_WaitForSynchro+0x48>)
 8005ce2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005ce4:	f7fd fc12 	bl	800350c <HAL_GetTick>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005cec:	e00a      	b.n	8005d04 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cee:	f7fd fc0d 	bl	800350c <HAL_GetTick>
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	23fa      	movs	r3, #250	@ 0xfa
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d901      	bls.n	8005d04 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e006      	b.n	8005d12 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d0ee      	beq.n	8005cee <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	0018      	movs	r0, r3
 8005d14:	46bd      	mov	sp, r7
 8005d16:	b004      	add	sp, #16
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	46c0      	nop			@ (mov r8, r8)
 8005d1c:	0001005f 	.word	0x0001005f

08005d20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005d28:	230f      	movs	r3, #15
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d12c      	bne.n	8005d96 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2180      	movs	r1, #128	@ 0x80
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d4c:	f7fd fbde 	bl	800350c <HAL_GetTick>
 8005d50:	0003      	movs	r3, r0
 8005d52:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d54:	e014      	b.n	8005d80 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d56:	f7fd fbd9 	bl	800350c <HAL_GetTick>
 8005d5a:	0002      	movs	r2, r0
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	1ad2      	subs	r2, r2, r3
 8005d60:	200f      	movs	r0, #15
 8005d62:	183b      	adds	r3, r7, r0
 8005d64:	1839      	adds	r1, r7, r0
 8005d66:	7809      	ldrb	r1, [r1, #0]
 8005d68:	7019      	strb	r1, [r3, #0]
 8005d6a:	23fa      	movs	r3, #250	@ 0xfa
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d906      	bls.n	8005d80 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005d72:	183b      	adds	r3, r7, r0
 8005d74:	2203      	movs	r2, #3
 8005d76:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2229      	movs	r2, #41	@ 0x29
 8005d7c:	2103      	movs	r1, #3
 8005d7e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	2240      	movs	r2, #64	@ 0x40
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d104      	bne.n	8005d96 <RTC_EnterInitMode+0x76>
 8005d8c:	230f      	movs	r3, #15
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d1df      	bne.n	8005d56 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005d96:	230f      	movs	r3, #15
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	781b      	ldrb	r3, [r3, #0]
}
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b004      	add	sp, #16
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dac:	240f      	movs	r4, #15
 8005dae:	193b      	adds	r3, r7, r4
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005db4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e28 <RTC_ExitInitMode+0x84>)
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e28 <RTC_ExitInitMode+0x84>)
 8005dba:	2180      	movs	r1, #128	@ 0x80
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005dc0:	4b19      	ldr	r3, [pc, #100]	@ (8005e28 <RTC_ExitInitMode+0x84>)
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d10d      	bne.n	8005de6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f7ff ff81 	bl	8005cd4 <HAL_RTC_WaitForSynchro>
 8005dd2:	1e03      	subs	r3, r0, #0
 8005dd4:	d021      	beq.n	8005e1a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2229      	movs	r2, #41	@ 0x29
 8005dda:	2103      	movs	r1, #3
 8005ddc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005dde:	193b      	adds	r3, r7, r4
 8005de0:	2203      	movs	r2, #3
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e019      	b.n	8005e1a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005de6:	4b10      	ldr	r3, [pc, #64]	@ (8005e28 <RTC_ExitInitMode+0x84>)
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	4b0f      	ldr	r3, [pc, #60]	@ (8005e28 <RTC_ExitInitMode+0x84>)
 8005dec:	2120      	movs	r1, #32
 8005dee:	438a      	bics	r2, r1
 8005df0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	0018      	movs	r0, r3
 8005df6:	f7ff ff6d 	bl	8005cd4 <HAL_RTC_WaitForSynchro>
 8005dfa:	1e03      	subs	r3, r0, #0
 8005dfc:	d007      	beq.n	8005e0e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2229      	movs	r2, #41	@ 0x29
 8005e02:	2103      	movs	r1, #3
 8005e04:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005e06:	230f      	movs	r3, #15
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005e0e:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <RTC_ExitInitMode+0x84>)
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	4b05      	ldr	r3, [pc, #20]	@ (8005e28 <RTC_ExitInitMode+0x84>)
 8005e14:	2120      	movs	r1, #32
 8005e16:	430a      	orrs	r2, r1
 8005e18:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005e1a:	230f      	movs	r3, #15
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	781b      	ldrb	r3, [r3, #0]
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b005      	add	sp, #20
 8005e26:	bd90      	pop	{r4, r7, pc}
 8005e28:	40002800 	.word	0x40002800

08005e2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	0002      	movs	r2, r0
 8005e34:	1dfb      	adds	r3, r7, #7
 8005e36:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005e3c:	230b      	movs	r3, #11
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	1dfa      	adds	r2, r7, #7
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005e46:	e008      	b.n	8005e5a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005e4e:	220b      	movs	r2, #11
 8005e50:	18bb      	adds	r3, r7, r2
 8005e52:	18ba      	adds	r2, r7, r2
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	3a0a      	subs	r2, #10
 8005e58:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005e5a:	210b      	movs	r1, #11
 8005e5c:	187b      	adds	r3, r7, r1
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b09      	cmp	r3, #9
 8005e62:	d8f1      	bhi.n	8005e48 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	187b      	adds	r3, r7, r1
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	b2db      	uxtb	r3, r3
}
 8005e74:	0018      	movs	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b004      	add	sp, #16
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e04a      	b.n	8005f24 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	223d      	movs	r2, #61	@ 0x3d
 8005e92:	5c9b      	ldrb	r3, [r3, r2]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d107      	bne.n	8005eaa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	223c      	movs	r2, #60	@ 0x3c
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7fd f927 	bl	80030f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	223d      	movs	r2, #61	@ 0x3d
 8005eae:	2102      	movs	r1, #2
 8005eb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	0019      	movs	r1, r3
 8005ebc:	0010      	movs	r0, r2
 8005ebe:	f000 fa47 	bl	8006350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2248      	movs	r2, #72	@ 0x48
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	223e      	movs	r2, #62	@ 0x3e
 8005ece:	2101      	movs	r1, #1
 8005ed0:	5499      	strb	r1, [r3, r2]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	223f      	movs	r2, #63	@ 0x3f
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	5499      	strb	r1, [r3, r2]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2240      	movs	r2, #64	@ 0x40
 8005ede:	2101      	movs	r1, #1
 8005ee0:	5499      	strb	r1, [r3, r2]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2241      	movs	r2, #65	@ 0x41
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	5499      	strb	r1, [r3, r2]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2242      	movs	r2, #66	@ 0x42
 8005eee:	2101      	movs	r1, #1
 8005ef0:	5499      	strb	r1, [r3, r2]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2243      	movs	r2, #67	@ 0x43
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2244      	movs	r2, #68	@ 0x44
 8005efe:	2101      	movs	r1, #1
 8005f00:	5499      	strb	r1, [r3, r2]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2245      	movs	r2, #69	@ 0x45
 8005f06:	2101      	movs	r1, #1
 8005f08:	5499      	strb	r1, [r3, r2]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2246      	movs	r2, #70	@ 0x46
 8005f0e:	2101      	movs	r1, #1
 8005f10:	5499      	strb	r1, [r3, r2]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2247      	movs	r2, #71	@ 0x47
 8005f16:	2101      	movs	r1, #1
 8005f18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	223d      	movs	r2, #61	@ 0x3d
 8005f1e:	2101      	movs	r1, #1
 8005f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	0018      	movs	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b002      	add	sp, #8
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	223d      	movs	r2, #61	@ 0x3d
 8005f38:	5c9b      	ldrb	r3, [r3, r2]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d001      	beq.n	8005f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e03f      	b.n	8005fc4 <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	223d      	movs	r2, #61	@ 0x3d
 8005f48:	2102      	movs	r1, #2
 8005f4a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1e      	ldr	r2, [pc, #120]	@ (8005fcc <HAL_TIM_Base_Start+0xa0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d014      	beq.n	8005f80 <HAL_TIM_Base_Start+0x54>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	2380      	movs	r3, #128	@ 0x80
 8005f5c:	05db      	lsls	r3, r3, #23
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d00e      	beq.n	8005f80 <HAL_TIM_Base_Start+0x54>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd0 <HAL_TIM_Base_Start+0xa4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_TIM_Base_Start+0x54>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a18      	ldr	r2, [pc, #96]	@ (8005fd4 <HAL_TIM_Base_Start+0xa8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_TIM_Base_Start+0x54>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a17      	ldr	r2, [pc, #92]	@ (8005fd8 <HAL_TIM_Base_Start+0xac>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d116      	bne.n	8005fae <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	4a15      	ldr	r2, [pc, #84]	@ (8005fdc <HAL_TIM_Base_Start+0xb0>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b06      	cmp	r3, #6
 8005f90:	d016      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x94>
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	2380      	movs	r3, #128	@ 0x80
 8005f96:	025b      	lsls	r3, r3, #9
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d011      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fac:	e008      	b.n	8005fc0 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2101      	movs	r1, #1
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e000      	b.n	8005fc2 <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b004      	add	sp, #16
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	00010007 	.word	0x00010007

08005fe0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	4a0d      	ldr	r2, [pc, #52]	@ (8006024 <HAL_TIM_Base_Stop+0x44>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d10d      	bne.n	8006010 <HAL_TIM_Base_Stop+0x30>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8006028 <HAL_TIM_Base_Stop+0x48>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d107      	bne.n	8006010 <HAL_TIM_Base_Stop+0x30>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2101      	movs	r1, #1
 800600c:	438a      	bics	r2, r1
 800600e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	223d      	movs	r2, #61	@ 0x3d
 8006014:	2101      	movs	r1, #1
 8006016:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	0018      	movs	r0, r3
 800601c:	46bd      	mov	sp, r7
 800601e:	b002      	add	sp, #8
 8006020:	bd80      	pop	{r7, pc}
 8006022:	46c0      	nop			@ (mov r8, r8)
 8006024:	00001111 	.word	0x00001111
 8006028:	00000444 	.word	0x00000444

0800602c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	223d      	movs	r2, #61	@ 0x3d
 8006038:	5c9b      	ldrb	r3, [r3, r2]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d001      	beq.n	8006044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e047      	b.n	80060d4 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	223d      	movs	r2, #61	@ 0x3d
 8006048:	2102      	movs	r1, #2
 800604a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2101      	movs	r1, #1
 8006058:	430a      	orrs	r2, r1
 800605a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1e      	ldr	r2, [pc, #120]	@ (80060dc <HAL_TIM_Base_Start_IT+0xb0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d014      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x64>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	2380      	movs	r3, #128	@ 0x80
 800606c:	05db      	lsls	r3, r3, #23
 800606e:	429a      	cmp	r2, r3
 8006070:	d00e      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x64>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1a      	ldr	r2, [pc, #104]	@ (80060e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d009      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x64>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a18      	ldr	r2, [pc, #96]	@ (80060e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d004      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x64>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a17      	ldr	r2, [pc, #92]	@ (80060e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d116      	bne.n	80060be <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	4a15      	ldr	r2, [pc, #84]	@ (80060ec <HAL_TIM_Base_Start_IT+0xc0>)
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b06      	cmp	r3, #6
 80060a0:	d016      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0xa4>
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	2380      	movs	r3, #128	@ 0x80
 80060a6:	025b      	lsls	r3, r3, #9
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d011      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2101      	movs	r1, #1
 80060b8:	430a      	orrs	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060bc:	e008      	b.n	80060d0 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2101      	movs	r1, #1
 80060ca:	430a      	orrs	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e000      	b.n	80060d2 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	0018      	movs	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b004      	add	sp, #16
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40014000 	.word	0x40014000
 80060ec:	00010007 	.word	0x00010007

080060f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2202      	movs	r2, #2
 800610c:	4013      	ands	r3, r2
 800610e:	d021      	beq.n	8006154 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2202      	movs	r2, #2
 8006114:	4013      	ands	r3, r2
 8006116:	d01d      	beq.n	8006154 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2203      	movs	r2, #3
 800611e:	4252      	negs	r2, r2
 8006120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2203      	movs	r2, #3
 8006130:	4013      	ands	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	0018      	movs	r0, r3
 8006138:	f000 f8f2 	bl	8006320 <HAL_TIM_IC_CaptureCallback>
 800613c:	e007      	b.n	800614e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	0018      	movs	r0, r3
 8006142:	f000 f8e5 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	0018      	movs	r0, r3
 800614a:	f000 f8f1 	bl	8006330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2204      	movs	r2, #4
 8006158:	4013      	ands	r3, r2
 800615a:	d022      	beq.n	80061a2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2204      	movs	r2, #4
 8006160:	4013      	ands	r3, r2
 8006162:	d01e      	beq.n	80061a2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2205      	movs	r2, #5
 800616a:	4252      	negs	r2, r2
 800616c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	23c0      	movs	r3, #192	@ 0xc0
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4013      	ands	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	0018      	movs	r0, r3
 8006186:	f000 f8cb 	bl	8006320 <HAL_TIM_IC_CaptureCallback>
 800618a:	e007      	b.n	800619c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	0018      	movs	r0, r3
 8006190:	f000 f8be 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	0018      	movs	r0, r3
 8006198:	f000 f8ca 	bl	8006330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2208      	movs	r2, #8
 80061a6:	4013      	ands	r3, r2
 80061a8:	d021      	beq.n	80061ee <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2208      	movs	r2, #8
 80061ae:	4013      	ands	r3, r2
 80061b0:	d01d      	beq.n	80061ee <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2209      	movs	r2, #9
 80061b8:	4252      	negs	r2, r2
 80061ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2204      	movs	r2, #4
 80061c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	2203      	movs	r2, #3
 80061ca:	4013      	ands	r3, r2
 80061cc:	d004      	beq.n	80061d8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	0018      	movs	r0, r3
 80061d2:	f000 f8a5 	bl	8006320 <HAL_TIM_IC_CaptureCallback>
 80061d6:	e007      	b.n	80061e8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	0018      	movs	r0, r3
 80061dc:	f000 f898 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	0018      	movs	r0, r3
 80061e4:	f000 f8a4 	bl	8006330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2210      	movs	r2, #16
 80061f2:	4013      	ands	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2210      	movs	r2, #16
 80061fa:	4013      	ands	r3, r2
 80061fc:	d01e      	beq.n	800623c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2211      	movs	r2, #17
 8006204:	4252      	negs	r2, r2
 8006206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2208      	movs	r2, #8
 800620c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	23c0      	movs	r3, #192	@ 0xc0
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4013      	ands	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	0018      	movs	r0, r3
 8006220:	f000 f87e 	bl	8006320 <HAL_TIM_IC_CaptureCallback>
 8006224:	e007      	b.n	8006236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	0018      	movs	r0, r3
 800622a:	f000 f871 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	0018      	movs	r0, r3
 8006232:	f000 f87d 	bl	8006330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2201      	movs	r2, #1
 8006240:	4013      	ands	r3, r2
 8006242:	d00c      	beq.n	800625e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d008      	beq.n	800625e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2202      	movs	r2, #2
 8006252:	4252      	negs	r2, r2
 8006254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	0018      	movs	r0, r3
 800625a:	f000 f851 	bl	8006300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2280      	movs	r2, #128	@ 0x80
 8006262:	4013      	ands	r3, r2
 8006264:	d104      	bne.n	8006270 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	019b      	lsls	r3, r3, #6
 800626c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800626e:	d00b      	beq.n	8006288 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2280      	movs	r2, #128	@ 0x80
 8006274:	4013      	ands	r3, r2
 8006276:	d007      	beq.n	8006288 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1e      	ldr	r2, [pc, #120]	@ (80062f8 <HAL_TIM_IRQHandler+0x208>)
 800627e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	0018      	movs	r0, r3
 8006284:	f000 f97a 	bl	800657c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	2380      	movs	r3, #128	@ 0x80
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	4013      	ands	r3, r2
 8006290:	d00b      	beq.n	80062aa <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2280      	movs	r2, #128	@ 0x80
 8006296:	4013      	ands	r3, r2
 8006298:	d007      	beq.n	80062aa <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a17      	ldr	r2, [pc, #92]	@ (80062fc <HAL_TIM_IRQHandler+0x20c>)
 80062a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 f971 	bl	800658c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2240      	movs	r2, #64	@ 0x40
 80062ae:	4013      	ands	r3, r2
 80062b0:	d00c      	beq.n	80062cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2240      	movs	r2, #64	@ 0x40
 80062b6:	4013      	ands	r3, r2
 80062b8:	d008      	beq.n	80062cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2241      	movs	r2, #65	@ 0x41
 80062c0:	4252      	negs	r2, r2
 80062c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	0018      	movs	r0, r3
 80062c8:	f000 f83a 	bl	8006340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2220      	movs	r2, #32
 80062d0:	4013      	ands	r3, r2
 80062d2:	d00c      	beq.n	80062ee <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	4013      	ands	r3, r2
 80062da:	d008      	beq.n	80062ee <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2221      	movs	r2, #33	@ 0x21
 80062e2:	4252      	negs	r2, r2
 80062e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 f93f 	bl	800656c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b004      	add	sp, #16
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	ffffdf7f 	.word	0xffffdf7f
 80062fc:	fffffeff 	.word	0xfffffeff

08006300 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006308:	46c0      	nop			@ (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006318:	46c0      	nop			@ (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b002      	add	sp, #8
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006328:	46c0      	nop			@ (mov r8, r8)
 800632a:	46bd      	mov	sp, r7
 800632c:	b002      	add	sp, #8
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006338:	46c0      	nop			@ (mov r8, r8)
 800633a:	46bd      	mov	sp, r7
 800633c:	b002      	add	sp, #8
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006348:	46c0      	nop			@ (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	b002      	add	sp, #8
 800634e:	bd80      	pop	{r7, pc}

08006350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a3f      	ldr	r2, [pc, #252]	@ (8006460 <TIM_Base_SetConfig+0x110>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00c      	beq.n	8006382 <TIM_Base_SetConfig+0x32>
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	2380      	movs	r3, #128	@ 0x80
 800636c:	05db      	lsls	r3, r3, #23
 800636e:	429a      	cmp	r2, r3
 8006370:	d007      	beq.n	8006382 <TIM_Base_SetConfig+0x32>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a3b      	ldr	r2, [pc, #236]	@ (8006464 <TIM_Base_SetConfig+0x114>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d003      	beq.n	8006382 <TIM_Base_SetConfig+0x32>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a3a      	ldr	r2, [pc, #232]	@ (8006468 <TIM_Base_SetConfig+0x118>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d108      	bne.n	8006394 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2270      	movs	r2, #112	@ 0x70
 8006386:	4393      	bics	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a32      	ldr	r2, [pc, #200]	@ (8006460 <TIM_Base_SetConfig+0x110>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d01c      	beq.n	80063d6 <TIM_Base_SetConfig+0x86>
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	2380      	movs	r3, #128	@ 0x80
 80063a0:	05db      	lsls	r3, r3, #23
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d017      	beq.n	80063d6 <TIM_Base_SetConfig+0x86>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006464 <TIM_Base_SetConfig+0x114>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <TIM_Base_SetConfig+0x86>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006468 <TIM_Base_SetConfig+0x118>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00f      	beq.n	80063d6 <TIM_Base_SetConfig+0x86>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a2c      	ldr	r2, [pc, #176]	@ (800646c <TIM_Base_SetConfig+0x11c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00b      	beq.n	80063d6 <TIM_Base_SetConfig+0x86>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006470 <TIM_Base_SetConfig+0x120>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d007      	beq.n	80063d6 <TIM_Base_SetConfig+0x86>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006474 <TIM_Base_SetConfig+0x124>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_Base_SetConfig+0x86>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a29      	ldr	r2, [pc, #164]	@ (8006478 <TIM_Base_SetConfig+0x128>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d108      	bne.n	80063e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a28      	ldr	r2, [pc, #160]	@ (800647c <TIM_Base_SetConfig+0x12c>)
 80063da:	4013      	ands	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2280      	movs	r2, #128	@ 0x80
 80063ec:	4393      	bics	r3, r2
 80063ee:	001a      	movs	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a13      	ldr	r2, [pc, #76]	@ (8006460 <TIM_Base_SetConfig+0x110>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00b      	beq.n	800642e <TIM_Base_SetConfig+0xde>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a15      	ldr	r2, [pc, #84]	@ (8006470 <TIM_Base_SetConfig+0x120>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <TIM_Base_SetConfig+0xde>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a14      	ldr	r2, [pc, #80]	@ (8006474 <TIM_Base_SetConfig+0x124>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <TIM_Base_SetConfig+0xde>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a13      	ldr	r2, [pc, #76]	@ (8006478 <TIM_Base_SetConfig+0x128>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d103      	bne.n	8006436 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2201      	movs	r2, #1
 8006442:	4013      	ands	r3, r2
 8006444:	2b01      	cmp	r3, #1
 8006446:	d106      	bne.n	8006456 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2201      	movs	r2, #1
 800644e:	4393      	bics	r3, r2
 8006450:	001a      	movs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	611a      	str	r2, [r3, #16]
  }
}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	46bd      	mov	sp, r7
 800645a:	b004      	add	sp, #16
 800645c:	bd80      	pop	{r7, pc}
 800645e:	46c0      	nop			@ (mov r8, r8)
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40000400 	.word	0x40000400
 8006468:	40000800 	.word	0x40000800
 800646c:	40002000 	.word	0x40002000
 8006470:	40014000 	.word	0x40014000
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800
 800647c:	fffffcff 	.word	0xfffffcff

08006480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	223c      	movs	r2, #60	@ 0x3c
 800648e:	5c9b      	ldrb	r3, [r3, r2]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006494:	2302      	movs	r3, #2
 8006496:	e05a      	b.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	223c      	movs	r2, #60	@ 0x3c
 800649c:	2101      	movs	r1, #1
 800649e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	223d      	movs	r2, #61	@ 0x3d
 80064a4:	2102      	movs	r1, #2
 80064a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a26      	ldr	r2, [pc, #152]	@ (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d108      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a25      	ldr	r2, [pc, #148]	@ (800655c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2270      	movs	r2, #112	@ 0x70
 80064d8:	4393      	bics	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a19      	ldr	r2, [pc, #100]	@ (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d014      	beq.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	2380      	movs	r3, #128	@ 0x80
 80064fe:	05db      	lsls	r3, r3, #23
 8006500:	429a      	cmp	r2, r3
 8006502:	d00e      	beq.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a15      	ldr	r2, [pc, #84]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d009      	beq.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a14      	ldr	r2, [pc, #80]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d004      	beq.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a12      	ldr	r2, [pc, #72]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d10c      	bne.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2280      	movs	r2, #128	@ 0x80
 8006526:	4393      	bics	r3, r2
 8006528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4313      	orrs	r3, r2
 8006532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	223d      	movs	r2, #61	@ 0x3d
 8006540:	2101      	movs	r1, #1
 8006542:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	223c      	movs	r2, #60	@ 0x3c
 8006548:	2100      	movs	r1, #0
 800654a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	0018      	movs	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	b004      	add	sp, #16
 8006554:	bd80      	pop	{r7, pc}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	40012c00 	.word	0x40012c00
 800655c:	ff0fffff 	.word	0xff0fffff
 8006560:	40000400 	.word	0x40000400
 8006564:	40000800 	.word	0x40000800
 8006568:	40014000 	.word	0x40014000

0800656c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006574:	46c0      	nop			@ (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b002      	add	sp, #8
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006584:	46c0      	nop			@ (mov r8, r8)
 8006586:	46bd      	mov	sp, r7
 8006588:	b002      	add	sp, #8
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006594:	46c0      	nop			@ (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e046      	b.n	800663c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2288      	movs	r2, #136	@ 0x88
 80065b2:	589b      	ldr	r3, [r3, r2]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d107      	bne.n	80065c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2284      	movs	r2, #132	@ 0x84
 80065bc:	2100      	movs	r1, #0
 80065be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7fc fdf0 	bl	80031a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2288      	movs	r2, #136	@ 0x88
 80065cc:	2124      	movs	r1, #36	@ 0x24
 80065ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2101      	movs	r1, #1
 80065dc:	438a      	bics	r2, r1
 80065de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	0018      	movs	r0, r3
 80065ec:	f000 ffce 	bl	800758c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	0018      	movs	r0, r3
 80065f4:	f000 fc74 	bl	8006ee0 <UART_SetConfig>
 80065f8:	0003      	movs	r3, r0
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e01c      	b.n	800663c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	490d      	ldr	r1, [pc, #52]	@ (8006644 <HAL_UART_Init+0xa8>)
 800660e:	400a      	ands	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	212a      	movs	r1, #42	@ 0x2a
 800661e:	438a      	bics	r2, r1
 8006620:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2101      	movs	r1, #1
 800662e:	430a      	orrs	r2, r1
 8006630:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	0018      	movs	r0, r3
 8006636:	f001 f85d 	bl	80076f4 <UART_CheckIdleState>
 800663a:	0003      	movs	r3, r0
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	b002      	add	sp, #8
 8006642:	bd80      	pop	{r7, pc}
 8006644:	ffffb7ff 	.word	0xffffb7ff

08006648 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	@ 0x28
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	1dbb      	adds	r3, r7, #6
 8006656:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2288      	movs	r2, #136	@ 0x88
 800665c:	589b      	ldr	r3, [r3, r2]
 800665e:	2b20      	cmp	r3, #32
 8006660:	d000      	beq.n	8006664 <HAL_UART_Transmit+0x1c>
 8006662:	e090      	b.n	8006786 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_UART_Transmit+0x2a>
 800666a:	1dbb      	adds	r3, r7, #6
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e088      	b.n	8006788 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	2380      	movs	r3, #128	@ 0x80
 800667c:	015b      	lsls	r3, r3, #5
 800667e:	429a      	cmp	r2, r3
 8006680:	d109      	bne.n	8006696 <HAL_UART_Transmit+0x4e>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2201      	movs	r2, #1
 800668e:	4013      	ands	r3, r2
 8006690:	d001      	beq.n	8006696 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e078      	b.n	8006788 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2290      	movs	r2, #144	@ 0x90
 800669a:	2100      	movs	r1, #0
 800669c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2288      	movs	r2, #136	@ 0x88
 80066a2:	2121      	movs	r1, #33	@ 0x21
 80066a4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066a6:	f7fc ff31 	bl	800350c <HAL_GetTick>
 80066aa:	0003      	movs	r3, r0
 80066ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1dba      	adds	r2, r7, #6
 80066b2:	2154      	movs	r1, #84	@ 0x54
 80066b4:	8812      	ldrh	r2, [r2, #0]
 80066b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	1dba      	adds	r2, r7, #6
 80066bc:	2156      	movs	r1, #86	@ 0x56
 80066be:	8812      	ldrh	r2, [r2, #0]
 80066c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	2380      	movs	r3, #128	@ 0x80
 80066c8:	015b      	lsls	r3, r3, #5
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d108      	bne.n	80066e0 <HAL_UART_Transmit+0x98>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	e003      	b.n	80066e8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066e8:	e030      	b.n	800674c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	0013      	movs	r3, r2
 80066f4:	2200      	movs	r2, #0
 80066f6:	2180      	movs	r1, #128	@ 0x80
 80066f8:	f001 f8a6 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 80066fc:	1e03      	subs	r3, r0, #0
 80066fe:	d005      	beq.n	800670c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2288      	movs	r2, #136	@ 0x88
 8006704:	2120      	movs	r1, #32
 8006706:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e03d      	b.n	8006788 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10b      	bne.n	800672a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	001a      	movs	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	05d2      	lsls	r2, r2, #23
 800671e:	0dd2      	lsrs	r2, r2, #23
 8006720:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	3302      	adds	r3, #2
 8006726:	61bb      	str	r3, [r7, #24]
 8006728:	e007      	b.n	800673a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2256      	movs	r2, #86	@ 0x56
 800673e:	5a9b      	ldrh	r3, [r3, r2]
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b299      	uxth	r1, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2256      	movs	r2, #86	@ 0x56
 800674a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2256      	movs	r2, #86	@ 0x56
 8006750:	5a9b      	ldrh	r3, [r3, r2]
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1c8      	bne.n	80066ea <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	0013      	movs	r3, r2
 8006762:	2200      	movs	r2, #0
 8006764:	2140      	movs	r1, #64	@ 0x40
 8006766:	f001 f86f 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 800676a:	1e03      	subs	r3, r0, #0
 800676c:	d005      	beq.n	800677a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2288      	movs	r2, #136	@ 0x88
 8006772:	2120      	movs	r1, #32
 8006774:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e006      	b.n	8006788 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2288      	movs	r2, #136	@ 0x88
 800677e:	2120      	movs	r1, #32
 8006780:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	e000      	b.n	8006788 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006786:	2302      	movs	r3, #2
  }
}
 8006788:	0018      	movs	r0, r3
 800678a:	46bd      	mov	sp, r7
 800678c:	b008      	add	sp, #32
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	1dbb      	adds	r3, r7, #6
 800679c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	228c      	movs	r2, #140	@ 0x8c
 80067a2:	589b      	ldr	r3, [r3, r2]
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d14f      	bne.n	8006848 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_UART_Receive_IT+0x26>
 80067ae:	1dbb      	adds	r3, r7, #6
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e047      	b.n	800684a <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	2380      	movs	r3, #128	@ 0x80
 80067c0:	015b      	lsls	r3, r3, #5
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d109      	bne.n	80067da <HAL_UART_Receive_IT+0x4a>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2201      	movs	r2, #1
 80067d2:	4013      	ands	r3, r2
 80067d4:	d001      	beq.n	80067da <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e037      	b.n	800684a <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006854 <HAL_UART_Receive_IT+0xc4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d025      	beq.n	8006836 <HAL_UART_Receive_IT+0xa6>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006858 <HAL_UART_Receive_IT+0xc8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d020      	beq.n	8006836 <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	2380      	movs	r3, #128	@ 0x80
 80067fc:	041b      	lsls	r3, r3, #16
 80067fe:	4013      	ands	r3, r2
 8006800:	d019      	beq.n	8006836 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006802:	f3ef 8310 	mrs	r3, PRIMASK
 8006806:	613b      	str	r3, [r7, #16]
  return(result);
 8006808:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	2301      	movs	r3, #1
 800680e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f383 8810 	msr	PRIMASK, r3
}
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2180      	movs	r1, #128	@ 0x80
 8006824:	04c9      	lsls	r1, r1, #19
 8006826:	430a      	orrs	r2, r1
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f383 8810 	msr	PRIMASK, r3
}
 8006834:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006836:	1dbb      	adds	r3, r7, #6
 8006838:	881a      	ldrh	r2, [r3, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	0018      	movs	r0, r3
 8006840:	f001 f872 	bl	8007928 <UART_Start_Receive_IT>
 8006844:	0003      	movs	r3, r0
 8006846:	e000      	b.n	800684a <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	0018      	movs	r0, r3
 800684c:	46bd      	mov	sp, r7
 800684e:	b008      	add	sp, #32
 8006850:	bd80      	pop	{r7, pc}
 8006852:	46c0      	nop			@ (mov r8, r8)
 8006854:	40008000 	.word	0x40008000
 8006858:	40008400 	.word	0x40008400

0800685c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800685c:	b5b0      	push	{r4, r5, r7, lr}
 800685e:	b0aa      	sub	sp, #168	@ 0xa8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	22a4      	movs	r2, #164	@ 0xa4
 800686c:	18b9      	adds	r1, r7, r2
 800686e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	20a0      	movs	r0, #160	@ 0xa0
 8006878:	1839      	adds	r1, r7, r0
 800687a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	249c      	movs	r4, #156	@ 0x9c
 8006884:	1939      	adds	r1, r7, r4
 8006886:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006888:	0011      	movs	r1, r2
 800688a:	18bb      	adds	r3, r7, r2
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4aa2      	ldr	r2, [pc, #648]	@ (8006b18 <HAL_UART_IRQHandler+0x2bc>)
 8006890:	4013      	ands	r3, r2
 8006892:	2298      	movs	r2, #152	@ 0x98
 8006894:	18bd      	adds	r5, r7, r2
 8006896:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006898:	18bb      	adds	r3, r7, r2
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d11a      	bne.n	80068d6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2220      	movs	r2, #32
 80068a6:	4013      	ands	r3, r2
 80068a8:	d015      	beq.n	80068d6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068aa:	183b      	adds	r3, r7, r0
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2220      	movs	r2, #32
 80068b0:	4013      	ands	r3, r2
 80068b2:	d105      	bne.n	80068c0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068b4:	193b      	adds	r3, r7, r4
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	2380      	movs	r3, #128	@ 0x80
 80068ba:	055b      	lsls	r3, r3, #21
 80068bc:	4013      	ands	r3, r2
 80068be:	d00a      	beq.n	80068d6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d100      	bne.n	80068ca <HAL_UART_IRQHandler+0x6e>
 80068c8:	e2dc      	b.n	8006e84 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	0010      	movs	r0, r2
 80068d2:	4798      	blx	r3
      }
      return;
 80068d4:	e2d6      	b.n	8006e84 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068d6:	2398      	movs	r3, #152	@ 0x98
 80068d8:	18fb      	adds	r3, r7, r3
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d100      	bne.n	80068e2 <HAL_UART_IRQHandler+0x86>
 80068e0:	e122      	b.n	8006b28 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068e2:	239c      	movs	r3, #156	@ 0x9c
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a8c      	ldr	r2, [pc, #560]	@ (8006b1c <HAL_UART_IRQHandler+0x2c0>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	d106      	bne.n	80068fc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80068ee:	23a0      	movs	r3, #160	@ 0xa0
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a8a      	ldr	r2, [pc, #552]	@ (8006b20 <HAL_UART_IRQHandler+0x2c4>)
 80068f6:	4013      	ands	r3, r2
 80068f8:	d100      	bne.n	80068fc <HAL_UART_IRQHandler+0xa0>
 80068fa:	e115      	b.n	8006b28 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068fc:	23a4      	movs	r3, #164	@ 0xa4
 80068fe:	18fb      	adds	r3, r7, r3
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2201      	movs	r2, #1
 8006904:	4013      	ands	r3, r2
 8006906:	d012      	beq.n	800692e <HAL_UART_IRQHandler+0xd2>
 8006908:	23a0      	movs	r3, #160	@ 0xa0
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	2380      	movs	r3, #128	@ 0x80
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4013      	ands	r3, r2
 8006914:	d00b      	beq.n	800692e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2201      	movs	r2, #1
 800691c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2290      	movs	r2, #144	@ 0x90
 8006922:	589b      	ldr	r3, [r3, r2]
 8006924:	2201      	movs	r2, #1
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2190      	movs	r1, #144	@ 0x90
 800692c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800692e:	23a4      	movs	r3, #164	@ 0xa4
 8006930:	18fb      	adds	r3, r7, r3
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2202      	movs	r2, #2
 8006936:	4013      	ands	r3, r2
 8006938:	d011      	beq.n	800695e <HAL_UART_IRQHandler+0x102>
 800693a:	239c      	movs	r3, #156	@ 0x9c
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2201      	movs	r2, #1
 8006942:	4013      	ands	r3, r2
 8006944:	d00b      	beq.n	800695e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2202      	movs	r2, #2
 800694c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2290      	movs	r2, #144	@ 0x90
 8006952:	589b      	ldr	r3, [r3, r2]
 8006954:	2204      	movs	r2, #4
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2190      	movs	r1, #144	@ 0x90
 800695c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800695e:	23a4      	movs	r3, #164	@ 0xa4
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2204      	movs	r2, #4
 8006966:	4013      	ands	r3, r2
 8006968:	d011      	beq.n	800698e <HAL_UART_IRQHandler+0x132>
 800696a:	239c      	movs	r3, #156	@ 0x9c
 800696c:	18fb      	adds	r3, r7, r3
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2201      	movs	r2, #1
 8006972:	4013      	ands	r3, r2
 8006974:	d00b      	beq.n	800698e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2204      	movs	r2, #4
 800697c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2290      	movs	r2, #144	@ 0x90
 8006982:	589b      	ldr	r3, [r3, r2]
 8006984:	2202      	movs	r2, #2
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2190      	movs	r1, #144	@ 0x90
 800698c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800698e:	23a4      	movs	r3, #164	@ 0xa4
 8006990:	18fb      	adds	r3, r7, r3
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2208      	movs	r2, #8
 8006996:	4013      	ands	r3, r2
 8006998:	d017      	beq.n	80069ca <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800699a:	23a0      	movs	r3, #160	@ 0xa0
 800699c:	18fb      	adds	r3, r7, r3
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2220      	movs	r2, #32
 80069a2:	4013      	ands	r3, r2
 80069a4:	d105      	bne.n	80069b2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069a6:	239c      	movs	r3, #156	@ 0x9c
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a5b      	ldr	r2, [pc, #364]	@ (8006b1c <HAL_UART_IRQHandler+0x2c0>)
 80069ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069b0:	d00b      	beq.n	80069ca <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2208      	movs	r2, #8
 80069b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2290      	movs	r2, #144	@ 0x90
 80069be:	589b      	ldr	r3, [r3, r2]
 80069c0:	2208      	movs	r2, #8
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2190      	movs	r1, #144	@ 0x90
 80069c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069ca:	23a4      	movs	r3, #164	@ 0xa4
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	2380      	movs	r3, #128	@ 0x80
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	4013      	ands	r3, r2
 80069d6:	d013      	beq.n	8006a00 <HAL_UART_IRQHandler+0x1a4>
 80069d8:	23a0      	movs	r3, #160	@ 0xa0
 80069da:	18fb      	adds	r3, r7, r3
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	2380      	movs	r3, #128	@ 0x80
 80069e0:	04db      	lsls	r3, r3, #19
 80069e2:	4013      	ands	r3, r2
 80069e4:	d00c      	beq.n	8006a00 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2280      	movs	r2, #128	@ 0x80
 80069ec:	0112      	lsls	r2, r2, #4
 80069ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2290      	movs	r2, #144	@ 0x90
 80069f4:	589b      	ldr	r3, [r3, r2]
 80069f6:	2220      	movs	r2, #32
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2190      	movs	r1, #144	@ 0x90
 80069fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2290      	movs	r2, #144	@ 0x90
 8006a04:	589b      	ldr	r3, [r3, r2]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d100      	bne.n	8006a0c <HAL_UART_IRQHandler+0x1b0>
 8006a0a:	e23d      	b.n	8006e88 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a0c:	23a4      	movs	r3, #164	@ 0xa4
 8006a0e:	18fb      	adds	r3, r7, r3
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2220      	movs	r2, #32
 8006a14:	4013      	ands	r3, r2
 8006a16:	d015      	beq.n	8006a44 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a18:	23a0      	movs	r3, #160	@ 0xa0
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	4013      	ands	r3, r2
 8006a22:	d106      	bne.n	8006a32 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a24:	239c      	movs	r3, #156	@ 0x9c
 8006a26:	18fb      	adds	r3, r7, r3
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	2380      	movs	r3, #128	@ 0x80
 8006a2c:	055b      	lsls	r3, r3, #21
 8006a2e:	4013      	ands	r3, r2
 8006a30:	d008      	beq.n	8006a44 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d004      	beq.n	8006a44 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	0010      	movs	r0, r2
 8006a42:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2290      	movs	r2, #144	@ 0x90
 8006a48:	589b      	ldr	r3, [r3, r2]
 8006a4a:	2194      	movs	r1, #148	@ 0x94
 8006a4c:	187a      	adds	r2, r7, r1
 8006a4e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2240      	movs	r2, #64	@ 0x40
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b40      	cmp	r3, #64	@ 0x40
 8006a5c:	d004      	beq.n	8006a68 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a5e:	187b      	adds	r3, r7, r1
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2228      	movs	r2, #40	@ 0x28
 8006a64:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a66:	d04c      	beq.n	8006b02 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f001 f880 	bl	8007b70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2240      	movs	r2, #64	@ 0x40
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b40      	cmp	r3, #64	@ 0x40
 8006a7c:	d13c      	bne.n	8006af8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a82:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006a84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a86:	2090      	movs	r0, #144	@ 0x90
 8006a88:	183a      	adds	r2, r7, r0
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a92:	f383 8810 	msr	PRIMASK, r3
}
 8006a96:	46c0      	nop			@ (mov r8, r8)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2140      	movs	r1, #64	@ 0x40
 8006aa4:	438a      	bics	r2, r1
 8006aa6:	609a      	str	r2, [r3, #8]
 8006aa8:	183b      	adds	r3, r7, r0
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ab0:	f383 8810 	msr	PRIMASK, r3
}
 8006ab4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2280      	movs	r2, #128	@ 0x80
 8006aba:	589b      	ldr	r3, [r3, r2]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d016      	beq.n	8006aee <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2280      	movs	r2, #128	@ 0x80
 8006ac4:	589b      	ldr	r3, [r3, r2]
 8006ac6:	4a17      	ldr	r2, [pc, #92]	@ (8006b24 <HAL_UART_IRQHandler+0x2c8>)
 8006ac8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2280      	movs	r2, #128	@ 0x80
 8006ace:	589b      	ldr	r3, [r3, r2]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f7fc fe79 	bl	80037c8 <HAL_DMA_Abort_IT>
 8006ad6:	1e03      	subs	r3, r0, #0
 8006ad8:	d01c      	beq.n	8006b14 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2280      	movs	r2, #128	@ 0x80
 8006ade:	589b      	ldr	r3, [r3, r2]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	2180      	movs	r1, #128	@ 0x80
 8006ae6:	5852      	ldr	r2, [r2, r1]
 8006ae8:	0010      	movs	r0, r2
 8006aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	e012      	b.n	8006b14 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	0018      	movs	r0, r3
 8006af2:	f000 f9e1 	bl	8006eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af6:	e00d      	b.n	8006b14 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	0018      	movs	r0, r3
 8006afc:	f000 f9dc 	bl	8006eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b00:	e008      	b.n	8006b14 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0018      	movs	r0, r3
 8006b06:	f000 f9d7 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2290      	movs	r2, #144	@ 0x90
 8006b0e:	2100      	movs	r1, #0
 8006b10:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006b12:	e1b9      	b.n	8006e88 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b14:	46c0      	nop			@ (mov r8, r8)
    return;
 8006b16:	e1b7      	b.n	8006e88 <HAL_UART_IRQHandler+0x62c>
 8006b18:	0000080f 	.word	0x0000080f
 8006b1c:	10000001 	.word	0x10000001
 8006b20:	04000120 	.word	0x04000120
 8006b24:	08007c3d 	.word	0x08007c3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d000      	beq.n	8006b32 <HAL_UART_IRQHandler+0x2d6>
 8006b30:	e13e      	b.n	8006db0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b32:	23a4      	movs	r3, #164	@ 0xa4
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2210      	movs	r2, #16
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d100      	bne.n	8006b40 <HAL_UART_IRQHandler+0x2e4>
 8006b3e:	e137      	b.n	8006db0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b40:	23a0      	movs	r3, #160	@ 0xa0
 8006b42:	18fb      	adds	r3, r7, r3
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2210      	movs	r2, #16
 8006b48:	4013      	ands	r3, r2
 8006b4a:	d100      	bne.n	8006b4e <HAL_UART_IRQHandler+0x2f2>
 8006b4c:	e130      	b.n	8006db0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2210      	movs	r2, #16
 8006b54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2240      	movs	r2, #64	@ 0x40
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b40      	cmp	r3, #64	@ 0x40
 8006b62:	d000      	beq.n	8006b66 <HAL_UART_IRQHandler+0x30a>
 8006b64:	e0a4      	b.n	8006cb0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2280      	movs	r2, #128	@ 0x80
 8006b6a:	589b      	ldr	r3, [r3, r2]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	217e      	movs	r1, #126	@ 0x7e
 8006b72:	187b      	adds	r3, r7, r1
 8006b74:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006b76:	187b      	adds	r3, r7, r1
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d100      	bne.n	8006b80 <HAL_UART_IRQHandler+0x324>
 8006b7e:	e185      	b.n	8006e8c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	225c      	movs	r2, #92	@ 0x5c
 8006b84:	5a9b      	ldrh	r3, [r3, r2]
 8006b86:	187a      	adds	r2, r7, r1
 8006b88:	8812      	ldrh	r2, [r2, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d300      	bcc.n	8006b90 <HAL_UART_IRQHandler+0x334>
 8006b8e:	e17d      	b.n	8006e8c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	187a      	adds	r2, r7, r1
 8006b94:	215e      	movs	r1, #94	@ 0x5e
 8006b96:	8812      	ldrh	r2, [r2, #0]
 8006b98:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2280      	movs	r2, #128	@ 0x80
 8006b9e:	589b      	ldr	r3, [r3, r2]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	d170      	bne.n	8006c8c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006baa:	f3ef 8310 	mrs	r3, PRIMASK
 8006bae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bb2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bba:	f383 8810 	msr	PRIMASK, r3
}
 8006bbe:	46c0      	nop			@ (mov r8, r8)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	49b4      	ldr	r1, [pc, #720]	@ (8006e9c <HAL_UART_IRQHandler+0x640>)
 8006bcc:	400a      	ands	r2, r1
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd6:	f383 8810 	msr	PRIMASK, r3
}
 8006bda:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006be6:	2301      	movs	r3, #1
 8006be8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bec:	f383 8810 	msr	PRIMASK, r3
}
 8006bf0:	46c0      	nop			@ (mov r8, r8)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	438a      	bics	r2, r1
 8006c00:	609a      	str	r2, [r3, #8]
 8006c02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c04:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c08:	f383 8810 	msr	PRIMASK, r3
}
 8006c0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c16:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c18:	2301      	movs	r3, #1
 8006c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c1e:	f383 8810 	msr	PRIMASK, r3
}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2140      	movs	r1, #64	@ 0x40
 8006c30:	438a      	bics	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]
 8006c34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c36:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c3a:	f383 8810 	msr	PRIMASK, r3
}
 8006c3e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	228c      	movs	r2, #140	@ 0x8c
 8006c44:	2120      	movs	r1, #32
 8006c46:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c52:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c58:	2301      	movs	r3, #1
 8006c5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c5e:	f383 8810 	msr	PRIMASK, r3
}
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2110      	movs	r1, #16
 8006c70:	438a      	bics	r2, r1
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c7a:	f383 8810 	msr	PRIMASK, r3
}
 8006c7e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2280      	movs	r2, #128	@ 0x80
 8006c84:	589b      	ldr	r3, [r3, r2]
 8006c86:	0018      	movs	r0, r3
 8006c88:	f7fc fd3e 	bl	8003708 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	225c      	movs	r2, #92	@ 0x5c
 8006c96:	5a9a      	ldrh	r2, [r3, r2]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	215e      	movs	r1, #94	@ 0x5e
 8006c9c:	5a5b      	ldrh	r3, [r3, r1]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	0011      	movs	r1, r2
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f000 f90d 	bl	8006ec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cae:	e0ed      	b.n	8006e8c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	225c      	movs	r2, #92	@ 0x5c
 8006cb4:	5a99      	ldrh	r1, [r3, r2]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	225e      	movs	r2, #94	@ 0x5e
 8006cba:	5a9b      	ldrh	r3, [r3, r2]
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	208e      	movs	r0, #142	@ 0x8e
 8006cc0:	183b      	adds	r3, r7, r0
 8006cc2:	1a8a      	subs	r2, r1, r2
 8006cc4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	225e      	movs	r2, #94	@ 0x5e
 8006cca:	5a9b      	ldrh	r3, [r3, r2]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d100      	bne.n	8006cd4 <HAL_UART_IRQHandler+0x478>
 8006cd2:	e0dd      	b.n	8006e90 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006cd4:	183b      	adds	r3, r7, r0
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d100      	bne.n	8006cde <HAL_UART_IRQHandler+0x482>
 8006cdc:	e0d8      	b.n	8006e90 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cde:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ce6:	2488      	movs	r4, #136	@ 0x88
 8006ce8:	193a      	adds	r2, r7, r4
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	2301      	movs	r3, #1
 8006cee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f383 8810 	msr	PRIMASK, r3
}
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4967      	ldr	r1, [pc, #412]	@ (8006ea0 <HAL_UART_IRQHandler+0x644>)
 8006d04:	400a      	ands	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	193b      	adds	r3, r7, r4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f383 8810 	msr	PRIMASK, r3
}
 8006d14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d16:	f3ef 8310 	mrs	r3, PRIMASK
 8006d1a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d1c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d1e:	2484      	movs	r4, #132	@ 0x84
 8006d20:	193a      	adds	r2, r7, r4
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	2301      	movs	r3, #1
 8006d26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f383 8810 	msr	PRIMASK, r3
}
 8006d2e:	46c0      	nop			@ (mov r8, r8)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	495a      	ldr	r1, [pc, #360]	@ (8006ea4 <HAL_UART_IRQHandler+0x648>)
 8006d3c:	400a      	ands	r2, r1
 8006d3e:	609a      	str	r2, [r3, #8]
 8006d40:	193b      	adds	r3, r7, r4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	f383 8810 	msr	PRIMASK, r3
}
 8006d4c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	228c      	movs	r2, #140	@ 0x8c
 8006d52:	2120      	movs	r1, #32
 8006d54:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d62:	f3ef 8310 	mrs	r3, PRIMASK
 8006d66:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d6a:	2480      	movs	r4, #128	@ 0x80
 8006d6c:	193a      	adds	r2, r7, r4
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	2301      	movs	r3, #1
 8006d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d76:	f383 8810 	msr	PRIMASK, r3
}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2110      	movs	r1, #16
 8006d88:	438a      	bics	r2, r1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	193b      	adds	r3, r7, r4
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	f383 8810 	msr	PRIMASK, r3
}
 8006d98:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006da0:	183b      	adds	r3, r7, r0
 8006da2:	881a      	ldrh	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0011      	movs	r1, r2
 8006da8:	0018      	movs	r0, r3
 8006daa:	f000 f88d 	bl	8006ec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dae:	e06f      	b.n	8006e90 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006db0:	23a4      	movs	r3, #164	@ 0xa4
 8006db2:	18fb      	adds	r3, r7, r3
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	2380      	movs	r3, #128	@ 0x80
 8006db8:	035b      	lsls	r3, r3, #13
 8006dba:	4013      	ands	r3, r2
 8006dbc:	d010      	beq.n	8006de0 <HAL_UART_IRQHandler+0x584>
 8006dbe:	239c      	movs	r3, #156	@ 0x9c
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	2380      	movs	r3, #128	@ 0x80
 8006dc6:	03db      	lsls	r3, r3, #15
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2280      	movs	r2, #128	@ 0x80
 8006dd2:	0352      	lsls	r2, r2, #13
 8006dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f001 fc9f 	bl	800871c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dde:	e05a      	b.n	8006e96 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006de0:	23a4      	movs	r3, #164	@ 0xa4
 8006de2:	18fb      	adds	r3, r7, r3
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2280      	movs	r2, #128	@ 0x80
 8006de8:	4013      	ands	r3, r2
 8006dea:	d016      	beq.n	8006e1a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006dec:	23a0      	movs	r3, #160	@ 0xa0
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2280      	movs	r2, #128	@ 0x80
 8006df4:	4013      	ands	r3, r2
 8006df6:	d106      	bne.n	8006e06 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006df8:	239c      	movs	r3, #156	@ 0x9c
 8006dfa:	18fb      	adds	r3, r7, r3
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	2380      	movs	r3, #128	@ 0x80
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	4013      	ands	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d042      	beq.n	8006e94 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	0010      	movs	r0, r2
 8006e16:	4798      	blx	r3
    }
    return;
 8006e18:	e03c      	b.n	8006e94 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e1a:	23a4      	movs	r3, #164	@ 0xa4
 8006e1c:	18fb      	adds	r3, r7, r3
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2240      	movs	r2, #64	@ 0x40
 8006e22:	4013      	ands	r3, r2
 8006e24:	d00a      	beq.n	8006e3c <HAL_UART_IRQHandler+0x5e0>
 8006e26:	23a0      	movs	r3, #160	@ 0xa0
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2240      	movs	r2, #64	@ 0x40
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d004      	beq.n	8006e3c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f000 ff18 	bl	8007c6a <UART_EndTransmit_IT>
    return;
 8006e3a:	e02c      	b.n	8006e96 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e3c:	23a4      	movs	r3, #164	@ 0xa4
 8006e3e:	18fb      	adds	r3, r7, r3
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	2380      	movs	r3, #128	@ 0x80
 8006e44:	041b      	lsls	r3, r3, #16
 8006e46:	4013      	ands	r3, r2
 8006e48:	d00b      	beq.n	8006e62 <HAL_UART_IRQHandler+0x606>
 8006e4a:	23a0      	movs	r3, #160	@ 0xa0
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	2380      	movs	r3, #128	@ 0x80
 8006e52:	05db      	lsls	r3, r3, #23
 8006e54:	4013      	ands	r3, r2
 8006e56:	d004      	beq.n	8006e62 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f001 fc6e 	bl	800873c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e60:	e019      	b.n	8006e96 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e62:	23a4      	movs	r3, #164	@ 0xa4
 8006e64:	18fb      	adds	r3, r7, r3
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	2380      	movs	r3, #128	@ 0x80
 8006e6a:	045b      	lsls	r3, r3, #17
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	d012      	beq.n	8006e96 <HAL_UART_IRQHandler+0x63a>
 8006e70:	23a0      	movs	r3, #160	@ 0xa0
 8006e72:	18fb      	adds	r3, r7, r3
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	da0d      	bge.n	8006e96 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f001 fc55 	bl	800872c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e82:	e008      	b.n	8006e96 <HAL_UART_IRQHandler+0x63a>
      return;
 8006e84:	46c0      	nop			@ (mov r8, r8)
 8006e86:	e006      	b.n	8006e96 <HAL_UART_IRQHandler+0x63a>
    return;
 8006e88:	46c0      	nop			@ (mov r8, r8)
 8006e8a:	e004      	b.n	8006e96 <HAL_UART_IRQHandler+0x63a>
      return;
 8006e8c:	46c0      	nop			@ (mov r8, r8)
 8006e8e:	e002      	b.n	8006e96 <HAL_UART_IRQHandler+0x63a>
      return;
 8006e90:	46c0      	nop			@ (mov r8, r8)
 8006e92:	e000      	b.n	8006e96 <HAL_UART_IRQHandler+0x63a>
    return;
 8006e94:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b02a      	add	sp, #168	@ 0xa8
 8006e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e9c:	fffffeff 	.word	0xfffffeff
 8006ea0:	fffffedf 	.word	0xfffffedf
 8006ea4:	effffffe 	.word	0xeffffffe

08006ea8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006eb0:	46c0      	nop			@ (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ec0:	46c0      	nop			@ (mov r8, r8)
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	000a      	movs	r2, r1
 8006ed2:	1cbb      	adds	r3, r7, #2
 8006ed4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ed6:	46c0      	nop			@ (mov r8, r8)
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b002      	add	sp, #8
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee0:	b5b0      	push	{r4, r5, r7, lr}
 8006ee2:	b090      	sub	sp, #64	@ 0x40
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ee8:	231a      	movs	r3, #26
 8006eea:	2220      	movs	r2, #32
 8006eec:	189b      	adds	r3, r3, r2
 8006eee:	19db      	adds	r3, r3, r7
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	431a      	orrs	r2, r3
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4ac1      	ldr	r2, [pc, #772]	@ (8007218 <UART_SetConfig+0x338>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	0019      	movs	r1, r3
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4abc      	ldr	r2, [pc, #752]	@ (800721c <UART_SetConfig+0x33c>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	68d9      	ldr	r1, [r3, #12]
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	0003      	movs	r3, r0
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4ab6      	ldr	r2, [pc, #728]	@ (8007220 <UART_SetConfig+0x340>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d009      	beq.n	8006f60 <UART_SetConfig+0x80>
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4ab4      	ldr	r2, [pc, #720]	@ (8007224 <UART_SetConfig+0x344>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d004      	beq.n	8006f60 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	4ab0      	ldr	r2, [pc, #704]	@ (8007228 <UART_SetConfig+0x348>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f72:	430b      	orrs	r3, r1
 8006f74:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7c:	220f      	movs	r2, #15
 8006f7e:	4393      	bics	r3, r2
 8006f80:	0018      	movs	r0, r3
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	0003      	movs	r3, r0
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4aa5      	ldr	r2, [pc, #660]	@ (800722c <UART_SetConfig+0x34c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d131      	bne.n	8006ffe <UART_SetConfig+0x11e>
 8006f9a:	4ba5      	ldr	r3, [pc, #660]	@ (8007230 <UART_SetConfig+0x350>)
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d01d      	beq.n	8006fe2 <UART_SetConfig+0x102>
 8006fa6:	d823      	bhi.n	8006ff0 <UART_SetConfig+0x110>
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d00c      	beq.n	8006fc6 <UART_SetConfig+0xe6>
 8006fac:	d820      	bhi.n	8006ff0 <UART_SetConfig+0x110>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <UART_SetConfig+0xd8>
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d00e      	beq.n	8006fd4 <UART_SetConfig+0xf4>
 8006fb6:	e01b      	b.n	8006ff0 <UART_SetConfig+0x110>
 8006fb8:	231b      	movs	r3, #27
 8006fba:	2220      	movs	r2, #32
 8006fbc:	189b      	adds	r3, r3, r2
 8006fbe:	19db      	adds	r3, r3, r7
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	e154      	b.n	8007270 <UART_SetConfig+0x390>
 8006fc6:	231b      	movs	r3, #27
 8006fc8:	2220      	movs	r2, #32
 8006fca:	189b      	adds	r3, r3, r2
 8006fcc:	19db      	adds	r3, r3, r7
 8006fce:	2202      	movs	r2, #2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	e14d      	b.n	8007270 <UART_SetConfig+0x390>
 8006fd4:	231b      	movs	r3, #27
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	189b      	adds	r3, r3, r2
 8006fda:	19db      	adds	r3, r3, r7
 8006fdc:	2204      	movs	r2, #4
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	e146      	b.n	8007270 <UART_SetConfig+0x390>
 8006fe2:	231b      	movs	r3, #27
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	189b      	adds	r3, r3, r2
 8006fe8:	19db      	adds	r3, r3, r7
 8006fea:	2208      	movs	r2, #8
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e13f      	b.n	8007270 <UART_SetConfig+0x390>
 8006ff0:	231b      	movs	r3, #27
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	189b      	adds	r3, r3, r2
 8006ff6:	19db      	adds	r3, r3, r7
 8006ff8:	2210      	movs	r2, #16
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e138      	b.n	8007270 <UART_SetConfig+0x390>
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a8c      	ldr	r2, [pc, #560]	@ (8007234 <UART_SetConfig+0x354>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d131      	bne.n	800706c <UART_SetConfig+0x18c>
 8007008:	4b89      	ldr	r3, [pc, #548]	@ (8007230 <UART_SetConfig+0x350>)
 800700a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700c:	220c      	movs	r2, #12
 800700e:	4013      	ands	r3, r2
 8007010:	2b0c      	cmp	r3, #12
 8007012:	d01d      	beq.n	8007050 <UART_SetConfig+0x170>
 8007014:	d823      	bhi.n	800705e <UART_SetConfig+0x17e>
 8007016:	2b08      	cmp	r3, #8
 8007018:	d00c      	beq.n	8007034 <UART_SetConfig+0x154>
 800701a:	d820      	bhi.n	800705e <UART_SetConfig+0x17e>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <UART_SetConfig+0x146>
 8007020:	2b04      	cmp	r3, #4
 8007022:	d00e      	beq.n	8007042 <UART_SetConfig+0x162>
 8007024:	e01b      	b.n	800705e <UART_SetConfig+0x17e>
 8007026:	231b      	movs	r3, #27
 8007028:	2220      	movs	r2, #32
 800702a:	189b      	adds	r3, r3, r2
 800702c:	19db      	adds	r3, r3, r7
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	e11d      	b.n	8007270 <UART_SetConfig+0x390>
 8007034:	231b      	movs	r3, #27
 8007036:	2220      	movs	r2, #32
 8007038:	189b      	adds	r3, r3, r2
 800703a:	19db      	adds	r3, r3, r7
 800703c:	2202      	movs	r2, #2
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e116      	b.n	8007270 <UART_SetConfig+0x390>
 8007042:	231b      	movs	r3, #27
 8007044:	2220      	movs	r2, #32
 8007046:	189b      	adds	r3, r3, r2
 8007048:	19db      	adds	r3, r3, r7
 800704a:	2204      	movs	r2, #4
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	e10f      	b.n	8007270 <UART_SetConfig+0x390>
 8007050:	231b      	movs	r3, #27
 8007052:	2220      	movs	r2, #32
 8007054:	189b      	adds	r3, r3, r2
 8007056:	19db      	adds	r3, r3, r7
 8007058:	2208      	movs	r2, #8
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e108      	b.n	8007270 <UART_SetConfig+0x390>
 800705e:	231b      	movs	r3, #27
 8007060:	2220      	movs	r2, #32
 8007062:	189b      	adds	r3, r3, r2
 8007064:	19db      	adds	r3, r3, r7
 8007066:	2210      	movs	r2, #16
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	e101      	b.n	8007270 <UART_SetConfig+0x390>
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a71      	ldr	r2, [pc, #452]	@ (8007238 <UART_SetConfig+0x358>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d131      	bne.n	80070da <UART_SetConfig+0x1fa>
 8007076:	4b6e      	ldr	r3, [pc, #440]	@ (8007230 <UART_SetConfig+0x350>)
 8007078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707a:	2230      	movs	r2, #48	@ 0x30
 800707c:	4013      	ands	r3, r2
 800707e:	2b30      	cmp	r3, #48	@ 0x30
 8007080:	d01d      	beq.n	80070be <UART_SetConfig+0x1de>
 8007082:	d823      	bhi.n	80070cc <UART_SetConfig+0x1ec>
 8007084:	2b20      	cmp	r3, #32
 8007086:	d00c      	beq.n	80070a2 <UART_SetConfig+0x1c2>
 8007088:	d820      	bhi.n	80070cc <UART_SetConfig+0x1ec>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <UART_SetConfig+0x1b4>
 800708e:	2b10      	cmp	r3, #16
 8007090:	d00e      	beq.n	80070b0 <UART_SetConfig+0x1d0>
 8007092:	e01b      	b.n	80070cc <UART_SetConfig+0x1ec>
 8007094:	231b      	movs	r3, #27
 8007096:	2220      	movs	r2, #32
 8007098:	189b      	adds	r3, r3, r2
 800709a:	19db      	adds	r3, r3, r7
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	e0e6      	b.n	8007270 <UART_SetConfig+0x390>
 80070a2:	231b      	movs	r3, #27
 80070a4:	2220      	movs	r2, #32
 80070a6:	189b      	adds	r3, r3, r2
 80070a8:	19db      	adds	r3, r3, r7
 80070aa:	2202      	movs	r2, #2
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e0df      	b.n	8007270 <UART_SetConfig+0x390>
 80070b0:	231b      	movs	r3, #27
 80070b2:	2220      	movs	r2, #32
 80070b4:	189b      	adds	r3, r3, r2
 80070b6:	19db      	adds	r3, r3, r7
 80070b8:	2204      	movs	r2, #4
 80070ba:	701a      	strb	r2, [r3, #0]
 80070bc:	e0d8      	b.n	8007270 <UART_SetConfig+0x390>
 80070be:	231b      	movs	r3, #27
 80070c0:	2220      	movs	r2, #32
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	2208      	movs	r2, #8
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e0d1      	b.n	8007270 <UART_SetConfig+0x390>
 80070cc:	231b      	movs	r3, #27
 80070ce:	2220      	movs	r2, #32
 80070d0:	189b      	adds	r3, r3, r2
 80070d2:	19db      	adds	r3, r3, r7
 80070d4:	2210      	movs	r2, #16
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	e0ca      	b.n	8007270 <UART_SetConfig+0x390>
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a57      	ldr	r2, [pc, #348]	@ (800723c <UART_SetConfig+0x35c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d106      	bne.n	80070f2 <UART_SetConfig+0x212>
 80070e4:	231b      	movs	r3, #27
 80070e6:	2220      	movs	r2, #32
 80070e8:	189b      	adds	r3, r3, r2
 80070ea:	19db      	adds	r3, r3, r7
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	e0be      	b.n	8007270 <UART_SetConfig+0x390>
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a52      	ldr	r2, [pc, #328]	@ (8007240 <UART_SetConfig+0x360>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d106      	bne.n	800710a <UART_SetConfig+0x22a>
 80070fc:	231b      	movs	r3, #27
 80070fe:	2220      	movs	r2, #32
 8007100:	189b      	adds	r3, r3, r2
 8007102:	19db      	adds	r3, r3, r7
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	e0b2      	b.n	8007270 <UART_SetConfig+0x390>
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a4d      	ldr	r2, [pc, #308]	@ (8007244 <UART_SetConfig+0x364>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d106      	bne.n	8007122 <UART_SetConfig+0x242>
 8007114:	231b      	movs	r3, #27
 8007116:	2220      	movs	r2, #32
 8007118:	189b      	adds	r3, r3, r2
 800711a:	19db      	adds	r3, r3, r7
 800711c:	2200      	movs	r2, #0
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	e0a6      	b.n	8007270 <UART_SetConfig+0x390>
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a3e      	ldr	r2, [pc, #248]	@ (8007220 <UART_SetConfig+0x340>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d13e      	bne.n	80071aa <UART_SetConfig+0x2ca>
 800712c:	4b40      	ldr	r3, [pc, #256]	@ (8007230 <UART_SetConfig+0x350>)
 800712e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007130:	23c0      	movs	r3, #192	@ 0xc0
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	4013      	ands	r3, r2
 8007136:	22c0      	movs	r2, #192	@ 0xc0
 8007138:	0112      	lsls	r2, r2, #4
 800713a:	4293      	cmp	r3, r2
 800713c:	d027      	beq.n	800718e <UART_SetConfig+0x2ae>
 800713e:	22c0      	movs	r2, #192	@ 0xc0
 8007140:	0112      	lsls	r2, r2, #4
 8007142:	4293      	cmp	r3, r2
 8007144:	d82a      	bhi.n	800719c <UART_SetConfig+0x2bc>
 8007146:	2280      	movs	r2, #128	@ 0x80
 8007148:	0112      	lsls	r2, r2, #4
 800714a:	4293      	cmp	r3, r2
 800714c:	d011      	beq.n	8007172 <UART_SetConfig+0x292>
 800714e:	2280      	movs	r2, #128	@ 0x80
 8007150:	0112      	lsls	r2, r2, #4
 8007152:	4293      	cmp	r3, r2
 8007154:	d822      	bhi.n	800719c <UART_SetConfig+0x2bc>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <UART_SetConfig+0x284>
 800715a:	2280      	movs	r2, #128	@ 0x80
 800715c:	00d2      	lsls	r2, r2, #3
 800715e:	4293      	cmp	r3, r2
 8007160:	d00e      	beq.n	8007180 <UART_SetConfig+0x2a0>
 8007162:	e01b      	b.n	800719c <UART_SetConfig+0x2bc>
 8007164:	231b      	movs	r3, #27
 8007166:	2220      	movs	r2, #32
 8007168:	189b      	adds	r3, r3, r2
 800716a:	19db      	adds	r3, r3, r7
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	e07e      	b.n	8007270 <UART_SetConfig+0x390>
 8007172:	231b      	movs	r3, #27
 8007174:	2220      	movs	r2, #32
 8007176:	189b      	adds	r3, r3, r2
 8007178:	19db      	adds	r3, r3, r7
 800717a:	2202      	movs	r2, #2
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	e077      	b.n	8007270 <UART_SetConfig+0x390>
 8007180:	231b      	movs	r3, #27
 8007182:	2220      	movs	r2, #32
 8007184:	189b      	adds	r3, r3, r2
 8007186:	19db      	adds	r3, r3, r7
 8007188:	2204      	movs	r2, #4
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	e070      	b.n	8007270 <UART_SetConfig+0x390>
 800718e:	231b      	movs	r3, #27
 8007190:	2220      	movs	r2, #32
 8007192:	189b      	adds	r3, r3, r2
 8007194:	19db      	adds	r3, r3, r7
 8007196:	2208      	movs	r2, #8
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	e069      	b.n	8007270 <UART_SetConfig+0x390>
 800719c:	231b      	movs	r3, #27
 800719e:	2220      	movs	r2, #32
 80071a0:	189b      	adds	r3, r3, r2
 80071a2:	19db      	adds	r3, r3, r7
 80071a4:	2210      	movs	r2, #16
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	e062      	b.n	8007270 <UART_SetConfig+0x390>
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007224 <UART_SetConfig+0x344>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d157      	bne.n	8007264 <UART_SetConfig+0x384>
 80071b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007230 <UART_SetConfig+0x350>)
 80071b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071b8:	23c0      	movs	r3, #192	@ 0xc0
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4013      	ands	r3, r2
 80071be:	22c0      	movs	r2, #192	@ 0xc0
 80071c0:	0092      	lsls	r2, r2, #2
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d040      	beq.n	8007248 <UART_SetConfig+0x368>
 80071c6:	22c0      	movs	r2, #192	@ 0xc0
 80071c8:	0092      	lsls	r2, r2, #2
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d843      	bhi.n	8007256 <UART_SetConfig+0x376>
 80071ce:	2280      	movs	r2, #128	@ 0x80
 80071d0:	0092      	lsls	r2, r2, #2
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d011      	beq.n	80071fa <UART_SetConfig+0x31a>
 80071d6:	2280      	movs	r2, #128	@ 0x80
 80071d8:	0092      	lsls	r2, r2, #2
 80071da:	4293      	cmp	r3, r2
 80071dc:	d83b      	bhi.n	8007256 <UART_SetConfig+0x376>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <UART_SetConfig+0x30c>
 80071e2:	2280      	movs	r2, #128	@ 0x80
 80071e4:	0052      	lsls	r2, r2, #1
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00e      	beq.n	8007208 <UART_SetConfig+0x328>
 80071ea:	e034      	b.n	8007256 <UART_SetConfig+0x376>
 80071ec:	231b      	movs	r3, #27
 80071ee:	2220      	movs	r2, #32
 80071f0:	189b      	adds	r3, r3, r2
 80071f2:	19db      	adds	r3, r3, r7
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	e03a      	b.n	8007270 <UART_SetConfig+0x390>
 80071fa:	231b      	movs	r3, #27
 80071fc:	2220      	movs	r2, #32
 80071fe:	189b      	adds	r3, r3, r2
 8007200:	19db      	adds	r3, r3, r7
 8007202:	2202      	movs	r2, #2
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e033      	b.n	8007270 <UART_SetConfig+0x390>
 8007208:	231b      	movs	r3, #27
 800720a:	2220      	movs	r2, #32
 800720c:	189b      	adds	r3, r3, r2
 800720e:	19db      	adds	r3, r3, r7
 8007210:	2204      	movs	r2, #4
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	e02c      	b.n	8007270 <UART_SetConfig+0x390>
 8007216:	46c0      	nop			@ (mov r8, r8)
 8007218:	cfff69f3 	.word	0xcfff69f3
 800721c:	ffffcfff 	.word	0xffffcfff
 8007220:	40008000 	.word	0x40008000
 8007224:	40008400 	.word	0x40008400
 8007228:	11fff4ff 	.word	0x11fff4ff
 800722c:	40013800 	.word	0x40013800
 8007230:	40021000 	.word	0x40021000
 8007234:	40004400 	.word	0x40004400
 8007238:	40004800 	.word	0x40004800
 800723c:	40004c00 	.word	0x40004c00
 8007240:	40005000 	.word	0x40005000
 8007244:	40013c00 	.word	0x40013c00
 8007248:	231b      	movs	r3, #27
 800724a:	2220      	movs	r2, #32
 800724c:	189b      	adds	r3, r3, r2
 800724e:	19db      	adds	r3, r3, r7
 8007250:	2208      	movs	r2, #8
 8007252:	701a      	strb	r2, [r3, #0]
 8007254:	e00c      	b.n	8007270 <UART_SetConfig+0x390>
 8007256:	231b      	movs	r3, #27
 8007258:	2220      	movs	r2, #32
 800725a:	189b      	adds	r3, r3, r2
 800725c:	19db      	adds	r3, r3, r7
 800725e:	2210      	movs	r2, #16
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	e005      	b.n	8007270 <UART_SetConfig+0x390>
 8007264:	231b      	movs	r3, #27
 8007266:	2220      	movs	r2, #32
 8007268:	189b      	adds	r3, r3, r2
 800726a:	19db      	adds	r3, r3, r7
 800726c:	2210      	movs	r2, #16
 800726e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4ac1      	ldr	r2, [pc, #772]	@ (800757c <UART_SetConfig+0x69c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d005      	beq.n	8007286 <UART_SetConfig+0x3a6>
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4ac0      	ldr	r2, [pc, #768]	@ (8007580 <UART_SetConfig+0x6a0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d000      	beq.n	8007286 <UART_SetConfig+0x3a6>
 8007284:	e093      	b.n	80073ae <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007286:	231b      	movs	r3, #27
 8007288:	2220      	movs	r2, #32
 800728a:	189b      	adds	r3, r3, r2
 800728c:	19db      	adds	r3, r3, r7
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b08      	cmp	r3, #8
 8007292:	d015      	beq.n	80072c0 <UART_SetConfig+0x3e0>
 8007294:	dc18      	bgt.n	80072c8 <UART_SetConfig+0x3e8>
 8007296:	2b04      	cmp	r3, #4
 8007298:	d00d      	beq.n	80072b6 <UART_SetConfig+0x3d6>
 800729a:	dc15      	bgt.n	80072c8 <UART_SetConfig+0x3e8>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <UART_SetConfig+0x3c6>
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d005      	beq.n	80072b0 <UART_SetConfig+0x3d0>
 80072a4:	e010      	b.n	80072c8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a6:	f7fe f8e7 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 80072aa:	0003      	movs	r3, r0
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ae:	e014      	b.n	80072da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b0:	4bb4      	ldr	r3, [pc, #720]	@ (8007584 <UART_SetConfig+0x6a4>)
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072b4:	e011      	b.n	80072da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b6:	f7fe f853 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 80072ba:	0003      	movs	r3, r0
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072be:	e00c      	b.n	80072da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c0:	2380      	movs	r3, #128	@ 0x80
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072c6:	e008      	b.n	80072da <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80072cc:	231a      	movs	r3, #26
 80072ce:	2220      	movs	r2, #32
 80072d0:	189b      	adds	r3, r3, r2
 80072d2:	19db      	adds	r3, r3, r7
 80072d4:	2201      	movs	r2, #1
 80072d6:	701a      	strb	r2, [r3, #0]
        break;
 80072d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d100      	bne.n	80072e2 <UART_SetConfig+0x402>
 80072e0:	e135      	b.n	800754e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072e6:	4ba8      	ldr	r3, [pc, #672]	@ (8007588 <UART_SetConfig+0x6a8>)
 80072e8:	0052      	lsls	r2, r2, #1
 80072ea:	5ad3      	ldrh	r3, [r2, r3]
 80072ec:	0019      	movs	r1, r3
 80072ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80072f0:	f7f8 ff10 	bl	8000114 <__udivsi3>
 80072f4:	0003      	movs	r3, r0
 80072f6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	0013      	movs	r3, r2
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	189b      	adds	r3, r3, r2
 8007302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007304:	429a      	cmp	r2, r3
 8007306:	d305      	bcc.n	8007314 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800730e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007310:	429a      	cmp	r2, r3
 8007312:	d906      	bls.n	8007322 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007314:	231a      	movs	r3, #26
 8007316:	2220      	movs	r2, #32
 8007318:	189b      	adds	r3, r3, r2
 800731a:	19db      	adds	r3, r3, r7
 800731c:	2201      	movs	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e044      	b.n	80073ac <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	2300      	movs	r3, #0
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800732e:	4b96      	ldr	r3, [pc, #600]	@ (8007588 <UART_SetConfig+0x6a8>)
 8007330:	0052      	lsls	r2, r2, #1
 8007332:	5ad3      	ldrh	r3, [r2, r3]
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	69b8      	ldr	r0, [r7, #24]
 8007340:	69f9      	ldr	r1, [r7, #28]
 8007342:	f7f9 f85d 	bl	8000400 <__aeabi_uldivmod>
 8007346:	0002      	movs	r2, r0
 8007348:	000b      	movs	r3, r1
 800734a:	0e11      	lsrs	r1, r2, #24
 800734c:	021d      	lsls	r5, r3, #8
 800734e:	430d      	orrs	r5, r1
 8007350:	0214      	lsls	r4, r2, #8
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	68b8      	ldr	r0, [r7, #8]
 8007360:	68f9      	ldr	r1, [r7, #12]
 8007362:	1900      	adds	r0, r0, r4
 8007364:	4169      	adcs	r1, r5
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	2300      	movs	r3, #0
 800736e:	607b      	str	r3, [r7, #4]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f7f9 f844 	bl	8000400 <__aeabi_uldivmod>
 8007378:	0002      	movs	r2, r0
 800737a:	000b      	movs	r3, r1
 800737c:	0013      	movs	r3, r2
 800737e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007382:	23c0      	movs	r3, #192	@ 0xc0
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	429a      	cmp	r2, r3
 8007388:	d309      	bcc.n	800739e <UART_SetConfig+0x4be>
 800738a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800738c:	2380      	movs	r3, #128	@ 0x80
 800738e:	035b      	lsls	r3, r3, #13
 8007390:	429a      	cmp	r2, r3
 8007392:	d204      	bcs.n	800739e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800739a:	60da      	str	r2, [r3, #12]
 800739c:	e006      	b.n	80073ac <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800739e:	231a      	movs	r3, #26
 80073a0:	2220      	movs	r2, #32
 80073a2:	189b      	adds	r3, r3, r2
 80073a4:	19db      	adds	r3, r3, r7
 80073a6:	2201      	movs	r2, #1
 80073a8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80073aa:	e0d0      	b.n	800754e <UART_SetConfig+0x66e>
 80073ac:	e0cf      	b.n	800754e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	69da      	ldr	r2, [r3, #28]
 80073b2:	2380      	movs	r3, #128	@ 0x80
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d000      	beq.n	80073bc <UART_SetConfig+0x4dc>
 80073ba:	e070      	b.n	800749e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80073bc:	231b      	movs	r3, #27
 80073be:	2220      	movs	r2, #32
 80073c0:	189b      	adds	r3, r3, r2
 80073c2:	19db      	adds	r3, r3, r7
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d015      	beq.n	80073f6 <UART_SetConfig+0x516>
 80073ca:	dc18      	bgt.n	80073fe <UART_SetConfig+0x51e>
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d00d      	beq.n	80073ec <UART_SetConfig+0x50c>
 80073d0:	dc15      	bgt.n	80073fe <UART_SetConfig+0x51e>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <UART_SetConfig+0x4fc>
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d005      	beq.n	80073e6 <UART_SetConfig+0x506>
 80073da:	e010      	b.n	80073fe <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073dc:	f7fe f84c 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 80073e0:	0003      	movs	r3, r0
 80073e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073e4:	e014      	b.n	8007410 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e6:	4b67      	ldr	r3, [pc, #412]	@ (8007584 <UART_SetConfig+0x6a4>)
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ea:	e011      	b.n	8007410 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ec:	f7fd ffb8 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 80073f0:	0003      	movs	r3, r0
 80073f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073f4:	e00c      	b.n	8007410 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f6:	2380      	movs	r3, #128	@ 0x80
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073fc:	e008      	b.n	8007410 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007402:	231a      	movs	r3, #26
 8007404:	2220      	movs	r2, #32
 8007406:	189b      	adds	r3, r3, r2
 8007408:	19db      	adds	r3, r3, r7
 800740a:	2201      	movs	r2, #1
 800740c:	701a      	strb	r2, [r3, #0]
        break;
 800740e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007412:	2b00      	cmp	r3, #0
 8007414:	d100      	bne.n	8007418 <UART_SetConfig+0x538>
 8007416:	e09a      	b.n	800754e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800741c:	4b5a      	ldr	r3, [pc, #360]	@ (8007588 <UART_SetConfig+0x6a8>)
 800741e:	0052      	lsls	r2, r2, #1
 8007420:	5ad3      	ldrh	r3, [r2, r3]
 8007422:	0019      	movs	r1, r3
 8007424:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007426:	f7f8 fe75 	bl	8000114 <__udivsi3>
 800742a:	0003      	movs	r3, r0
 800742c:	005a      	lsls	r2, r3, #1
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	18d2      	adds	r2, r2, r3
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	0019      	movs	r1, r3
 800743c:	0010      	movs	r0, r2
 800743e:	f7f8 fe69 	bl	8000114 <__udivsi3>
 8007442:	0003      	movs	r3, r0
 8007444:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	2b0f      	cmp	r3, #15
 800744a:	d921      	bls.n	8007490 <UART_SetConfig+0x5b0>
 800744c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800744e:	2380      	movs	r3, #128	@ 0x80
 8007450:	025b      	lsls	r3, r3, #9
 8007452:	429a      	cmp	r2, r3
 8007454:	d21c      	bcs.n	8007490 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	b29a      	uxth	r2, r3
 800745a:	200e      	movs	r0, #14
 800745c:	2420      	movs	r4, #32
 800745e:	1903      	adds	r3, r0, r4
 8007460:	19db      	adds	r3, r3, r7
 8007462:	210f      	movs	r1, #15
 8007464:	438a      	bics	r2, r1
 8007466:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746a:	085b      	lsrs	r3, r3, #1
 800746c:	b29b      	uxth	r3, r3
 800746e:	2207      	movs	r2, #7
 8007470:	4013      	ands	r3, r2
 8007472:	b299      	uxth	r1, r3
 8007474:	1903      	adds	r3, r0, r4
 8007476:	19db      	adds	r3, r3, r7
 8007478:	1902      	adds	r2, r0, r4
 800747a:	19d2      	adds	r2, r2, r7
 800747c:	8812      	ldrh	r2, [r2, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	1902      	adds	r2, r0, r4
 8007488:	19d2      	adds	r2, r2, r7
 800748a:	8812      	ldrh	r2, [r2, #0]
 800748c:	60da      	str	r2, [r3, #12]
 800748e:	e05e      	b.n	800754e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007490:	231a      	movs	r3, #26
 8007492:	2220      	movs	r2, #32
 8007494:	189b      	adds	r3, r3, r2
 8007496:	19db      	adds	r3, r3, r7
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	e057      	b.n	800754e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800749e:	231b      	movs	r3, #27
 80074a0:	2220      	movs	r2, #32
 80074a2:	189b      	adds	r3, r3, r2
 80074a4:	19db      	adds	r3, r3, r7
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d015      	beq.n	80074d8 <UART_SetConfig+0x5f8>
 80074ac:	dc18      	bgt.n	80074e0 <UART_SetConfig+0x600>
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d00d      	beq.n	80074ce <UART_SetConfig+0x5ee>
 80074b2:	dc15      	bgt.n	80074e0 <UART_SetConfig+0x600>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <UART_SetConfig+0x5de>
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d005      	beq.n	80074c8 <UART_SetConfig+0x5e8>
 80074bc:	e010      	b.n	80074e0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074be:	f7fd ffdb 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 80074c2:	0003      	movs	r3, r0
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c6:	e014      	b.n	80074f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c8:	4b2e      	ldr	r3, [pc, #184]	@ (8007584 <UART_SetConfig+0x6a4>)
 80074ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074cc:	e011      	b.n	80074f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ce:	f7fd ff47 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 80074d2:	0003      	movs	r3, r0
 80074d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074d6:	e00c      	b.n	80074f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074d8:	2380      	movs	r3, #128	@ 0x80
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074de:	e008      	b.n	80074f2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80074e4:	231a      	movs	r3, #26
 80074e6:	2220      	movs	r2, #32
 80074e8:	189b      	adds	r3, r3, r2
 80074ea:	19db      	adds	r3, r3, r7
 80074ec:	2201      	movs	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]
        break;
 80074f0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80074f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d02a      	beq.n	800754e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074fc:	4b22      	ldr	r3, [pc, #136]	@ (8007588 <UART_SetConfig+0x6a8>)
 80074fe:	0052      	lsls	r2, r2, #1
 8007500:	5ad3      	ldrh	r3, [r2, r3]
 8007502:	0019      	movs	r1, r3
 8007504:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007506:	f7f8 fe05 	bl	8000114 <__udivsi3>
 800750a:	0003      	movs	r3, r0
 800750c:	001a      	movs	r2, r3
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	18d2      	adds	r2, r2, r3
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	0019      	movs	r1, r3
 800751c:	0010      	movs	r0, r2
 800751e:	f7f8 fdf9 	bl	8000114 <__udivsi3>
 8007522:	0003      	movs	r3, r0
 8007524:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	2b0f      	cmp	r3, #15
 800752a:	d90a      	bls.n	8007542 <UART_SetConfig+0x662>
 800752c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800752e:	2380      	movs	r3, #128	@ 0x80
 8007530:	025b      	lsls	r3, r3, #9
 8007532:	429a      	cmp	r2, r3
 8007534:	d205      	bcs.n	8007542 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	b29a      	uxth	r2, r3
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60da      	str	r2, [r3, #12]
 8007540:	e005      	b.n	800754e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007542:	231a      	movs	r3, #26
 8007544:	2220      	movs	r2, #32
 8007546:	189b      	adds	r3, r3, r2
 8007548:	19db      	adds	r3, r3, r7
 800754a:	2201      	movs	r2, #1
 800754c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	226a      	movs	r2, #106	@ 0x6a
 8007552:	2101      	movs	r1, #1
 8007554:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	2268      	movs	r2, #104	@ 0x68
 800755a:	2101      	movs	r1, #1
 800755c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	2200      	movs	r2, #0
 8007562:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	2200      	movs	r2, #0
 8007568:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800756a:	231a      	movs	r3, #26
 800756c:	2220      	movs	r2, #32
 800756e:	189b      	adds	r3, r3, r2
 8007570:	19db      	adds	r3, r3, r7
 8007572:	781b      	ldrb	r3, [r3, #0]
}
 8007574:	0018      	movs	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	b010      	add	sp, #64	@ 0x40
 800757a:	bdb0      	pop	{r4, r5, r7, pc}
 800757c:	40008000 	.word	0x40008000
 8007580:	40008400 	.word	0x40008400
 8007584:	00f42400 	.word	0x00f42400
 8007588:	080091b0 	.word	0x080091b0

0800758c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	2208      	movs	r2, #8
 800759a:	4013      	ands	r3, r2
 800759c:	d00b      	beq.n	80075b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	4a4a      	ldr	r2, [pc, #296]	@ (80076d0 <UART_AdvFeatureConfig+0x144>)
 80075a6:	4013      	ands	r3, r2
 80075a8:	0019      	movs	r1, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	2201      	movs	r2, #1
 80075bc:	4013      	ands	r3, r2
 80075be:	d00b      	beq.n	80075d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	4a43      	ldr	r2, [pc, #268]	@ (80076d4 <UART_AdvFeatureConfig+0x148>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	0019      	movs	r1, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075dc:	2202      	movs	r2, #2
 80075de:	4013      	ands	r3, r2
 80075e0:	d00b      	beq.n	80075fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4a3b      	ldr	r2, [pc, #236]	@ (80076d8 <UART_AdvFeatureConfig+0x14c>)
 80075ea:	4013      	ands	r3, r2
 80075ec:	0019      	movs	r1, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	2204      	movs	r2, #4
 8007600:	4013      	ands	r3, r2
 8007602:	d00b      	beq.n	800761c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	4a34      	ldr	r2, [pc, #208]	@ (80076dc <UART_AdvFeatureConfig+0x150>)
 800760c:	4013      	ands	r3, r2
 800760e:	0019      	movs	r1, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007620:	2210      	movs	r2, #16
 8007622:	4013      	ands	r3, r2
 8007624:	d00b      	beq.n	800763e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	4a2c      	ldr	r2, [pc, #176]	@ (80076e0 <UART_AdvFeatureConfig+0x154>)
 800762e:	4013      	ands	r3, r2
 8007630:	0019      	movs	r1, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007642:	2220      	movs	r2, #32
 8007644:	4013      	ands	r3, r2
 8007646:	d00b      	beq.n	8007660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	4a25      	ldr	r2, [pc, #148]	@ (80076e4 <UART_AdvFeatureConfig+0x158>)
 8007650:	4013      	ands	r3, r2
 8007652:	0019      	movs	r1, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007664:	2240      	movs	r2, #64	@ 0x40
 8007666:	4013      	ands	r3, r2
 8007668:	d01d      	beq.n	80076a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4a1d      	ldr	r2, [pc, #116]	@ (80076e8 <UART_AdvFeatureConfig+0x15c>)
 8007672:	4013      	ands	r3, r2
 8007674:	0019      	movs	r1, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007686:	2380      	movs	r3, #128	@ 0x80
 8007688:	035b      	lsls	r3, r3, #13
 800768a:	429a      	cmp	r2, r3
 800768c:	d10b      	bne.n	80076a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	4a15      	ldr	r2, [pc, #84]	@ (80076ec <UART_AdvFeatureConfig+0x160>)
 8007696:	4013      	ands	r3, r2
 8007698:	0019      	movs	r1, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	2280      	movs	r2, #128	@ 0x80
 80076ac:	4013      	ands	r3, r2
 80076ae:	d00b      	beq.n	80076c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	4a0e      	ldr	r2, [pc, #56]	@ (80076f0 <UART_AdvFeatureConfig+0x164>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	0019      	movs	r1, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	605a      	str	r2, [r3, #4]
  }
}
 80076c8:	46c0      	nop			@ (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b002      	add	sp, #8
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	ffff7fff 	.word	0xffff7fff
 80076d4:	fffdffff 	.word	0xfffdffff
 80076d8:	fffeffff 	.word	0xfffeffff
 80076dc:	fffbffff 	.word	0xfffbffff
 80076e0:	ffffefff 	.word	0xffffefff
 80076e4:	ffffdfff 	.word	0xffffdfff
 80076e8:	ffefffff 	.word	0xffefffff
 80076ec:	ff9fffff 	.word	0xff9fffff
 80076f0:	fff7ffff 	.word	0xfff7ffff

080076f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b092      	sub	sp, #72	@ 0x48
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2290      	movs	r2, #144	@ 0x90
 8007700:	2100      	movs	r1, #0
 8007702:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007704:	f7fb ff02 	bl	800350c <HAL_GetTick>
 8007708:	0003      	movs	r3, r0
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2208      	movs	r2, #8
 8007714:	4013      	ands	r3, r2
 8007716:	2b08      	cmp	r3, #8
 8007718:	d12d      	bne.n	8007776 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800771a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771c:	2280      	movs	r2, #128	@ 0x80
 800771e:	0391      	lsls	r1, r2, #14
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4a47      	ldr	r2, [pc, #284]	@ (8007840 <UART_CheckIdleState+0x14c>)
 8007724:	9200      	str	r2, [sp, #0]
 8007726:	2200      	movs	r2, #0
 8007728:	f000 f88e 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 800772c:	1e03      	subs	r3, r0, #0
 800772e:	d022      	beq.n	8007776 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007730:	f3ef 8310 	mrs	r3, PRIMASK
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007738:	63bb      	str	r3, [r7, #56]	@ 0x38
 800773a:	2301      	movs	r3, #1
 800773c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	f383 8810 	msr	PRIMASK, r3
}
 8007744:	46c0      	nop			@ (mov r8, r8)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2180      	movs	r1, #128	@ 0x80
 8007752:	438a      	bics	r2, r1
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	f383 8810 	msr	PRIMASK, r3
}
 8007760:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2288      	movs	r2, #136	@ 0x88
 8007766:	2120      	movs	r1, #32
 8007768:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2284      	movs	r2, #132	@ 0x84
 800776e:	2100      	movs	r1, #0
 8007770:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e060      	b.n	8007838 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2204      	movs	r2, #4
 800777e:	4013      	ands	r3, r2
 8007780:	2b04      	cmp	r3, #4
 8007782:	d146      	bne.n	8007812 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007786:	2280      	movs	r2, #128	@ 0x80
 8007788:	03d1      	lsls	r1, r2, #15
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4a2c      	ldr	r2, [pc, #176]	@ (8007840 <UART_CheckIdleState+0x14c>)
 800778e:	9200      	str	r2, [sp, #0]
 8007790:	2200      	movs	r2, #0
 8007792:	f000 f859 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 8007796:	1e03      	subs	r3, r0, #0
 8007798:	d03b      	beq.n	8007812 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800779a:	f3ef 8310 	mrs	r3, PRIMASK
 800779e:	60fb      	str	r3, [r7, #12]
  return(result);
 80077a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a4:	2301      	movs	r3, #1
 80077a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f383 8810 	msr	PRIMASK, r3
}
 80077ae:	46c0      	nop			@ (mov r8, r8)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4922      	ldr	r1, [pc, #136]	@ (8007844 <UART_CheckIdleState+0x150>)
 80077bc:	400a      	ands	r2, r1
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f383 8810 	msr	PRIMASK, r3
}
 80077ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077cc:	f3ef 8310 	mrs	r3, PRIMASK
 80077d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80077d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80077d6:	2301      	movs	r3, #1
 80077d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	f383 8810 	msr	PRIMASK, r3
}
 80077e0:	46c0      	nop			@ (mov r8, r8)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2101      	movs	r1, #1
 80077ee:	438a      	bics	r2, r1
 80077f0:	609a      	str	r2, [r3, #8]
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	f383 8810 	msr	PRIMASK, r3
}
 80077fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	228c      	movs	r2, #140	@ 0x8c
 8007802:	2120      	movs	r1, #32
 8007804:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2284      	movs	r2, #132	@ 0x84
 800780a:	2100      	movs	r1, #0
 800780c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e012      	b.n	8007838 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2288      	movs	r2, #136	@ 0x88
 8007816:	2120      	movs	r1, #32
 8007818:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	228c      	movs	r2, #140	@ 0x8c
 800781e:	2120      	movs	r1, #32
 8007820:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2284      	movs	r2, #132	@ 0x84
 8007832:	2100      	movs	r1, #0
 8007834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	0018      	movs	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	b010      	add	sp, #64	@ 0x40
 800783e:	bd80      	pop	{r7, pc}
 8007840:	01ffffff 	.word	0x01ffffff
 8007844:	fffffedf 	.word	0xfffffedf

08007848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	1dfb      	adds	r3, r7, #7
 8007856:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007858:	e051      	b.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	3301      	adds	r3, #1
 800785e:	d04e      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007860:	f7fb fe54 	bl	800350c <HAL_GetTick>
 8007864:	0002      	movs	r2, r0
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	429a      	cmp	r2, r3
 800786e:	d302      	bcc.n	8007876 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e051      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2204      	movs	r2, #4
 8007882:	4013      	ands	r3, r2
 8007884:	d03b      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b80      	cmp	r3, #128	@ 0x80
 800788a:	d038      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	d035      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	2208      	movs	r2, #8
 800789a:	4013      	ands	r3, r2
 800789c:	2b08      	cmp	r3, #8
 800789e:	d111      	bne.n	80078c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2208      	movs	r2, #8
 80078a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	0018      	movs	r0, r3
 80078ac:	f000 f960 	bl	8007b70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2290      	movs	r2, #144	@ 0x90
 80078b4:	2108      	movs	r1, #8
 80078b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2284      	movs	r2, #132	@ 0x84
 80078bc:	2100      	movs	r1, #0
 80078be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e02c      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	69da      	ldr	r2, [r3, #28]
 80078ca:	2380      	movs	r3, #128	@ 0x80
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	401a      	ands	r2, r3
 80078d0:	2380      	movs	r3, #128	@ 0x80
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d112      	bne.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2280      	movs	r2, #128	@ 0x80
 80078de:	0112      	lsls	r2, r2, #4
 80078e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	0018      	movs	r0, r3
 80078e6:	f000 f943 	bl	8007b70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2290      	movs	r2, #144	@ 0x90
 80078ee:	2120      	movs	r1, #32
 80078f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2284      	movs	r2, #132	@ 0x84
 80078f6:	2100      	movs	r1, #0
 80078f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e00f      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	4013      	ands	r3, r2
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	425a      	negs	r2, r3
 800790e:	4153      	adcs	r3, r2
 8007910:	b2db      	uxtb	r3, r3
 8007912:	001a      	movs	r2, r3
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d09e      	beq.n	800785a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	0018      	movs	r0, r3
 8007920:	46bd      	mov	sp, r7
 8007922:	b004      	add	sp, #16
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b098      	sub	sp, #96	@ 0x60
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	1dbb      	adds	r3, r7, #6
 8007934:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	1dba      	adds	r2, r7, #6
 8007940:	215c      	movs	r1, #92	@ 0x5c
 8007942:	8812      	ldrh	r2, [r2, #0]
 8007944:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1dba      	adds	r2, r7, #6
 800794a:	215e      	movs	r1, #94	@ 0x5e
 800794c:	8812      	ldrh	r2, [r2, #0]
 800794e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	2380      	movs	r3, #128	@ 0x80
 800795c:	015b      	lsls	r3, r3, #5
 800795e:	429a      	cmp	r2, r3
 8007960:	d10d      	bne.n	800797e <UART_Start_Receive_IT+0x56>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <UART_Start_Receive_IT+0x4c>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2260      	movs	r2, #96	@ 0x60
 800796e:	497b      	ldr	r1, [pc, #492]	@ (8007b5c <UART_Start_Receive_IT+0x234>)
 8007970:	5299      	strh	r1, [r3, r2]
 8007972:	e02e      	b.n	80079d2 <UART_Start_Receive_IT+0xaa>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2260      	movs	r2, #96	@ 0x60
 8007978:	21ff      	movs	r1, #255	@ 0xff
 800797a:	5299      	strh	r1, [r3, r2]
 800797c:	e029      	b.n	80079d2 <UART_Start_Receive_IT+0xaa>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10d      	bne.n	80079a2 <UART_Start_Receive_IT+0x7a>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d104      	bne.n	8007998 <UART_Start_Receive_IT+0x70>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2260      	movs	r2, #96	@ 0x60
 8007992:	21ff      	movs	r1, #255	@ 0xff
 8007994:	5299      	strh	r1, [r3, r2]
 8007996:	e01c      	b.n	80079d2 <UART_Start_Receive_IT+0xaa>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2260      	movs	r2, #96	@ 0x60
 800799c:	217f      	movs	r1, #127	@ 0x7f
 800799e:	5299      	strh	r1, [r3, r2]
 80079a0:	e017      	b.n	80079d2 <UART_Start_Receive_IT+0xaa>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	2380      	movs	r3, #128	@ 0x80
 80079a8:	055b      	lsls	r3, r3, #21
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d10d      	bne.n	80079ca <UART_Start_Receive_IT+0xa2>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d104      	bne.n	80079c0 <UART_Start_Receive_IT+0x98>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2260      	movs	r2, #96	@ 0x60
 80079ba:	217f      	movs	r1, #127	@ 0x7f
 80079bc:	5299      	strh	r1, [r3, r2]
 80079be:	e008      	b.n	80079d2 <UART_Start_Receive_IT+0xaa>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2260      	movs	r2, #96	@ 0x60
 80079c4:	213f      	movs	r1, #63	@ 0x3f
 80079c6:	5299      	strh	r1, [r3, r2]
 80079c8:	e003      	b.n	80079d2 <UART_Start_Receive_IT+0xaa>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2260      	movs	r2, #96	@ 0x60
 80079ce:	2100      	movs	r1, #0
 80079d0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2290      	movs	r2, #144	@ 0x90
 80079d6:	2100      	movs	r1, #0
 80079d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	228c      	movs	r2, #140	@ 0x8c
 80079de:	2122      	movs	r1, #34	@ 0x22
 80079e0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e2:	f3ef 8310 	mrs	r3, PRIMASK
 80079e6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80079e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079ec:	2301      	movs	r3, #1
 80079ee:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f2:	f383 8810 	msr	PRIMASK, r3
}
 80079f6:	46c0      	nop			@ (mov r8, r8)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2101      	movs	r1, #1
 8007a04:	430a      	orrs	r2, r1
 8007a06:	609a      	str	r2, [r3, #8]
 8007a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a0e:	f383 8810 	msr	PRIMASK, r3
}
 8007a12:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a18:	2380      	movs	r3, #128	@ 0x80
 8007a1a:	059b      	lsls	r3, r3, #22
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d150      	bne.n	8007ac2 <UART_Start_Receive_IT+0x19a>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2268      	movs	r2, #104	@ 0x68
 8007a24:	5a9b      	ldrh	r3, [r3, r2]
 8007a26:	1dba      	adds	r2, r7, #6
 8007a28:	8812      	ldrh	r2, [r2, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d349      	bcc.n	8007ac2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	2380      	movs	r3, #128	@ 0x80
 8007a34:	015b      	lsls	r3, r3, #5
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d107      	bne.n	8007a4a <UART_Start_Receive_IT+0x122>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d103      	bne.n	8007a4a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4a46      	ldr	r2, [pc, #280]	@ (8007b60 <UART_Start_Receive_IT+0x238>)
 8007a46:	675a      	str	r2, [r3, #116]	@ 0x74
 8007a48:	e002      	b.n	8007a50 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4a45      	ldr	r2, [pc, #276]	@ (8007b64 <UART_Start_Receive_IT+0x23c>)
 8007a4e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d019      	beq.n	8007a8c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a58:	f3ef 8310 	mrs	r3, PRIMASK
 8007a5c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a62:	2301      	movs	r3, #1
 8007a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a68:	f383 8810 	msr	PRIMASK, r3
}
 8007a6c:	46c0      	nop			@ (mov r8, r8)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2180      	movs	r1, #128	@ 0x80
 8007a7a:	0049      	lsls	r1, r1, #1
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a86:	f383 8810 	msr	PRIMASK, r3
}
 8007a8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a94:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a96:	2301      	movs	r3, #1
 8007a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9c:	f383 8810 	msr	PRIMASK, r3
}
 8007aa0:	46c0      	nop			@ (mov r8, r8)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2180      	movs	r1, #128	@ 0x80
 8007aae:	0549      	lsls	r1, r1, #21
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	609a      	str	r2, [r3, #8]
 8007ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	f383 8810 	msr	PRIMASK, r3
}
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	e047      	b.n	8007b52 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	2380      	movs	r3, #128	@ 0x80
 8007ac8:	015b      	lsls	r3, r3, #5
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d107      	bne.n	8007ade <UART_Start_Receive_IT+0x1b6>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4a23      	ldr	r2, [pc, #140]	@ (8007b68 <UART_Start_Receive_IT+0x240>)
 8007ada:	675a      	str	r2, [r3, #116]	@ 0x74
 8007adc:	e002      	b.n	8007ae4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4a22      	ldr	r2, [pc, #136]	@ (8007b6c <UART_Start_Receive_IT+0x244>)
 8007ae2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d019      	beq.n	8007b20 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aec:	f3ef 8310 	mrs	r3, PRIMASK
 8007af0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007af2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007af6:	2301      	movs	r3, #1
 8007af8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f383 8810 	msr	PRIMASK, r3
}
 8007b00:	46c0      	nop			@ (mov r8, r8)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2190      	movs	r1, #144	@ 0x90
 8007b0e:	0049      	lsls	r1, r1, #1
 8007b10:	430a      	orrs	r2, r1
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	f383 8810 	msr	PRIMASK, r3
}
 8007b1e:	e018      	b.n	8007b52 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b20:	f3ef 8310 	mrs	r3, PRIMASK
 8007b24:	613b      	str	r3, [r7, #16]
  return(result);
 8007b26:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b28:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f383 8810 	msr	PRIMASK, r3
}
 8007b34:	46c0      	nop			@ (mov r8, r8)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2120      	movs	r1, #32
 8007b42:	430a      	orrs	r2, r1
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	f383 8810 	msr	PRIMASK, r3
}
 8007b50:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	0018      	movs	r0, r3
 8007b56:	46bd      	mov	sp, r7
 8007b58:	b018      	add	sp, #96	@ 0x60
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	000001ff 	.word	0x000001ff
 8007b60:	080083b9 	.word	0x080083b9
 8007b64:	0800806d 	.word	0x0800806d
 8007b68:	08007e99 	.word	0x08007e99
 8007b6c:	08007cc5 	.word	0x08007cc5

08007b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08e      	sub	sp, #56	@ 0x38
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b78:	f3ef 8310 	mrs	r3, PRIMASK
 8007b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b82:	2301      	movs	r3, #1
 8007b84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	f383 8810 	msr	PRIMASK, r3
}
 8007b8c:	46c0      	nop			@ (mov r8, r8)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4926      	ldr	r1, [pc, #152]	@ (8007c34 <UART_EndRxTransfer+0xc4>)
 8007b9a:	400a      	ands	r2, r1
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f383 8810 	msr	PRIMASK, r3
}
 8007ba8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007baa:	f3ef 8310 	mrs	r3, PRIMASK
 8007bae:	623b      	str	r3, [r7, #32]
  return(result);
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	f383 8810 	msr	PRIMASK, r3
}
 8007bbe:	46c0      	nop			@ (mov r8, r8)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	491b      	ldr	r1, [pc, #108]	@ (8007c38 <UART_EndRxTransfer+0xc8>)
 8007bcc:	400a      	ands	r2, r1
 8007bce:	609a      	str	r2, [r3, #8]
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd6:	f383 8810 	msr	PRIMASK, r3
}
 8007bda:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d118      	bne.n	8007c16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be4:	f3ef 8310 	mrs	r3, PRIMASK
 8007be8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bee:	2301      	movs	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f383 8810 	msr	PRIMASK, r3
}
 8007bf8:	46c0      	nop			@ (mov r8, r8)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2110      	movs	r1, #16
 8007c06:	438a      	bics	r2, r1
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f383 8810 	msr	PRIMASK, r3
}
 8007c14:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	228c      	movs	r2, #140	@ 0x8c
 8007c1a:	2120      	movs	r1, #32
 8007c1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c2a:	46c0      	nop			@ (mov r8, r8)
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	b00e      	add	sp, #56	@ 0x38
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	46c0      	nop			@ (mov r8, r8)
 8007c34:	fffffedf 	.word	0xfffffedf
 8007c38:	effffffe 	.word	0xeffffffe

08007c3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	225e      	movs	r2, #94	@ 0x5e
 8007c4e:	2100      	movs	r1, #0
 8007c50:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2256      	movs	r2, #86	@ 0x56
 8007c56:	2100      	movs	r1, #0
 8007c58:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f7ff f92b 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c62:	46c0      	nop			@ (mov r8, r8)
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b004      	add	sp, #16
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c72:	f3ef 8310 	mrs	r3, PRIMASK
 8007c76:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c78:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f383 8810 	msr	PRIMASK, r3
}
 8007c86:	46c0      	nop			@ (mov r8, r8)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2140      	movs	r1, #64	@ 0x40
 8007c94:	438a      	bics	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f383 8810 	msr	PRIMASK, r3
}
 8007ca2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2288      	movs	r2, #136	@ 0x88
 8007ca8:	2120      	movs	r1, #32
 8007caa:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f7ff f8f7 	bl	8006ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cba:	46c0      	nop			@ (mov r8, r8)
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	b006      	add	sp, #24
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b094      	sub	sp, #80	@ 0x50
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ccc:	204e      	movs	r0, #78	@ 0x4e
 8007cce:	183b      	adds	r3, r7, r0
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	2160      	movs	r1, #96	@ 0x60
 8007cd4:	5a52      	ldrh	r2, [r2, r1]
 8007cd6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	228c      	movs	r2, #140	@ 0x8c
 8007cdc:	589b      	ldr	r3, [r3, r2]
 8007cde:	2b22      	cmp	r3, #34	@ 0x22
 8007ce0:	d000      	beq.n	8007ce4 <UART_RxISR_8BIT+0x20>
 8007ce2:	e0c4      	b.n	8007e6e <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cea:	214c      	movs	r1, #76	@ 0x4c
 8007cec:	187b      	adds	r3, r7, r1
 8007cee:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cf0:	187b      	adds	r3, r7, r1
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	183b      	adds	r3, r7, r0
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	b2d9      	uxtb	r1, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d00:	400a      	ands	r2, r1
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	225e      	movs	r2, #94	@ 0x5e
 8007d14:	5a9b      	ldrh	r3, [r3, r2]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b299      	uxth	r1, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	225e      	movs	r2, #94	@ 0x5e
 8007d20:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	225e      	movs	r2, #94	@ 0x5e
 8007d26:	5a9b      	ldrh	r3, [r3, r2]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d000      	beq.n	8007d30 <UART_RxISR_8BIT+0x6c>
 8007d2e:	e0a6      	b.n	8007e7e <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d30:	f3ef 8310 	mrs	r3, PRIMASK
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d40:	f383 8810 	msr	PRIMASK, r3
}
 8007d44:	46c0      	nop			@ (mov r8, r8)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	494d      	ldr	r1, [pc, #308]	@ (8007e88 <UART_RxISR_8BIT+0x1c4>)
 8007d52:	400a      	ands	r2, r1
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5c:	f383 8810 	msr	PRIMASK, r3
}
 8007d60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d62:	f3ef 8310 	mrs	r3, PRIMASK
 8007d66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d72:	f383 8810 	msr	PRIMASK, r3
}
 8007d76:	46c0      	nop			@ (mov r8, r8)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689a      	ldr	r2, [r3, #8]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2101      	movs	r1, #1
 8007d84:	438a      	bics	r2, r1
 8007d86:	609a      	str	r2, [r3, #8]
 8007d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8e:	f383 8810 	msr	PRIMASK, r3
}
 8007d92:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	228c      	movs	r2, #140	@ 0x8c
 8007d98:	2120      	movs	r1, #32
 8007d9a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a37      	ldr	r2, [pc, #220]	@ (8007e8c <UART_RxISR_8BIT+0x1c8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d024      	beq.n	8007dfc <UART_RxISR_8BIT+0x138>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a36      	ldr	r2, [pc, #216]	@ (8007e90 <UART_RxISR_8BIT+0x1cc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d01f      	beq.n	8007dfc <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	2380      	movs	r3, #128	@ 0x80
 8007dc4:	041b      	lsls	r3, r3, #16
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	d018      	beq.n	8007dfc <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dca:	f3ef 8310 	mrs	r3, PRIMASK
 8007dce:	61bb      	str	r3, [r7, #24]
  return(result);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f383 8810 	msr	PRIMASK, r3
}
 8007dde:	46c0      	nop			@ (mov r8, r8)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	492a      	ldr	r1, [pc, #168]	@ (8007e94 <UART_RxISR_8BIT+0x1d0>)
 8007dec:	400a      	ands	r2, r1
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007df2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	f383 8810 	msr	PRIMASK, r3
}
 8007dfa:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d12f      	bne.n	8007e64 <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e10:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e14:	2301      	movs	r3, #1
 8007e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f383 8810 	msr	PRIMASK, r3
}
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2110      	movs	r1, #16
 8007e2c:	438a      	bics	r2, r1
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f383 8810 	msr	PRIMASK, r3
}
 8007e3a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	2210      	movs	r2, #16
 8007e44:	4013      	ands	r3, r2
 8007e46:	2b10      	cmp	r3, #16
 8007e48:	d103      	bne.n	8007e52 <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2210      	movs	r2, #16
 8007e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	225c      	movs	r2, #92	@ 0x5c
 8007e56:	5a9a      	ldrh	r2, [r3, r2]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	0011      	movs	r1, r2
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f7ff f833 	bl	8006ec8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e62:	e00c      	b.n	8007e7e <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7fa fac8 	bl	80023fc <HAL_UART_RxCpltCallback>
}
 8007e6c:	e007      	b.n	8007e7e <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	699a      	ldr	r2, [r3, #24]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2108      	movs	r1, #8
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	619a      	str	r2, [r3, #24]
}
 8007e7e:	46c0      	nop			@ (mov r8, r8)
 8007e80:	46bd      	mov	sp, r7
 8007e82:	b014      	add	sp, #80	@ 0x50
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	46c0      	nop			@ (mov r8, r8)
 8007e88:	fffffedf 	.word	0xfffffedf
 8007e8c:	40008000 	.word	0x40008000
 8007e90:	40008400 	.word	0x40008400
 8007e94:	fbffffff 	.word	0xfbffffff

08007e98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b094      	sub	sp, #80	@ 0x50
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ea0:	204e      	movs	r0, #78	@ 0x4e
 8007ea2:	183b      	adds	r3, r7, r0
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	2160      	movs	r1, #96	@ 0x60
 8007ea8:	5a52      	ldrh	r2, [r2, r1]
 8007eaa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	228c      	movs	r2, #140	@ 0x8c
 8007eb0:	589b      	ldr	r3, [r3, r2]
 8007eb2:	2b22      	cmp	r3, #34	@ 0x22
 8007eb4:	d000      	beq.n	8007eb8 <UART_RxISR_16BIT+0x20>
 8007eb6:	e0c4      	b.n	8008042 <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ebe:	214c      	movs	r1, #76	@ 0x4c
 8007ec0:	187b      	adds	r3, r7, r1
 8007ec2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8007eca:	187b      	adds	r3, r7, r1
 8007ecc:	183a      	adds	r2, r7, r0
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	8812      	ldrh	r2, [r2, #0]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ed8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ede:	1c9a      	adds	r2, r3, #2
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	225e      	movs	r2, #94	@ 0x5e
 8007ee8:	5a9b      	ldrh	r3, [r3, r2]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b299      	uxth	r1, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	225e      	movs	r2, #94	@ 0x5e
 8007ef4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	225e      	movs	r2, #94	@ 0x5e
 8007efa:	5a9b      	ldrh	r3, [r3, r2]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d000      	beq.n	8007f04 <UART_RxISR_16BIT+0x6c>
 8007f02:	e0a6      	b.n	8008052 <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f04:	f3ef 8310 	mrs	r3, PRIMASK
 8007f08:	623b      	str	r3, [r7, #32]
  return(result);
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f0e:	2301      	movs	r3, #1
 8007f10:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	f383 8810 	msr	PRIMASK, r3
}
 8007f18:	46c0      	nop			@ (mov r8, r8)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	494d      	ldr	r1, [pc, #308]	@ (800805c <UART_RxISR_16BIT+0x1c4>)
 8007f26:	400a      	ands	r2, r1
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f30:	f383 8810 	msr	PRIMASK, r3
}
 8007f34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f36:	f3ef 8310 	mrs	r3, PRIMASK
 8007f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8007f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f40:	2301      	movs	r3, #1
 8007f42:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f46:	f383 8810 	msr	PRIMASK, r3
}
 8007f4a:	46c0      	nop			@ (mov r8, r8)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2101      	movs	r1, #1
 8007f58:	438a      	bics	r2, r1
 8007f5a:	609a      	str	r2, [r3, #8]
 8007f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f62:	f383 8810 	msr	PRIMASK, r3
}
 8007f66:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	228c      	movs	r2, #140	@ 0x8c
 8007f6c:	2120      	movs	r1, #32
 8007f6e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a37      	ldr	r2, [pc, #220]	@ (8008060 <UART_RxISR_16BIT+0x1c8>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d024      	beq.n	8007fd0 <UART_RxISR_16BIT+0x138>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a36      	ldr	r2, [pc, #216]	@ (8008064 <UART_RxISR_16BIT+0x1cc>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d01f      	beq.n	8007fd0 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	2380      	movs	r3, #128	@ 0x80
 8007f98:	041b      	lsls	r3, r3, #16
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa2:	617b      	str	r3, [r7, #20]
  return(result);
 8007fa4:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa8:	2301      	movs	r3, #1
 8007faa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	f383 8810 	msr	PRIMASK, r3
}
 8007fb2:	46c0      	nop			@ (mov r8, r8)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	492a      	ldr	r1, [pc, #168]	@ (8008068 <UART_RxISR_16BIT+0x1d0>)
 8007fc0:	400a      	ands	r2, r1
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f383 8810 	msr	PRIMASK, r3
}
 8007fce:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d12f      	bne.n	8008038 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fde:	f3ef 8310 	mrs	r3, PRIMASK
 8007fe2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fe4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fe8:	2301      	movs	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f383 8810 	msr	PRIMASK, r3
}
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2110      	movs	r1, #16
 8008000:	438a      	bics	r2, r1
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f383 8810 	msr	PRIMASK, r3
}
 800800e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	2210      	movs	r2, #16
 8008018:	4013      	ands	r3, r2
 800801a:	2b10      	cmp	r3, #16
 800801c:	d103      	bne.n	8008026 <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2210      	movs	r2, #16
 8008024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	225c      	movs	r2, #92	@ 0x5c
 800802a:	5a9a      	ldrh	r2, [r3, r2]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	0011      	movs	r1, r2
 8008030:	0018      	movs	r0, r3
 8008032:	f7fe ff49 	bl	8006ec8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008036:	e00c      	b.n	8008052 <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	0018      	movs	r0, r3
 800803c:	f7fa f9de 	bl	80023fc <HAL_UART_RxCpltCallback>
}
 8008040:	e007      	b.n	8008052 <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699a      	ldr	r2, [r3, #24]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2108      	movs	r1, #8
 800804e:	430a      	orrs	r2, r1
 8008050:	619a      	str	r2, [r3, #24]
}
 8008052:	46c0      	nop			@ (mov r8, r8)
 8008054:	46bd      	mov	sp, r7
 8008056:	b014      	add	sp, #80	@ 0x50
 8008058:	bd80      	pop	{r7, pc}
 800805a:	46c0      	nop			@ (mov r8, r8)
 800805c:	fffffedf 	.word	0xfffffedf
 8008060:	40008000 	.word	0x40008000
 8008064:	40008400 	.word	0x40008400
 8008068:	fbffffff 	.word	0xfbffffff

0800806c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b0a0      	sub	sp, #128	@ 0x80
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008074:	237a      	movs	r3, #122	@ 0x7a
 8008076:	18fb      	adds	r3, r7, r3
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	2160      	movs	r1, #96	@ 0x60
 800807c:	5a52      	ldrh	r2, [r2, r1]
 800807e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	228c      	movs	r2, #140	@ 0x8c
 800809c:	589b      	ldr	r3, [r3, r2]
 800809e:	2b22      	cmp	r3, #34	@ 0x22
 80080a0:	d000      	beq.n	80080a4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80080a2:	e16f      	b.n	8008384 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080a4:	236e      	movs	r3, #110	@ 0x6e
 80080a6:	18fb      	adds	r3, r7, r3
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	2168      	movs	r1, #104	@ 0x68
 80080ac:	5a52      	ldrh	r2, [r2, r1]
 80080ae:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080b0:	e116      	b.n	80082e0 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080b8:	216c      	movs	r1, #108	@ 0x6c
 80080ba:	187b      	adds	r3, r7, r1
 80080bc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080be:	187b      	adds	r3, r7, r1
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	237a      	movs	r3, #122	@ 0x7a
 80080c6:	18fb      	adds	r3, r7, r3
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b2d9      	uxtb	r1, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d0:	400a      	ands	r2, r1
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	225e      	movs	r2, #94	@ 0x5e
 80080e4:	5a9b      	ldrh	r3, [r3, r2]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b299      	uxth	r1, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	225e      	movs	r2, #94	@ 0x5e
 80080f0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080fc:	2207      	movs	r2, #7
 80080fe:	4013      	ands	r3, r2
 8008100:	d049      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008102:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008104:	2201      	movs	r2, #1
 8008106:	4013      	ands	r3, r2
 8008108:	d010      	beq.n	800812c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800810a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800810c:	2380      	movs	r3, #128	@ 0x80
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	4013      	ands	r3, r2
 8008112:	d00b      	beq.n	800812c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2201      	movs	r2, #1
 800811a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2290      	movs	r2, #144	@ 0x90
 8008120:	589b      	ldr	r3, [r3, r2]
 8008122:	2201      	movs	r2, #1
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2190      	movs	r1, #144	@ 0x90
 800812a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800812c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800812e:	2202      	movs	r2, #2
 8008130:	4013      	ands	r3, r2
 8008132:	d00f      	beq.n	8008154 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8008134:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008136:	2201      	movs	r2, #1
 8008138:	4013      	ands	r3, r2
 800813a:	d00b      	beq.n	8008154 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2202      	movs	r2, #2
 8008142:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2290      	movs	r2, #144	@ 0x90
 8008148:	589b      	ldr	r3, [r3, r2]
 800814a:	2204      	movs	r2, #4
 800814c:	431a      	orrs	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2190      	movs	r1, #144	@ 0x90
 8008152:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008154:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008156:	2204      	movs	r2, #4
 8008158:	4013      	ands	r3, r2
 800815a:	d00f      	beq.n	800817c <UART_RxISR_8BIT_FIFOEN+0x110>
 800815c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800815e:	2201      	movs	r2, #1
 8008160:	4013      	ands	r3, r2
 8008162:	d00b      	beq.n	800817c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2204      	movs	r2, #4
 800816a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2290      	movs	r2, #144	@ 0x90
 8008170:	589b      	ldr	r3, [r3, r2]
 8008172:	2202      	movs	r2, #2
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2190      	movs	r1, #144	@ 0x90
 800817a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2290      	movs	r2, #144	@ 0x90
 8008180:	589b      	ldr	r3, [r3, r2]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d007      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	0018      	movs	r0, r3
 800818a:	f7fe fe95 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2290      	movs	r2, #144	@ 0x90
 8008192:	2100      	movs	r1, #0
 8008194:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	225e      	movs	r2, #94	@ 0x5e
 800819a:	5a9b      	ldrh	r3, [r3, r2]
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d000      	beq.n	80081a4 <UART_RxISR_8BIT_FIFOEN+0x138>
 80081a2:	e09d      	b.n	80082e0 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081a4:	f3ef 8310 	mrs	r3, PRIMASK
 80081a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80081aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081ae:	2301      	movs	r3, #1
 80081b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b4:	f383 8810 	msr	PRIMASK, r3
}
 80081b8:	46c0      	nop			@ (mov r8, r8)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4975      	ldr	r1, [pc, #468]	@ (800839c <UART_RxISR_8BIT_FIFOEN+0x330>)
 80081c6:	400a      	ands	r2, r1
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081cc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081d0:	f383 8810 	msr	PRIMASK, r3
}
 80081d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081d6:	f3ef 8310 	mrs	r3, PRIMASK
 80081da:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80081dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081de:	667b      	str	r3, [r7, #100]	@ 0x64
 80081e0:	2301      	movs	r3, #1
 80081e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e6:	f383 8810 	msr	PRIMASK, r3
}
 80081ea:	46c0      	nop			@ (mov r8, r8)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	496a      	ldr	r1, [pc, #424]	@ (80083a0 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80081f8:	400a      	ands	r2, r1
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008202:	f383 8810 	msr	PRIMASK, r3
}
 8008206:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	228c      	movs	r2, #140	@ 0x8c
 800820c:	2120      	movs	r1, #32
 800820e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a60      	ldr	r2, [pc, #384]	@ (80083a4 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d024      	beq.n	8008270 <UART_RxISR_8BIT_FIFOEN+0x204>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a5f      	ldr	r2, [pc, #380]	@ (80083a8 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d01f      	beq.n	8008270 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	2380      	movs	r3, #128	@ 0x80
 8008238:	041b      	lsls	r3, r3, #16
 800823a:	4013      	ands	r3, r2
 800823c:	d018      	beq.n	8008270 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800823e:	f3ef 8310 	mrs	r3, PRIMASK
 8008242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8008244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008246:	663b      	str	r3, [r7, #96]	@ 0x60
 8008248:	2301      	movs	r3, #1
 800824a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	f383 8810 	msr	PRIMASK, r3
}
 8008252:	46c0      	nop			@ (mov r8, r8)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4953      	ldr	r1, [pc, #332]	@ (80083ac <UART_RxISR_8BIT_FIFOEN+0x340>)
 8008260:	400a      	ands	r2, r1
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008266:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826a:	f383 8810 	msr	PRIMASK, r3
}
 800826e:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008274:	2b01      	cmp	r3, #1
 8008276:	d12f      	bne.n	80082d8 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800827e:	f3ef 8310 	mrs	r3, PRIMASK
 8008282:	623b      	str	r3, [r7, #32]
  return(result);
 8008284:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008288:	2301      	movs	r3, #1
 800828a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	f383 8810 	msr	PRIMASK, r3
}
 8008292:	46c0      	nop			@ (mov r8, r8)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2110      	movs	r1, #16
 80082a0:	438a      	bics	r2, r1
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	f383 8810 	msr	PRIMASK, r3
}
 80082ae:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	2210      	movs	r2, #16
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d103      	bne.n	80082c6 <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2210      	movs	r2, #16
 80082c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	225c      	movs	r2, #92	@ 0x5c
 80082ca:	5a9a      	ldrh	r2, [r3, r2]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	0011      	movs	r1, r2
 80082d0:	0018      	movs	r0, r3
 80082d2:	f7fe fdf9 	bl	8006ec8 <HAL_UARTEx_RxEventCallback>
 80082d6:	e003      	b.n	80082e0 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	0018      	movs	r0, r3
 80082dc:	f7fa f88e 	bl	80023fc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082e0:	236e      	movs	r3, #110	@ 0x6e
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d004      	beq.n	80082f4 <UART_RxISR_8BIT_FIFOEN+0x288>
 80082ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80082ec:	2220      	movs	r2, #32
 80082ee:	4013      	ands	r3, r2
 80082f0:	d000      	beq.n	80082f4 <UART_RxISR_8BIT_FIFOEN+0x288>
 80082f2:	e6de      	b.n	80080b2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80082f4:	205a      	movs	r0, #90	@ 0x5a
 80082f6:	183b      	adds	r3, r7, r0
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	215e      	movs	r1, #94	@ 0x5e
 80082fc:	5a52      	ldrh	r2, [r2, r1]
 80082fe:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008300:	0001      	movs	r1, r0
 8008302:	187b      	adds	r3, r7, r1
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d044      	beq.n	8008394 <UART_RxISR_8BIT_FIFOEN+0x328>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2268      	movs	r2, #104	@ 0x68
 800830e:	5a9b      	ldrh	r3, [r3, r2]
 8008310:	187a      	adds	r2, r7, r1
 8008312:	8812      	ldrh	r2, [r2, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d23d      	bcs.n	8008394 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008318:	f3ef 8310 	mrs	r3, PRIMASK
 800831c:	60bb      	str	r3, [r7, #8]
  return(result);
 800831e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008320:	657b      	str	r3, [r7, #84]	@ 0x54
 8008322:	2301      	movs	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f383 8810 	msr	PRIMASK, r3
}
 800832c:	46c0      	nop			@ (mov r8, r8)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	491d      	ldr	r1, [pc, #116]	@ (80083b0 <UART_RxISR_8BIT_FIFOEN+0x344>)
 800833a:	400a      	ands	r2, r1
 800833c:	609a      	str	r2, [r3, #8]
 800833e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008340:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f383 8810 	msr	PRIMASK, r3
}
 8008348:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a19      	ldr	r2, [pc, #100]	@ (80083b4 <UART_RxISR_8BIT_FIFOEN+0x348>)
 800834e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008350:	f3ef 8310 	mrs	r3, PRIMASK
 8008354:	617b      	str	r3, [r7, #20]
  return(result);
 8008356:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008358:	653b      	str	r3, [r7, #80]	@ 0x50
 800835a:	2301      	movs	r3, #1
 800835c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	f383 8810 	msr	PRIMASK, r3
}
 8008364:	46c0      	nop			@ (mov r8, r8)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2120      	movs	r1, #32
 8008372:	430a      	orrs	r2, r1
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008378:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	f383 8810 	msr	PRIMASK, r3
}
 8008380:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008382:	e007      	b.n	8008394 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2108      	movs	r1, #8
 8008390:	430a      	orrs	r2, r1
 8008392:	619a      	str	r2, [r3, #24]
}
 8008394:	46c0      	nop			@ (mov r8, r8)
 8008396:	46bd      	mov	sp, r7
 8008398:	b020      	add	sp, #128	@ 0x80
 800839a:	bd80      	pop	{r7, pc}
 800839c:	fffffeff 	.word	0xfffffeff
 80083a0:	effffffe 	.word	0xeffffffe
 80083a4:	40008000 	.word	0x40008000
 80083a8:	40008400 	.word	0x40008400
 80083ac:	fbffffff 	.word	0xfbffffff
 80083b0:	efffffff 	.word	0xefffffff
 80083b4:	08007cc5 	.word	0x08007cc5

080083b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b0a2      	sub	sp, #136	@ 0x88
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80083c0:	2382      	movs	r3, #130	@ 0x82
 80083c2:	18fb      	adds	r3, r7, r3
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	2160      	movs	r1, #96	@ 0x60
 80083c8:	5a52      	ldrh	r2, [r2, r1]
 80083ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	2284      	movs	r2, #132	@ 0x84
 80083d4:	18ba      	adds	r2, r7, r2
 80083d6:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	228c      	movs	r2, #140	@ 0x8c
 80083ec:	589b      	ldr	r3, [r3, r2]
 80083ee:	2b22      	cmp	r3, #34	@ 0x22
 80083f0:	d000      	beq.n	80083f4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80083f2:	e179      	b.n	80086e8 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80083f4:	2376      	movs	r3, #118	@ 0x76
 80083f6:	18fb      	adds	r3, r7, r3
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	2168      	movs	r1, #104	@ 0x68
 80083fc:	5a52      	ldrh	r2, [r2, r1]
 80083fe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008400:	e11e      	b.n	8008640 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008408:	2174      	movs	r1, #116	@ 0x74
 800840a:	187b      	adds	r3, r7, r1
 800840c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008412:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8008414:	187b      	adds	r3, r7, r1
 8008416:	2282      	movs	r2, #130	@ 0x82
 8008418:	18ba      	adds	r2, r7, r2
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	8812      	ldrh	r2, [r2, #0]
 800841e:	4013      	ands	r3, r2
 8008420:	b29a      	uxth	r2, r3
 8008422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008424:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842a:	1c9a      	adds	r2, r3, #2
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	225e      	movs	r2, #94	@ 0x5e
 8008434:	5a9b      	ldrh	r3, [r3, r2]
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b299      	uxth	r1, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	225e      	movs	r2, #94	@ 0x5e
 8008440:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	2184      	movs	r1, #132	@ 0x84
 800844a:	187a      	adds	r2, r7, r1
 800844c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800844e:	187b      	adds	r3, r7, r1
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2207      	movs	r2, #7
 8008454:	4013      	ands	r3, r2
 8008456:	d04e      	beq.n	80084f6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008458:	187b      	adds	r3, r7, r1
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2201      	movs	r2, #1
 800845e:	4013      	ands	r3, r2
 8008460:	d010      	beq.n	8008484 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8008462:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008464:	2380      	movs	r3, #128	@ 0x80
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	4013      	ands	r3, r2
 800846a:	d00b      	beq.n	8008484 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2201      	movs	r2, #1
 8008472:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2290      	movs	r2, #144	@ 0x90
 8008478:	589b      	ldr	r3, [r3, r2]
 800847a:	2201      	movs	r2, #1
 800847c:	431a      	orrs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2190      	movs	r1, #144	@ 0x90
 8008482:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008484:	2384      	movs	r3, #132	@ 0x84
 8008486:	18fb      	adds	r3, r7, r3
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2202      	movs	r2, #2
 800848c:	4013      	ands	r3, r2
 800848e:	d00f      	beq.n	80084b0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8008490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008492:	2201      	movs	r2, #1
 8008494:	4013      	ands	r3, r2
 8008496:	d00b      	beq.n	80084b0 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2202      	movs	r2, #2
 800849e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2290      	movs	r2, #144	@ 0x90
 80084a4:	589b      	ldr	r3, [r3, r2]
 80084a6:	2204      	movs	r2, #4
 80084a8:	431a      	orrs	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2190      	movs	r1, #144	@ 0x90
 80084ae:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084b0:	2384      	movs	r3, #132	@ 0x84
 80084b2:	18fb      	adds	r3, r7, r3
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2204      	movs	r2, #4
 80084b8:	4013      	ands	r3, r2
 80084ba:	d00f      	beq.n	80084dc <UART_RxISR_16BIT_FIFOEN+0x124>
 80084bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084be:	2201      	movs	r2, #1
 80084c0:	4013      	ands	r3, r2
 80084c2:	d00b      	beq.n	80084dc <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2204      	movs	r2, #4
 80084ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2290      	movs	r2, #144	@ 0x90
 80084d0:	589b      	ldr	r3, [r3, r2]
 80084d2:	2202      	movs	r2, #2
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2190      	movs	r1, #144	@ 0x90
 80084da:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2290      	movs	r2, #144	@ 0x90
 80084e0:	589b      	ldr	r3, [r3, r2]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0018      	movs	r0, r3
 80084ea:	f7fe fce5 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2290      	movs	r2, #144	@ 0x90
 80084f2:	2100      	movs	r1, #0
 80084f4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	225e      	movs	r2, #94	@ 0x5e
 80084fa:	5a9b      	ldrh	r3, [r3, r2]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d000      	beq.n	8008504 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8008502:	e09d      	b.n	8008640 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008504:	f3ef 8310 	mrs	r3, PRIMASK
 8008508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800850a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800850c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800850e:	2301      	movs	r3, #1
 8008510:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008514:	f383 8810 	msr	PRIMASK, r3
}
 8008518:	46c0      	nop			@ (mov r8, r8)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4976      	ldr	r1, [pc, #472]	@ (8008700 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8008526:	400a      	ands	r2, r1
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800852c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800852e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008530:	f383 8810 	msr	PRIMASK, r3
}
 8008534:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008536:	f3ef 8310 	mrs	r3, PRIMASK
 800853a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800853c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800853e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008540:	2301      	movs	r3, #1
 8008542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008546:	f383 8810 	msr	PRIMASK, r3
}
 800854a:	46c0      	nop			@ (mov r8, r8)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	496b      	ldr	r1, [pc, #428]	@ (8008704 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8008558:	400a      	ands	r2, r1
 800855a:	609a      	str	r2, [r3, #8]
 800855c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800855e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008562:	f383 8810 	msr	PRIMASK, r3
}
 8008566:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	228c      	movs	r2, #140	@ 0x8c
 800856c:	2120      	movs	r1, #32
 800856e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a61      	ldr	r2, [pc, #388]	@ (8008708 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d024      	beq.n	80085d0 <UART_RxISR_16BIT_FIFOEN+0x218>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a60      	ldr	r2, [pc, #384]	@ (800870c <UART_RxISR_16BIT_FIFOEN+0x354>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d01f      	beq.n	80085d0 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	2380      	movs	r3, #128	@ 0x80
 8008598:	041b      	lsls	r3, r3, #16
 800859a:	4013      	ands	r3, r2
 800859c:	d018      	beq.n	80085d0 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800859e:	f3ef 8310 	mrs	r3, PRIMASK
 80085a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80085a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80085a8:	2301      	movs	r3, #1
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ae:	f383 8810 	msr	PRIMASK, r3
}
 80085b2:	46c0      	nop			@ (mov r8, r8)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4954      	ldr	r1, [pc, #336]	@ (8008710 <UART_RxISR_16BIT_FIFOEN+0x358>)
 80085c0:	400a      	ands	r2, r1
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ca:	f383 8810 	msr	PRIMASK, r3
}
 80085ce:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d12f      	bne.n	8008638 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085de:	f3ef 8310 	mrs	r3, PRIMASK
 80085e2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80085e8:	2301      	movs	r3, #1
 80085ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ee:	f383 8810 	msr	PRIMASK, r3
}
 80085f2:	46c0      	nop			@ (mov r8, r8)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2110      	movs	r1, #16
 8008600:	438a      	bics	r2, r1
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	f383 8810 	msr	PRIMASK, r3
}
 800860e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	2210      	movs	r2, #16
 8008618:	4013      	ands	r3, r2
 800861a:	2b10      	cmp	r3, #16
 800861c:	d103      	bne.n	8008626 <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2210      	movs	r2, #16
 8008624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	225c      	movs	r2, #92	@ 0x5c
 800862a:	5a9a      	ldrh	r2, [r3, r2]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	0011      	movs	r1, r2
 8008630:	0018      	movs	r0, r3
 8008632:	f7fe fc49 	bl	8006ec8 <HAL_UARTEx_RxEventCallback>
 8008636:	e003      	b.n	8008640 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	0018      	movs	r0, r3
 800863c:	f7f9 fede 	bl	80023fc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008640:	2376      	movs	r3, #118	@ 0x76
 8008642:	18fb      	adds	r3, r7, r3
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d006      	beq.n	8008658 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 800864a:	2384      	movs	r3, #132	@ 0x84
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2220      	movs	r2, #32
 8008652:	4013      	ands	r3, r2
 8008654:	d000      	beq.n	8008658 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8008656:	e6d4      	b.n	8008402 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008658:	205e      	movs	r0, #94	@ 0x5e
 800865a:	183b      	adds	r3, r7, r0
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	215e      	movs	r1, #94	@ 0x5e
 8008660:	5a52      	ldrh	r2, [r2, r1]
 8008662:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008664:	0001      	movs	r1, r0
 8008666:	187b      	adds	r3, r7, r1
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d044      	beq.n	80086f8 <UART_RxISR_16BIT_FIFOEN+0x340>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2268      	movs	r2, #104	@ 0x68
 8008672:	5a9b      	ldrh	r3, [r3, r2]
 8008674:	187a      	adds	r2, r7, r1
 8008676:	8812      	ldrh	r2, [r2, #0]
 8008678:	429a      	cmp	r2, r3
 800867a:	d23d      	bcs.n	80086f8 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800867c:	f3ef 8310 	mrs	r3, PRIMASK
 8008680:	60fb      	str	r3, [r7, #12]
  return(result);
 8008682:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008686:	2301      	movs	r3, #1
 8008688:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f383 8810 	msr	PRIMASK, r3
}
 8008690:	46c0      	nop			@ (mov r8, r8)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	491d      	ldr	r1, [pc, #116]	@ (8008714 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800869e:	400a      	ands	r2, r1
 80086a0:	609a      	str	r2, [r3, #8]
 80086a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f383 8810 	msr	PRIMASK, r3
}
 80086ac:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a19      	ldr	r2, [pc, #100]	@ (8008718 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80086b2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b4:	f3ef 8310 	mrs	r3, PRIMASK
 80086b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80086ba:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80086be:	2301      	movs	r3, #1
 80086c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	f383 8810 	msr	PRIMASK, r3
}
 80086c8:	46c0      	nop			@ (mov r8, r8)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2120      	movs	r1, #32
 80086d6:	430a      	orrs	r2, r1
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	f383 8810 	msr	PRIMASK, r3
}
 80086e4:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086e6:	e007      	b.n	80086f8 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699a      	ldr	r2, [r3, #24]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2108      	movs	r1, #8
 80086f4:	430a      	orrs	r2, r1
 80086f6:	619a      	str	r2, [r3, #24]
}
 80086f8:	46c0      	nop			@ (mov r8, r8)
 80086fa:	46bd      	mov	sp, r7
 80086fc:	b022      	add	sp, #136	@ 0x88
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	fffffeff 	.word	0xfffffeff
 8008704:	effffffe 	.word	0xeffffffe
 8008708:	40008000 	.word	0x40008000
 800870c:	40008400 	.word	0x40008400
 8008710:	fbffffff 	.word	0xfbffffff
 8008714:	efffffff 	.word	0xefffffff
 8008718:	08007e99 	.word	0x08007e99

0800871c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008724:	46c0      	nop			@ (mov r8, r8)
 8008726:	46bd      	mov	sp, r7
 8008728:	b002      	add	sp, #8
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008734:	46c0      	nop			@ (mov r8, r8)
 8008736:	46bd      	mov	sp, r7
 8008738:	b002      	add	sp, #8
 800873a:	bd80      	pop	{r7, pc}

0800873c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008744:	46c0      	nop			@ (mov r8, r8)
 8008746:	46bd      	mov	sp, r7
 8008748:	b002      	add	sp, #8
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2284      	movs	r2, #132	@ 0x84
 8008758:	5c9b      	ldrb	r3, [r3, r2]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d101      	bne.n	8008762 <HAL_UARTEx_DisableFifoMode+0x16>
 800875e:	2302      	movs	r3, #2
 8008760:	e027      	b.n	80087b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2284      	movs	r2, #132	@ 0x84
 8008766:	2101      	movs	r1, #1
 8008768:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2288      	movs	r2, #136	@ 0x88
 800876e:	2124      	movs	r1, #36	@ 0x24
 8008770:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2101      	movs	r1, #1
 8008786:	438a      	bics	r2, r1
 8008788:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4a0b      	ldr	r2, [pc, #44]	@ (80087bc <HAL_UARTEx_DisableFifoMode+0x70>)
 800878e:	4013      	ands	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2288      	movs	r2, #136	@ 0x88
 80087a4:	2120      	movs	r1, #32
 80087a6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2284      	movs	r2, #132	@ 0x84
 80087ac:	2100      	movs	r1, #0
 80087ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	0018      	movs	r0, r3
 80087b4:	46bd      	mov	sp, r7
 80087b6:	b004      	add	sp, #16
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	46c0      	nop			@ (mov r8, r8)
 80087bc:	dfffffff 	.word	0xdfffffff

080087c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2284      	movs	r2, #132	@ 0x84
 80087ce:	5c9b      	ldrb	r3, [r3, r2]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e02e      	b.n	8008836 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2284      	movs	r2, #132	@ 0x84
 80087dc:	2101      	movs	r1, #1
 80087de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2288      	movs	r2, #136	@ 0x88
 80087e4:	2124      	movs	r1, #36	@ 0x24
 80087e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2101      	movs	r1, #1
 80087fc:	438a      	bics	r2, r1
 80087fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	08d9      	lsrs	r1, r3, #3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	0018      	movs	r0, r3
 8008818:	f000 f854 	bl	80088c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2288      	movs	r2, #136	@ 0x88
 8008828:	2120      	movs	r1, #32
 800882a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2284      	movs	r2, #132	@ 0x84
 8008830:	2100      	movs	r1, #0
 8008832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	0018      	movs	r0, r3
 8008838:	46bd      	mov	sp, r7
 800883a:	b004      	add	sp, #16
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2284      	movs	r2, #132	@ 0x84
 800884e:	5c9b      	ldrb	r3, [r3, r2]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008854:	2302      	movs	r3, #2
 8008856:	e02f      	b.n	80088b8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2284      	movs	r2, #132	@ 0x84
 800885c:	2101      	movs	r1, #1
 800885e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2288      	movs	r2, #136	@ 0x88
 8008864:	2124      	movs	r1, #36	@ 0x24
 8008866:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2101      	movs	r1, #1
 800887c:	438a      	bics	r2, r1
 800887e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	4a0e      	ldr	r2, [pc, #56]	@ (80088c0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008888:	4013      	ands	r3, r2
 800888a:	0019      	movs	r1, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	0018      	movs	r0, r3
 800889a:	f000 f813 	bl	80088c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2288      	movs	r2, #136	@ 0x88
 80088aa:	2120      	movs	r1, #32
 80088ac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2284      	movs	r2, #132	@ 0x84
 80088b2:	2100      	movs	r1, #0
 80088b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	0018      	movs	r0, r3
 80088ba:	46bd      	mov	sp, r7
 80088bc:	b004      	add	sp, #16
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	f1ffffff 	.word	0xf1ffffff

080088c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d108      	bne.n	80088e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	226a      	movs	r2, #106	@ 0x6a
 80088d8:	2101      	movs	r1, #1
 80088da:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2268      	movs	r2, #104	@ 0x68
 80088e0:	2101      	movs	r1, #1
 80088e2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088e4:	e043      	b.n	800896e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088e6:	260f      	movs	r6, #15
 80088e8:	19bb      	adds	r3, r7, r6
 80088ea:	2208      	movs	r2, #8
 80088ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088ee:	200e      	movs	r0, #14
 80088f0:	183b      	adds	r3, r7, r0
 80088f2:	2208      	movs	r2, #8
 80088f4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	0e5b      	lsrs	r3, r3, #25
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	240d      	movs	r4, #13
 8008902:	193b      	adds	r3, r7, r4
 8008904:	2107      	movs	r1, #7
 8008906:	400a      	ands	r2, r1
 8008908:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	0f5b      	lsrs	r3, r3, #29
 8008912:	b2da      	uxtb	r2, r3
 8008914:	250c      	movs	r5, #12
 8008916:	197b      	adds	r3, r7, r5
 8008918:	2107      	movs	r1, #7
 800891a:	400a      	ands	r2, r1
 800891c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800891e:	183b      	adds	r3, r7, r0
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	197a      	adds	r2, r7, r5
 8008924:	7812      	ldrb	r2, [r2, #0]
 8008926:	4914      	ldr	r1, [pc, #80]	@ (8008978 <UARTEx_SetNbDataToProcess+0xb4>)
 8008928:	5c8a      	ldrb	r2, [r1, r2]
 800892a:	435a      	muls	r2, r3
 800892c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800892e:	197b      	adds	r3, r7, r5
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	4a12      	ldr	r2, [pc, #72]	@ (800897c <UARTEx_SetNbDataToProcess+0xb8>)
 8008934:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008936:	0019      	movs	r1, r3
 8008938:	f7f7 fc76 	bl	8000228 <__divsi3>
 800893c:	0003      	movs	r3, r0
 800893e:	b299      	uxth	r1, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	226a      	movs	r2, #106	@ 0x6a
 8008944:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008946:	19bb      	adds	r3, r7, r6
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	193a      	adds	r2, r7, r4
 800894c:	7812      	ldrb	r2, [r2, #0]
 800894e:	490a      	ldr	r1, [pc, #40]	@ (8008978 <UARTEx_SetNbDataToProcess+0xb4>)
 8008950:	5c8a      	ldrb	r2, [r1, r2]
 8008952:	435a      	muls	r2, r3
 8008954:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008956:	193b      	adds	r3, r7, r4
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	4a08      	ldr	r2, [pc, #32]	@ (800897c <UARTEx_SetNbDataToProcess+0xb8>)
 800895c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800895e:	0019      	movs	r1, r3
 8008960:	f7f7 fc62 	bl	8000228 <__divsi3>
 8008964:	0003      	movs	r3, r0
 8008966:	b299      	uxth	r1, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2268      	movs	r2, #104	@ 0x68
 800896c:	5299      	strh	r1, [r3, r2]
}
 800896e:	46c0      	nop			@ (mov r8, r8)
 8008970:	46bd      	mov	sp, r7
 8008972:	b005      	add	sp, #20
 8008974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008976:	46c0      	nop			@ (mov r8, r8)
 8008978:	080091c8 	.word	0x080091c8
 800897c:	080091d0 	.word	0x080091d0

08008980 <atoi>:
 8008980:	b510      	push	{r4, lr}
 8008982:	220a      	movs	r2, #10
 8008984:	2100      	movs	r1, #0
 8008986:	f000 f88b 	bl	8008aa0 <strtol>
 800898a:	bd10      	pop	{r4, pc}

0800898c <_strtol_l.constprop.0>:
 800898c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800898e:	b085      	sub	sp, #20
 8008990:	0017      	movs	r7, r2
 8008992:	001e      	movs	r6, r3
 8008994:	9003      	str	r0, [sp, #12]
 8008996:	9101      	str	r1, [sp, #4]
 8008998:	2b24      	cmp	r3, #36	@ 0x24
 800899a:	d844      	bhi.n	8008a26 <_strtol_l.constprop.0+0x9a>
 800899c:	000c      	movs	r4, r1
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d041      	beq.n	8008a26 <_strtol_l.constprop.0+0x9a>
 80089a2:	4b3d      	ldr	r3, [pc, #244]	@ (8008a98 <_strtol_l.constprop.0+0x10c>)
 80089a4:	2208      	movs	r2, #8
 80089a6:	469c      	mov	ip, r3
 80089a8:	0023      	movs	r3, r4
 80089aa:	4661      	mov	r1, ip
 80089ac:	781d      	ldrb	r5, [r3, #0]
 80089ae:	3401      	adds	r4, #1
 80089b0:	5d48      	ldrb	r0, [r1, r5]
 80089b2:	0001      	movs	r1, r0
 80089b4:	4011      	ands	r1, r2
 80089b6:	4210      	tst	r0, r2
 80089b8:	d1f6      	bne.n	80089a8 <_strtol_l.constprop.0+0x1c>
 80089ba:	2d2d      	cmp	r5, #45	@ 0x2d
 80089bc:	d13a      	bne.n	8008a34 <_strtol_l.constprop.0+0xa8>
 80089be:	7825      	ldrb	r5, [r4, #0]
 80089c0:	1c9c      	adds	r4, r3, #2
 80089c2:	2301      	movs	r3, #1
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	2210      	movs	r2, #16
 80089c8:	0033      	movs	r3, r6
 80089ca:	4393      	bics	r3, r2
 80089cc:	d109      	bne.n	80089e2 <_strtol_l.constprop.0+0x56>
 80089ce:	2d30      	cmp	r5, #48	@ 0x30
 80089d0:	d136      	bne.n	8008a40 <_strtol_l.constprop.0+0xb4>
 80089d2:	2120      	movs	r1, #32
 80089d4:	7823      	ldrb	r3, [r4, #0]
 80089d6:	438b      	bics	r3, r1
 80089d8:	2b58      	cmp	r3, #88	@ 0x58
 80089da:	d131      	bne.n	8008a40 <_strtol_l.constprop.0+0xb4>
 80089dc:	0016      	movs	r6, r2
 80089de:	7865      	ldrb	r5, [r4, #1]
 80089e0:	3402      	adds	r4, #2
 80089e2:	4a2e      	ldr	r2, [pc, #184]	@ (8008a9c <_strtol_l.constprop.0+0x110>)
 80089e4:	9b00      	ldr	r3, [sp, #0]
 80089e6:	4694      	mov	ip, r2
 80089e8:	4463      	add	r3, ip
 80089ea:	0031      	movs	r1, r6
 80089ec:	0018      	movs	r0, r3
 80089ee:	9302      	str	r3, [sp, #8]
 80089f0:	f7f7 fc16 	bl	8000220 <__aeabi_uidivmod>
 80089f4:	2200      	movs	r2, #0
 80089f6:	4684      	mov	ip, r0
 80089f8:	0010      	movs	r0, r2
 80089fa:	002b      	movs	r3, r5
 80089fc:	3b30      	subs	r3, #48	@ 0x30
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d825      	bhi.n	8008a4e <_strtol_l.constprop.0+0xc2>
 8008a02:	001d      	movs	r5, r3
 8008a04:	42ae      	cmp	r6, r5
 8008a06:	dd31      	ble.n	8008a6c <_strtol_l.constprop.0+0xe0>
 8008a08:	1c53      	adds	r3, r2, #1
 8008a0a:	d009      	beq.n	8008a20 <_strtol_l.constprop.0+0x94>
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	4252      	negs	r2, r2
 8008a10:	4584      	cmp	ip, r0
 8008a12:	d305      	bcc.n	8008a20 <_strtol_l.constprop.0+0x94>
 8008a14:	d101      	bne.n	8008a1a <_strtol_l.constprop.0+0x8e>
 8008a16:	42a9      	cmp	r1, r5
 8008a18:	db25      	blt.n	8008a66 <_strtol_l.constprop.0+0xda>
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	4370      	muls	r0, r6
 8008a1e:	1828      	adds	r0, r5, r0
 8008a20:	7825      	ldrb	r5, [r4, #0]
 8008a22:	3401      	adds	r4, #1
 8008a24:	e7e9      	b.n	80089fa <_strtol_l.constprop.0+0x6e>
 8008a26:	f000 f89b 	bl	8008b60 <__errno>
 8008a2a:	2316      	movs	r3, #22
 8008a2c:	6003      	str	r3, [r0, #0]
 8008a2e:	2000      	movs	r0, #0
 8008a30:	b005      	add	sp, #20
 8008a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a34:	9100      	str	r1, [sp, #0]
 8008a36:	2d2b      	cmp	r5, #43	@ 0x2b
 8008a38:	d1c5      	bne.n	80089c6 <_strtol_l.constprop.0+0x3a>
 8008a3a:	7825      	ldrb	r5, [r4, #0]
 8008a3c:	1c9c      	adds	r4, r3, #2
 8008a3e:	e7c2      	b.n	80089c6 <_strtol_l.constprop.0+0x3a>
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	d1ce      	bne.n	80089e2 <_strtol_l.constprop.0+0x56>
 8008a44:	3608      	adds	r6, #8
 8008a46:	2d30      	cmp	r5, #48	@ 0x30
 8008a48:	d0cb      	beq.n	80089e2 <_strtol_l.constprop.0+0x56>
 8008a4a:	3602      	adds	r6, #2
 8008a4c:	e7c9      	b.n	80089e2 <_strtol_l.constprop.0+0x56>
 8008a4e:	002b      	movs	r3, r5
 8008a50:	3b41      	subs	r3, #65	@ 0x41
 8008a52:	2b19      	cmp	r3, #25
 8008a54:	d801      	bhi.n	8008a5a <_strtol_l.constprop.0+0xce>
 8008a56:	3d37      	subs	r5, #55	@ 0x37
 8008a58:	e7d4      	b.n	8008a04 <_strtol_l.constprop.0+0x78>
 8008a5a:	002b      	movs	r3, r5
 8008a5c:	3b61      	subs	r3, #97	@ 0x61
 8008a5e:	2b19      	cmp	r3, #25
 8008a60:	d804      	bhi.n	8008a6c <_strtol_l.constprop.0+0xe0>
 8008a62:	3d57      	subs	r5, #87	@ 0x57
 8008a64:	e7ce      	b.n	8008a04 <_strtol_l.constprop.0+0x78>
 8008a66:	2201      	movs	r2, #1
 8008a68:	4252      	negs	r2, r2
 8008a6a:	e7d9      	b.n	8008a20 <_strtol_l.constprop.0+0x94>
 8008a6c:	1c53      	adds	r3, r2, #1
 8008a6e:	d108      	bne.n	8008a82 <_strtol_l.constprop.0+0xf6>
 8008a70:	2322      	movs	r3, #34	@ 0x22
 8008a72:	9a03      	ldr	r2, [sp, #12]
 8008a74:	9802      	ldr	r0, [sp, #8]
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	2f00      	cmp	r7, #0
 8008a7a:	d0d9      	beq.n	8008a30 <_strtol_l.constprop.0+0xa4>
 8008a7c:	1e63      	subs	r3, r4, #1
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	e007      	b.n	8008a92 <_strtol_l.constprop.0+0x106>
 8008a82:	9b00      	ldr	r3, [sp, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d000      	beq.n	8008a8a <_strtol_l.constprop.0+0xfe>
 8008a88:	4240      	negs	r0, r0
 8008a8a:	2f00      	cmp	r7, #0
 8008a8c:	d0d0      	beq.n	8008a30 <_strtol_l.constprop.0+0xa4>
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	d1f4      	bne.n	8008a7c <_strtol_l.constprop.0+0xf0>
 8008a92:	9b01      	ldr	r3, [sp, #4]
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	e7cb      	b.n	8008a30 <_strtol_l.constprop.0+0xa4>
 8008a98:	080091fe 	.word	0x080091fe
 8008a9c:	7fffffff 	.word	0x7fffffff

08008aa0 <strtol>:
 8008aa0:	b510      	push	{r4, lr}
 8008aa2:	4c04      	ldr	r4, [pc, #16]	@ (8008ab4 <strtol+0x14>)
 8008aa4:	0013      	movs	r3, r2
 8008aa6:	000a      	movs	r2, r1
 8008aa8:	0001      	movs	r1, r0
 8008aaa:	6820      	ldr	r0, [r4, #0]
 8008aac:	f7ff ff6e 	bl	800898c <_strtol_l.constprop.0>
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	46c0      	nop			@ (mov r8, r8)
 8008ab4:	20000018 	.word	0x20000018

08008ab8 <__utoa>:
 8008ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aba:	000c      	movs	r4, r1
 8008abc:	0016      	movs	r6, r2
 8008abe:	b08d      	sub	sp, #52	@ 0x34
 8008ac0:	2225      	movs	r2, #37	@ 0x25
 8008ac2:	0007      	movs	r7, r0
 8008ac4:	4915      	ldr	r1, [pc, #84]	@ (8008b1c <__utoa+0x64>)
 8008ac6:	a802      	add	r0, sp, #8
 8008ac8:	f000 f874 	bl	8008bb4 <memcpy>
 8008acc:	1e62      	subs	r2, r4, #1
 8008ace:	1eb3      	subs	r3, r6, #2
 8008ad0:	2500      	movs	r5, #0
 8008ad2:	9201      	str	r2, [sp, #4]
 8008ad4:	2b22      	cmp	r3, #34	@ 0x22
 8008ad6:	d904      	bls.n	8008ae2 <__utoa+0x2a>
 8008ad8:	7025      	strb	r5, [r4, #0]
 8008ada:	002c      	movs	r4, r5
 8008adc:	0020      	movs	r0, r4
 8008ade:	b00d      	add	sp, #52	@ 0x34
 8008ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae2:	0038      	movs	r0, r7
 8008ae4:	0031      	movs	r1, r6
 8008ae6:	f7f7 fb9b 	bl	8000220 <__aeabi_uidivmod>
 8008aea:	000b      	movs	r3, r1
 8008aec:	aa02      	add	r2, sp, #8
 8008aee:	5cd3      	ldrb	r3, [r2, r3]
 8008af0:	9a01      	ldr	r2, [sp, #4]
 8008af2:	0029      	movs	r1, r5
 8008af4:	3501      	adds	r5, #1
 8008af6:	5553      	strb	r3, [r2, r5]
 8008af8:	003b      	movs	r3, r7
 8008afa:	0007      	movs	r7, r0
 8008afc:	429e      	cmp	r6, r3
 8008afe:	d9f0      	bls.n	8008ae2 <__utoa+0x2a>
 8008b00:	2300      	movs	r3, #0
 8008b02:	0022      	movs	r2, r4
 8008b04:	5563      	strb	r3, [r4, r5]
 8008b06:	000b      	movs	r3, r1
 8008b08:	1ac8      	subs	r0, r1, r3
 8008b0a:	4283      	cmp	r3, r0
 8008b0c:	dde6      	ble.n	8008adc <__utoa+0x24>
 8008b0e:	7810      	ldrb	r0, [r2, #0]
 8008b10:	5ce5      	ldrb	r5, [r4, r3]
 8008b12:	7015      	strb	r5, [r2, #0]
 8008b14:	54e0      	strb	r0, [r4, r3]
 8008b16:	3201      	adds	r2, #1
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	e7f5      	b.n	8008b08 <__utoa+0x50>
 8008b1c:	080091d8 	.word	0x080091d8

08008b20 <utoa>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	f7ff ffc9 	bl	8008ab8 <__utoa>
 8008b26:	bd10      	pop	{r4, pc}

08008b28 <memset>:
 8008b28:	0003      	movs	r3, r0
 8008b2a:	1882      	adds	r2, r0, r2
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d100      	bne.n	8008b32 <memset+0xa>
 8008b30:	4770      	bx	lr
 8008b32:	7019      	strb	r1, [r3, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	e7f9      	b.n	8008b2c <memset+0x4>

08008b38 <strncpy>:
 8008b38:	0003      	movs	r3, r0
 8008b3a:	b530      	push	{r4, r5, lr}
 8008b3c:	001d      	movs	r5, r3
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	d006      	beq.n	8008b50 <strncpy+0x18>
 8008b42:	780c      	ldrb	r4, [r1, #0]
 8008b44:	3a01      	subs	r2, #1
 8008b46:	3301      	adds	r3, #1
 8008b48:	702c      	strb	r4, [r5, #0]
 8008b4a:	3101      	adds	r1, #1
 8008b4c:	2c00      	cmp	r4, #0
 8008b4e:	d1f5      	bne.n	8008b3c <strncpy+0x4>
 8008b50:	2100      	movs	r1, #0
 8008b52:	189a      	adds	r2, r3, r2
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d100      	bne.n	8008b5a <strncpy+0x22>
 8008b58:	bd30      	pop	{r4, r5, pc}
 8008b5a:	7019      	strb	r1, [r3, #0]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	e7f9      	b.n	8008b54 <strncpy+0x1c>

08008b60 <__errno>:
 8008b60:	4b01      	ldr	r3, [pc, #4]	@ (8008b68 <__errno+0x8>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	4770      	bx	lr
 8008b66:	46c0      	nop			@ (mov r8, r8)
 8008b68:	20000018 	.word	0x20000018

08008b6c <__libc_init_array>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	2600      	movs	r6, #0
 8008b70:	4c0c      	ldr	r4, [pc, #48]	@ (8008ba4 <__libc_init_array+0x38>)
 8008b72:	4d0d      	ldr	r5, [pc, #52]	@ (8008ba8 <__libc_init_array+0x3c>)
 8008b74:	1b64      	subs	r4, r4, r5
 8008b76:	10a4      	asrs	r4, r4, #2
 8008b78:	42a6      	cmp	r6, r4
 8008b7a:	d109      	bne.n	8008b90 <__libc_init_array+0x24>
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	f000 f823 	bl	8008bc8 <_init>
 8008b82:	4c0a      	ldr	r4, [pc, #40]	@ (8008bac <__libc_init_array+0x40>)
 8008b84:	4d0a      	ldr	r5, [pc, #40]	@ (8008bb0 <__libc_init_array+0x44>)
 8008b86:	1b64      	subs	r4, r4, r5
 8008b88:	10a4      	asrs	r4, r4, #2
 8008b8a:	42a6      	cmp	r6, r4
 8008b8c:	d105      	bne.n	8008b9a <__libc_init_array+0x2e>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	00b3      	lsls	r3, r6, #2
 8008b92:	58eb      	ldr	r3, [r5, r3]
 8008b94:	4798      	blx	r3
 8008b96:	3601      	adds	r6, #1
 8008b98:	e7ee      	b.n	8008b78 <__libc_init_array+0xc>
 8008b9a:	00b3      	lsls	r3, r6, #2
 8008b9c:	58eb      	ldr	r3, [r5, r3]
 8008b9e:	4798      	blx	r3
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	e7f2      	b.n	8008b8a <__libc_init_array+0x1e>
 8008ba4:	08009308 	.word	0x08009308
 8008ba8:	08009308 	.word	0x08009308
 8008bac:	0800930c 	.word	0x0800930c
 8008bb0:	08009308 	.word	0x08009308

08008bb4 <memcpy>:
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d100      	bne.n	8008bbe <memcpy+0xa>
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	5ccc      	ldrb	r4, [r1, r3]
 8008bc0:	54c4      	strb	r4, [r0, r3]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	e7f8      	b.n	8008bb8 <memcpy+0x4>
	...

08008bc8 <_init>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	46c0      	nop			@ (mov r8, r8)
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_fini>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	46c0      	nop			@ (mov r8, r8)
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr
