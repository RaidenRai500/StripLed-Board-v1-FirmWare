
ClapClap_Ledscontrol_HWv0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a44  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08007b00  08007b00  00008b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008140  08008140  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008140  08008140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008148  08008148  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008148  08008148  00009148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800814c  0800814c  0000914c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008150  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000010  08008160  0000a010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08008160  0000a590  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab3b  00000000  00000000  0000a038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c7  00000000  00000000  00024b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00028440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001298  00000000  00000000  00029c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3cd  00000000  00000000  0002af08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbfa  00000000  00000000  0004a2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2ed7  00000000  00000000  00065ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128da6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000567c  00000000  00000000  00128dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0012e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007ae8 	.word	0x08007ae8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08007ae8 	.word	0x08007ae8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	@ (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	@ (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 fb78 	bl	8000b54 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 fb73 	bl	8000b54 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__aeabi_fdiv>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	464f      	mov	r7, r9
 80005dc:	4646      	mov	r6, r8
 80005de:	46d6      	mov	lr, sl
 80005e0:	0244      	lsls	r4, r0, #9
 80005e2:	b5c0      	push	{r6, r7, lr}
 80005e4:	0047      	lsls	r7, r0, #1
 80005e6:	1c0e      	adds	r6, r1, #0
 80005e8:	0a64      	lsrs	r4, r4, #9
 80005ea:	0e3f      	lsrs	r7, r7, #24
 80005ec:	0fc5      	lsrs	r5, r0, #31
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d03c      	beq.n	800066c <__aeabi_fdiv+0x94>
 80005f2:	2fff      	cmp	r7, #255	@ 0xff
 80005f4:	d042      	beq.n	800067c <__aeabi_fdiv+0xa4>
 80005f6:	2300      	movs	r3, #0
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	4699      	mov	r9, r3
 80005fc:	469a      	mov	sl, r3
 80005fe:	00e4      	lsls	r4, r4, #3
 8000600:	04d2      	lsls	r2, r2, #19
 8000602:	4314      	orrs	r4, r2
 8000604:	3f7f      	subs	r7, #127	@ 0x7f
 8000606:	0273      	lsls	r3, r6, #9
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	4698      	mov	r8, r3
 800060c:	0073      	lsls	r3, r6, #1
 800060e:	0e1b      	lsrs	r3, r3, #24
 8000610:	0ff6      	lsrs	r6, r6, #31
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01b      	beq.n	800064e <__aeabi_fdiv+0x76>
 8000616:	2bff      	cmp	r3, #255	@ 0xff
 8000618:	d013      	beq.n	8000642 <__aeabi_fdiv+0x6a>
 800061a:	4642      	mov	r2, r8
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	00d2      	lsls	r2, r2, #3
 8000620:	04c9      	lsls	r1, r1, #19
 8000622:	4311      	orrs	r1, r2
 8000624:	4688      	mov	r8, r1
 8000626:	2000      	movs	r0, #0
 8000628:	3b7f      	subs	r3, #127	@ 0x7f
 800062a:	0029      	movs	r1, r5
 800062c:	1aff      	subs	r7, r7, r3
 800062e:	464b      	mov	r3, r9
 8000630:	4071      	eors	r1, r6
 8000632:	b2c9      	uxtb	r1, r1
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d900      	bls.n	800063a <__aeabi_fdiv+0x62>
 8000638:	e0b5      	b.n	80007a6 <__aeabi_fdiv+0x1ce>
 800063a:	4a74      	ldr	r2, [pc, #464]	@ (800080c <__aeabi_fdiv+0x234>)
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	58d3      	ldr	r3, [r2, r3]
 8000640:	469f      	mov	pc, r3
 8000642:	4643      	mov	r3, r8
 8000644:	2b00      	cmp	r3, #0
 8000646:	d13f      	bne.n	80006c8 <__aeabi_fdiv+0xf0>
 8000648:	3fff      	subs	r7, #255	@ 0xff
 800064a:	3302      	adds	r3, #2
 800064c:	e003      	b.n	8000656 <__aeabi_fdiv+0x7e>
 800064e:	4643      	mov	r3, r8
 8000650:	2b00      	cmp	r3, #0
 8000652:	d12d      	bne.n	80006b0 <__aeabi_fdiv+0xd8>
 8000654:	2301      	movs	r3, #1
 8000656:	0029      	movs	r1, r5
 8000658:	464a      	mov	r2, r9
 800065a:	4071      	eors	r1, r6
 800065c:	b2c9      	uxtb	r1, r1
 800065e:	431a      	orrs	r2, r3
 8000660:	2a0e      	cmp	r2, #14
 8000662:	d838      	bhi.n	80006d6 <__aeabi_fdiv+0xfe>
 8000664:	486a      	ldr	r0, [pc, #424]	@ (8000810 <__aeabi_fdiv+0x238>)
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	5882      	ldr	r2, [r0, r2]
 800066a:	4697      	mov	pc, r2
 800066c:	2c00      	cmp	r4, #0
 800066e:	d113      	bne.n	8000698 <__aeabi_fdiv+0xc0>
 8000670:	2304      	movs	r3, #4
 8000672:	4699      	mov	r9, r3
 8000674:	3b03      	subs	r3, #3
 8000676:	2700      	movs	r7, #0
 8000678:	469a      	mov	sl, r3
 800067a:	e7c4      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800067c:	2c00      	cmp	r4, #0
 800067e:	d105      	bne.n	800068c <__aeabi_fdiv+0xb4>
 8000680:	2308      	movs	r3, #8
 8000682:	4699      	mov	r9, r3
 8000684:	3b06      	subs	r3, #6
 8000686:	27ff      	movs	r7, #255	@ 0xff
 8000688:	469a      	mov	sl, r3
 800068a:	e7bc      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800068c:	230c      	movs	r3, #12
 800068e:	4699      	mov	r9, r3
 8000690:	3b09      	subs	r3, #9
 8000692:	27ff      	movs	r7, #255	@ 0xff
 8000694:	469a      	mov	sl, r3
 8000696:	e7b6      	b.n	8000606 <__aeabi_fdiv+0x2e>
 8000698:	0020      	movs	r0, r4
 800069a:	f000 fa3d 	bl	8000b18 <__clzsi2>
 800069e:	2776      	movs	r7, #118	@ 0x76
 80006a0:	1f43      	subs	r3, r0, #5
 80006a2:	409c      	lsls	r4, r3
 80006a4:	2300      	movs	r3, #0
 80006a6:	427f      	negs	r7, r7
 80006a8:	4699      	mov	r9, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	1a3f      	subs	r7, r7, r0
 80006ae:	e7aa      	b.n	8000606 <__aeabi_fdiv+0x2e>
 80006b0:	4640      	mov	r0, r8
 80006b2:	f000 fa31 	bl	8000b18 <__clzsi2>
 80006b6:	4642      	mov	r2, r8
 80006b8:	1f43      	subs	r3, r0, #5
 80006ba:	409a      	lsls	r2, r3
 80006bc:	2376      	movs	r3, #118	@ 0x76
 80006be:	425b      	negs	r3, r3
 80006c0:	1a1b      	subs	r3, r3, r0
 80006c2:	4690      	mov	r8, r2
 80006c4:	2000      	movs	r0, #0
 80006c6:	e7b0      	b.n	800062a <__aeabi_fdiv+0x52>
 80006c8:	2303      	movs	r3, #3
 80006ca:	464a      	mov	r2, r9
 80006cc:	431a      	orrs	r2, r3
 80006ce:	4691      	mov	r9, r2
 80006d0:	2003      	movs	r0, #3
 80006d2:	33fc      	adds	r3, #252	@ 0xfc
 80006d4:	e7a9      	b.n	800062a <__aeabi_fdiv+0x52>
 80006d6:	000d      	movs	r5, r1
 80006d8:	20ff      	movs	r0, #255	@ 0xff
 80006da:	2200      	movs	r2, #0
 80006dc:	05c0      	lsls	r0, r0, #23
 80006de:	07ed      	lsls	r5, r5, #31
 80006e0:	4310      	orrs	r0, r2
 80006e2:	4328      	orrs	r0, r5
 80006e4:	bce0      	pop	{r5, r6, r7}
 80006e6:	46ba      	mov	sl, r7
 80006e8:	46b1      	mov	r9, r6
 80006ea:	46a8      	mov	r8, r5
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ee:	000d      	movs	r5, r1
 80006f0:	2000      	movs	r0, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	e7f2      	b.n	80006dc <__aeabi_fdiv+0x104>
 80006f6:	4653      	mov	r3, sl
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d0ed      	beq.n	80006d8 <__aeabi_fdiv+0x100>
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d033      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000700:	46a0      	mov	r8, r4
 8000702:	2b01      	cmp	r3, #1
 8000704:	d105      	bne.n	8000712 <__aeabi_fdiv+0x13a>
 8000706:	2000      	movs	r0, #0
 8000708:	2200      	movs	r2, #0
 800070a:	e7e7      	b.n	80006dc <__aeabi_fdiv+0x104>
 800070c:	0035      	movs	r5, r6
 800070e:	2803      	cmp	r0, #3
 8000710:	d07a      	beq.n	8000808 <__aeabi_fdiv+0x230>
 8000712:	003b      	movs	r3, r7
 8000714:	337f      	adds	r3, #127	@ 0x7f
 8000716:	2b00      	cmp	r3, #0
 8000718:	dd2d      	ble.n	8000776 <__aeabi_fdiv+0x19e>
 800071a:	4642      	mov	r2, r8
 800071c:	0752      	lsls	r2, r2, #29
 800071e:	d007      	beq.n	8000730 <__aeabi_fdiv+0x158>
 8000720:	220f      	movs	r2, #15
 8000722:	4641      	mov	r1, r8
 8000724:	400a      	ands	r2, r1
 8000726:	2a04      	cmp	r2, #4
 8000728:	d002      	beq.n	8000730 <__aeabi_fdiv+0x158>
 800072a:	2204      	movs	r2, #4
 800072c:	4694      	mov	ip, r2
 800072e:	44e0      	add	r8, ip
 8000730:	4642      	mov	r2, r8
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	d505      	bpl.n	8000742 <__aeabi_fdiv+0x16a>
 8000736:	4642      	mov	r2, r8
 8000738:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <__aeabi_fdiv+0x23c>)
 800073a:	401a      	ands	r2, r3
 800073c:	003b      	movs	r3, r7
 800073e:	4690      	mov	r8, r2
 8000740:	3380      	adds	r3, #128	@ 0x80
 8000742:	2bfe      	cmp	r3, #254	@ 0xfe
 8000744:	dcc8      	bgt.n	80006d8 <__aeabi_fdiv+0x100>
 8000746:	4642      	mov	r2, r8
 8000748:	0192      	lsls	r2, r2, #6
 800074a:	0a52      	lsrs	r2, r2, #9
 800074c:	b2d8      	uxtb	r0, r3
 800074e:	e7c5      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	2500      	movs	r5, #0
 8000754:	20ff      	movs	r0, #255	@ 0xff
 8000756:	03d2      	lsls	r2, r2, #15
 8000758:	e7c0      	b.n	80006dc <__aeabi_fdiv+0x104>
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	4214      	tst	r4, r2
 8000760:	d002      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000762:	4643      	mov	r3, r8
 8000764:	4213      	tst	r3, r2
 8000766:	d049      	beq.n	80007fc <__aeabi_fdiv+0x224>
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	03d2      	lsls	r2, r2, #15
 800076c:	4322      	orrs	r2, r4
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	20ff      	movs	r0, #255	@ 0xff
 8000772:	0a52      	lsrs	r2, r2, #9
 8000774:	e7b2      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000776:	2201      	movs	r2, #1
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b1b      	cmp	r3, #27
 800077c:	dcc3      	bgt.n	8000706 <__aeabi_fdiv+0x12e>
 800077e:	4642      	mov	r2, r8
 8000780:	40da      	lsrs	r2, r3
 8000782:	4643      	mov	r3, r8
 8000784:	379e      	adds	r7, #158	@ 0x9e
 8000786:	40bb      	lsls	r3, r7
 8000788:	1e59      	subs	r1, r3, #1
 800078a:	418b      	sbcs	r3, r1
 800078c:	431a      	orrs	r2, r3
 800078e:	0753      	lsls	r3, r2, #29
 8000790:	d004      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 8000792:	230f      	movs	r3, #15
 8000794:	4013      	ands	r3, r2
 8000796:	2b04      	cmp	r3, #4
 8000798:	d000      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 800079a:	3204      	adds	r2, #4
 800079c:	0153      	lsls	r3, r2, #5
 800079e:	d529      	bpl.n	80007f4 <__aeabi_fdiv+0x21c>
 80007a0:	2001      	movs	r0, #1
 80007a2:	2200      	movs	r2, #0
 80007a4:	e79a      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007a6:	4642      	mov	r2, r8
 80007a8:	0163      	lsls	r3, r4, #5
 80007aa:	0155      	lsls	r5, r2, #5
 80007ac:	42ab      	cmp	r3, r5
 80007ae:	d215      	bcs.n	80007dc <__aeabi_fdiv+0x204>
 80007b0:	201b      	movs	r0, #27
 80007b2:	2200      	movs	r2, #0
 80007b4:	3f01      	subs	r7, #1
 80007b6:	2601      	movs	r6, #1
 80007b8:	001c      	movs	r4, r3
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2c00      	cmp	r4, #0
 80007c0:	db01      	blt.n	80007c6 <__aeabi_fdiv+0x1ee>
 80007c2:	429d      	cmp	r5, r3
 80007c4:	d801      	bhi.n	80007ca <__aeabi_fdiv+0x1f2>
 80007c6:	1b5b      	subs	r3, r3, r5
 80007c8:	4332      	orrs	r2, r6
 80007ca:	3801      	subs	r0, #1
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d1f3      	bne.n	80007b8 <__aeabi_fdiv+0x1e0>
 80007d0:	1e58      	subs	r0, r3, #1
 80007d2:	4183      	sbcs	r3, r0
 80007d4:	4313      	orrs	r3, r2
 80007d6:	4698      	mov	r8, r3
 80007d8:	000d      	movs	r5, r1
 80007da:	e79a      	b.n	8000712 <__aeabi_fdiv+0x13a>
 80007dc:	201a      	movs	r0, #26
 80007de:	2201      	movs	r2, #1
 80007e0:	1b5b      	subs	r3, r3, r5
 80007e2:	e7e8      	b.n	80007b6 <__aeabi_fdiv+0x1de>
 80007e4:	3b02      	subs	r3, #2
 80007e6:	425a      	negs	r2, r3
 80007e8:	4153      	adcs	r3, r2
 80007ea:	425b      	negs	r3, r3
 80007ec:	0035      	movs	r5, r6
 80007ee:	2200      	movs	r2, #0
 80007f0:	b2d8      	uxtb	r0, r3
 80007f2:	e773      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007f4:	0192      	lsls	r2, r2, #6
 80007f6:	2000      	movs	r0, #0
 80007f8:	0a52      	lsrs	r2, r2, #9
 80007fa:	e76f      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007fc:	431a      	orrs	r2, r3
 80007fe:	0252      	lsls	r2, r2, #9
 8000800:	0035      	movs	r5, r6
 8000802:	20ff      	movs	r0, #255	@ 0xff
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	e769      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000808:	4644      	mov	r4, r8
 800080a:	e7ad      	b.n	8000768 <__aeabi_fdiv+0x190>
 800080c:	08007d0c 	.word	0x08007d0c
 8000810:	08007d4c 	.word	0x08007d4c
 8000814:	f7ffffff 	.word	0xf7ffffff

08000818 <__aeabi_fmul>:
 8000818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081a:	464f      	mov	r7, r9
 800081c:	4646      	mov	r6, r8
 800081e:	46d6      	mov	lr, sl
 8000820:	0243      	lsls	r3, r0, #9
 8000822:	0a5b      	lsrs	r3, r3, #9
 8000824:	0045      	lsls	r5, r0, #1
 8000826:	b5c0      	push	{r6, r7, lr}
 8000828:	4699      	mov	r9, r3
 800082a:	1c0f      	adds	r7, r1, #0
 800082c:	0e2d      	lsrs	r5, r5, #24
 800082e:	0fc6      	lsrs	r6, r0, #31
 8000830:	2d00      	cmp	r5, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fmul+0x1e>
 8000834:	e088      	b.n	8000948 <__aeabi_fmul+0x130>
 8000836:	2dff      	cmp	r5, #255	@ 0xff
 8000838:	d100      	bne.n	800083c <__aeabi_fmul+0x24>
 800083a:	e08d      	b.n	8000958 <__aeabi_fmul+0x140>
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	04d2      	lsls	r2, r2, #19
 8000842:	431a      	orrs	r2, r3
 8000844:	2300      	movs	r3, #0
 8000846:	4691      	mov	r9, r2
 8000848:	4698      	mov	r8, r3
 800084a:	469a      	mov	sl, r3
 800084c:	3d7f      	subs	r5, #127	@ 0x7f
 800084e:	027c      	lsls	r4, r7, #9
 8000850:	007b      	lsls	r3, r7, #1
 8000852:	0a64      	lsrs	r4, r4, #9
 8000854:	0e1b      	lsrs	r3, r3, #24
 8000856:	0fff      	lsrs	r7, r7, #31
 8000858:	2b00      	cmp	r3, #0
 800085a:	d068      	beq.n	800092e <__aeabi_fmul+0x116>
 800085c:	2bff      	cmp	r3, #255	@ 0xff
 800085e:	d021      	beq.n	80008a4 <__aeabi_fmul+0x8c>
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	00e4      	lsls	r4, r4, #3
 8000864:	04d2      	lsls	r2, r2, #19
 8000866:	4314      	orrs	r4, r2
 8000868:	4642      	mov	r2, r8
 800086a:	3b7f      	subs	r3, #127	@ 0x7f
 800086c:	195b      	adds	r3, r3, r5
 800086e:	2100      	movs	r1, #0
 8000870:	1c5d      	adds	r5, r3, #1
 8000872:	2a0a      	cmp	r2, #10
 8000874:	dc2e      	bgt.n	80008d4 <__aeabi_fmul+0xbc>
 8000876:	407e      	eors	r6, r7
 8000878:	4642      	mov	r2, r8
 800087a:	2a02      	cmp	r2, #2
 800087c:	dc23      	bgt.n	80008c6 <__aeabi_fmul+0xae>
 800087e:	3a01      	subs	r2, #1
 8000880:	2a01      	cmp	r2, #1
 8000882:	d900      	bls.n	8000886 <__aeabi_fmul+0x6e>
 8000884:	e0bd      	b.n	8000a02 <__aeabi_fmul+0x1ea>
 8000886:	2902      	cmp	r1, #2
 8000888:	d06e      	beq.n	8000968 <__aeabi_fmul+0x150>
 800088a:	2901      	cmp	r1, #1
 800088c:	d12c      	bne.n	80008e8 <__aeabi_fmul+0xd0>
 800088e:	2000      	movs	r0, #0
 8000890:	2200      	movs	r2, #0
 8000892:	05c0      	lsls	r0, r0, #23
 8000894:	07f6      	lsls	r6, r6, #31
 8000896:	4310      	orrs	r0, r2
 8000898:	4330      	orrs	r0, r6
 800089a:	bce0      	pop	{r5, r6, r7}
 800089c:	46ba      	mov	sl, r7
 800089e:	46b1      	mov	r9, r6
 80008a0:	46a8      	mov	r8, r5
 80008a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a4:	002b      	movs	r3, r5
 80008a6:	33ff      	adds	r3, #255	@ 0xff
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	d065      	beq.n	8000978 <__aeabi_fmul+0x160>
 80008ac:	2203      	movs	r2, #3
 80008ae:	4641      	mov	r1, r8
 80008b0:	4311      	orrs	r1, r2
 80008b2:	0032      	movs	r2, r6
 80008b4:	3501      	adds	r5, #1
 80008b6:	4688      	mov	r8, r1
 80008b8:	407a      	eors	r2, r7
 80008ba:	35ff      	adds	r5, #255	@ 0xff
 80008bc:	290a      	cmp	r1, #10
 80008be:	dd00      	ble.n	80008c2 <__aeabi_fmul+0xaa>
 80008c0:	e0d8      	b.n	8000a74 <__aeabi_fmul+0x25c>
 80008c2:	0016      	movs	r6, r2
 80008c4:	2103      	movs	r1, #3
 80008c6:	4640      	mov	r0, r8
 80008c8:	2201      	movs	r2, #1
 80008ca:	4082      	lsls	r2, r0
 80008cc:	20a6      	movs	r0, #166	@ 0xa6
 80008ce:	00c0      	lsls	r0, r0, #3
 80008d0:	4202      	tst	r2, r0
 80008d2:	d020      	beq.n	8000916 <__aeabi_fmul+0xfe>
 80008d4:	4653      	mov	r3, sl
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d046      	beq.n	8000968 <__aeabi_fmul+0x150>
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fmul+0xc8>
 80008de:	e0bb      	b.n	8000a58 <__aeabi_fmul+0x240>
 80008e0:	4651      	mov	r1, sl
 80008e2:	464c      	mov	r4, r9
 80008e4:	2901      	cmp	r1, #1
 80008e6:	d0d2      	beq.n	800088e <__aeabi_fmul+0x76>
 80008e8:	002b      	movs	r3, r5
 80008ea:	337f      	adds	r3, #127	@ 0x7f
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	dd70      	ble.n	80009d2 <__aeabi_fmul+0x1ba>
 80008f0:	0762      	lsls	r2, r4, #29
 80008f2:	d004      	beq.n	80008fe <__aeabi_fmul+0xe6>
 80008f4:	220f      	movs	r2, #15
 80008f6:	4022      	ands	r2, r4
 80008f8:	2a04      	cmp	r2, #4
 80008fa:	d000      	beq.n	80008fe <__aeabi_fmul+0xe6>
 80008fc:	3404      	adds	r4, #4
 80008fe:	0122      	lsls	r2, r4, #4
 8000900:	d503      	bpl.n	800090a <__aeabi_fmul+0xf2>
 8000902:	4b63      	ldr	r3, [pc, #396]	@ (8000a90 <__aeabi_fmul+0x278>)
 8000904:	401c      	ands	r4, r3
 8000906:	002b      	movs	r3, r5
 8000908:	3380      	adds	r3, #128	@ 0x80
 800090a:	2bfe      	cmp	r3, #254	@ 0xfe
 800090c:	dc2c      	bgt.n	8000968 <__aeabi_fmul+0x150>
 800090e:	01a2      	lsls	r2, r4, #6
 8000910:	0a52      	lsrs	r2, r2, #9
 8000912:	b2d8      	uxtb	r0, r3
 8000914:	e7bd      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000916:	2090      	movs	r0, #144	@ 0x90
 8000918:	0080      	lsls	r0, r0, #2
 800091a:	4202      	tst	r2, r0
 800091c:	d127      	bne.n	800096e <__aeabi_fmul+0x156>
 800091e:	38b9      	subs	r0, #185	@ 0xb9
 8000920:	38ff      	subs	r0, #255	@ 0xff
 8000922:	4210      	tst	r0, r2
 8000924:	d06d      	beq.n	8000a02 <__aeabi_fmul+0x1ea>
 8000926:	003e      	movs	r6, r7
 8000928:	46a1      	mov	r9, r4
 800092a:	468a      	mov	sl, r1
 800092c:	e7d2      	b.n	80008d4 <__aeabi_fmul+0xbc>
 800092e:	2c00      	cmp	r4, #0
 8000930:	d141      	bne.n	80009b6 <__aeabi_fmul+0x19e>
 8000932:	2301      	movs	r3, #1
 8000934:	4642      	mov	r2, r8
 8000936:	431a      	orrs	r2, r3
 8000938:	4690      	mov	r8, r2
 800093a:	002b      	movs	r3, r5
 800093c:	4642      	mov	r2, r8
 800093e:	2101      	movs	r1, #1
 8000940:	1c5d      	adds	r5, r3, #1
 8000942:	2a0a      	cmp	r2, #10
 8000944:	dd97      	ble.n	8000876 <__aeabi_fmul+0x5e>
 8000946:	e7c5      	b.n	80008d4 <__aeabi_fmul+0xbc>
 8000948:	2b00      	cmp	r3, #0
 800094a:	d126      	bne.n	800099a <__aeabi_fmul+0x182>
 800094c:	2304      	movs	r3, #4
 800094e:	4698      	mov	r8, r3
 8000950:	3b03      	subs	r3, #3
 8000952:	2500      	movs	r5, #0
 8000954:	469a      	mov	sl, r3
 8000956:	e77a      	b.n	800084e <__aeabi_fmul+0x36>
 8000958:	2b00      	cmp	r3, #0
 800095a:	d118      	bne.n	800098e <__aeabi_fmul+0x176>
 800095c:	2308      	movs	r3, #8
 800095e:	4698      	mov	r8, r3
 8000960:	3b06      	subs	r3, #6
 8000962:	25ff      	movs	r5, #255	@ 0xff
 8000964:	469a      	mov	sl, r3
 8000966:	e772      	b.n	800084e <__aeabi_fmul+0x36>
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	2200      	movs	r2, #0
 800096c:	e791      	b.n	8000892 <__aeabi_fmul+0x7a>
 800096e:	2280      	movs	r2, #128	@ 0x80
 8000970:	2600      	movs	r6, #0
 8000972:	20ff      	movs	r0, #255	@ 0xff
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	e78c      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000978:	4641      	mov	r1, r8
 800097a:	2202      	movs	r2, #2
 800097c:	3501      	adds	r5, #1
 800097e:	4311      	orrs	r1, r2
 8000980:	4688      	mov	r8, r1
 8000982:	35ff      	adds	r5, #255	@ 0xff
 8000984:	290a      	cmp	r1, #10
 8000986:	dca5      	bgt.n	80008d4 <__aeabi_fmul+0xbc>
 8000988:	2102      	movs	r1, #2
 800098a:	407e      	eors	r6, r7
 800098c:	e774      	b.n	8000878 <__aeabi_fmul+0x60>
 800098e:	230c      	movs	r3, #12
 8000990:	4698      	mov	r8, r3
 8000992:	3b09      	subs	r3, #9
 8000994:	25ff      	movs	r5, #255	@ 0xff
 8000996:	469a      	mov	sl, r3
 8000998:	e759      	b.n	800084e <__aeabi_fmul+0x36>
 800099a:	0018      	movs	r0, r3
 800099c:	f000 f8bc 	bl	8000b18 <__clzsi2>
 80009a0:	464a      	mov	r2, r9
 80009a2:	1f43      	subs	r3, r0, #5
 80009a4:	2576      	movs	r5, #118	@ 0x76
 80009a6:	409a      	lsls	r2, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	426d      	negs	r5, r5
 80009ac:	4691      	mov	r9, r2
 80009ae:	4698      	mov	r8, r3
 80009b0:	469a      	mov	sl, r3
 80009b2:	1a2d      	subs	r5, r5, r0
 80009b4:	e74b      	b.n	800084e <__aeabi_fmul+0x36>
 80009b6:	0020      	movs	r0, r4
 80009b8:	f000 f8ae 	bl	8000b18 <__clzsi2>
 80009bc:	4642      	mov	r2, r8
 80009be:	1f43      	subs	r3, r0, #5
 80009c0:	409c      	lsls	r4, r3
 80009c2:	1a2b      	subs	r3, r5, r0
 80009c4:	3b76      	subs	r3, #118	@ 0x76
 80009c6:	2100      	movs	r1, #0
 80009c8:	1c5d      	adds	r5, r3, #1
 80009ca:	2a0a      	cmp	r2, #10
 80009cc:	dc00      	bgt.n	80009d0 <__aeabi_fmul+0x1b8>
 80009ce:	e752      	b.n	8000876 <__aeabi_fmul+0x5e>
 80009d0:	e780      	b.n	80008d4 <__aeabi_fmul+0xbc>
 80009d2:	2201      	movs	r2, #1
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b1b      	cmp	r3, #27
 80009d8:	dd00      	ble.n	80009dc <__aeabi_fmul+0x1c4>
 80009da:	e758      	b.n	800088e <__aeabi_fmul+0x76>
 80009dc:	359e      	adds	r5, #158	@ 0x9e
 80009de:	0022      	movs	r2, r4
 80009e0:	40ac      	lsls	r4, r5
 80009e2:	40da      	lsrs	r2, r3
 80009e4:	1e63      	subs	r3, r4, #1
 80009e6:	419c      	sbcs	r4, r3
 80009e8:	4322      	orrs	r2, r4
 80009ea:	0753      	lsls	r3, r2, #29
 80009ec:	d004      	beq.n	80009f8 <__aeabi_fmul+0x1e0>
 80009ee:	230f      	movs	r3, #15
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d000      	beq.n	80009f8 <__aeabi_fmul+0x1e0>
 80009f6:	3204      	adds	r2, #4
 80009f8:	0153      	lsls	r3, r2, #5
 80009fa:	d537      	bpl.n	8000a6c <__aeabi_fmul+0x254>
 80009fc:	2001      	movs	r0, #1
 80009fe:	2200      	movs	r2, #0
 8000a00:	e747      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000a02:	0c21      	lsrs	r1, r4, #16
 8000a04:	464a      	mov	r2, r9
 8000a06:	0424      	lsls	r4, r4, #16
 8000a08:	0c24      	lsrs	r4, r4, #16
 8000a0a:	0027      	movs	r7, r4
 8000a0c:	0c10      	lsrs	r0, r2, #16
 8000a0e:	0412      	lsls	r2, r2, #16
 8000a10:	0c12      	lsrs	r2, r2, #16
 8000a12:	4344      	muls	r4, r0
 8000a14:	4357      	muls	r7, r2
 8000a16:	4348      	muls	r0, r1
 8000a18:	4351      	muls	r1, r2
 8000a1a:	0c3a      	lsrs	r2, r7, #16
 8000a1c:	1909      	adds	r1, r1, r4
 8000a1e:	1852      	adds	r2, r2, r1
 8000a20:	4294      	cmp	r4, r2
 8000a22:	d903      	bls.n	8000a2c <__aeabi_fmul+0x214>
 8000a24:	2180      	movs	r1, #128	@ 0x80
 8000a26:	0249      	lsls	r1, r1, #9
 8000a28:	468c      	mov	ip, r1
 8000a2a:	4460      	add	r0, ip
 8000a2c:	043f      	lsls	r7, r7, #16
 8000a2e:	0411      	lsls	r1, r2, #16
 8000a30:	0c3f      	lsrs	r7, r7, #16
 8000a32:	19c9      	adds	r1, r1, r7
 8000a34:	018c      	lsls	r4, r1, #6
 8000a36:	1e67      	subs	r7, r4, #1
 8000a38:	41bc      	sbcs	r4, r7
 8000a3a:	0c12      	lsrs	r2, r2, #16
 8000a3c:	0e89      	lsrs	r1, r1, #26
 8000a3e:	1812      	adds	r2, r2, r0
 8000a40:	430c      	orrs	r4, r1
 8000a42:	0192      	lsls	r2, r2, #6
 8000a44:	4314      	orrs	r4, r2
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	d50e      	bpl.n	8000a68 <__aeabi_fmul+0x250>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	0862      	lsrs	r2, r4, #1
 8000a4e:	401c      	ands	r4, r3
 8000a50:	4314      	orrs	r4, r2
 8000a52:	e749      	b.n	80008e8 <__aeabi_fmul+0xd0>
 8000a54:	003e      	movs	r6, r7
 8000a56:	46a1      	mov	r9, r4
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	464b      	mov	r3, r9
 8000a5c:	03d2      	lsls	r2, r2, #15
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	0252      	lsls	r2, r2, #9
 8000a62:	20ff      	movs	r0, #255	@ 0xff
 8000a64:	0a52      	lsrs	r2, r2, #9
 8000a66:	e714      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000a68:	001d      	movs	r5, r3
 8000a6a:	e73d      	b.n	80008e8 <__aeabi_fmul+0xd0>
 8000a6c:	0192      	lsls	r2, r2, #6
 8000a6e:	2000      	movs	r0, #0
 8000a70:	0a52      	lsrs	r2, r2, #9
 8000a72:	e70e      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000a74:	290f      	cmp	r1, #15
 8000a76:	d1ed      	bne.n	8000a54 <__aeabi_fmul+0x23c>
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	464b      	mov	r3, r9
 8000a7c:	03d2      	lsls	r2, r2, #15
 8000a7e:	4213      	tst	r3, r2
 8000a80:	d0ea      	beq.n	8000a58 <__aeabi_fmul+0x240>
 8000a82:	4214      	tst	r4, r2
 8000a84:	d1e8      	bne.n	8000a58 <__aeabi_fmul+0x240>
 8000a86:	003e      	movs	r6, r7
 8000a88:	20ff      	movs	r0, #255	@ 0xff
 8000a8a:	4322      	orrs	r2, r4
 8000a8c:	e701      	b.n	8000892 <__aeabi_fmul+0x7a>
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	f7ffffff 	.word	0xf7ffffff

08000a94 <__aeabi_ui2f>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	1e04      	subs	r4, r0, #0
 8000a98:	d00e      	beq.n	8000ab8 <__aeabi_ui2f+0x24>
 8000a9a:	f000 f83d 	bl	8000b18 <__clzsi2>
 8000a9e:	239e      	movs	r3, #158	@ 0x9e
 8000aa0:	0001      	movs	r1, r0
 8000aa2:	1a1b      	subs	r3, r3, r0
 8000aa4:	2b96      	cmp	r3, #150	@ 0x96
 8000aa6:	dc0c      	bgt.n	8000ac2 <__aeabi_ui2f+0x2e>
 8000aa8:	2808      	cmp	r0, #8
 8000aaa:	d02f      	beq.n	8000b0c <__aeabi_ui2f+0x78>
 8000aac:	3908      	subs	r1, #8
 8000aae:	408c      	lsls	r4, r1
 8000ab0:	0264      	lsls	r4, r4, #9
 8000ab2:	0a64      	lsrs	r4, r4, #9
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	e001      	b.n	8000abc <__aeabi_ui2f+0x28>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	2400      	movs	r4, #0
 8000abc:	05c0      	lsls	r0, r0, #23
 8000abe:	4320      	orrs	r0, r4
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
 8000ac2:	2b99      	cmp	r3, #153	@ 0x99
 8000ac4:	dc16      	bgt.n	8000af4 <__aeabi_ui2f+0x60>
 8000ac6:	1f42      	subs	r2, r0, #5
 8000ac8:	2805      	cmp	r0, #5
 8000aca:	d000      	beq.n	8000ace <__aeabi_ui2f+0x3a>
 8000acc:	4094      	lsls	r4, r2
 8000ace:	0022      	movs	r2, r4
 8000ad0:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <__aeabi_ui2f+0x80>)
 8000ad2:	4002      	ands	r2, r0
 8000ad4:	0765      	lsls	r5, r4, #29
 8000ad6:	d009      	beq.n	8000aec <__aeabi_ui2f+0x58>
 8000ad8:	250f      	movs	r5, #15
 8000ada:	402c      	ands	r4, r5
 8000adc:	2c04      	cmp	r4, #4
 8000ade:	d005      	beq.n	8000aec <__aeabi_ui2f+0x58>
 8000ae0:	3204      	adds	r2, #4
 8000ae2:	0154      	lsls	r4, r2, #5
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_ui2f+0x58>
 8000ae6:	239f      	movs	r3, #159	@ 0x9f
 8000ae8:	4002      	ands	r2, r0
 8000aea:	1a5b      	subs	r3, r3, r1
 8000aec:	0192      	lsls	r2, r2, #6
 8000aee:	0a54      	lsrs	r4, r2, #9
 8000af0:	b2d8      	uxtb	r0, r3
 8000af2:	e7e3      	b.n	8000abc <__aeabi_ui2f+0x28>
 8000af4:	0002      	movs	r2, r0
 8000af6:	0020      	movs	r0, r4
 8000af8:	321b      	adds	r2, #27
 8000afa:	4090      	lsls	r0, r2
 8000afc:	0002      	movs	r2, r0
 8000afe:	1e50      	subs	r0, r2, #1
 8000b00:	4182      	sbcs	r2, r0
 8000b02:	2005      	movs	r0, #5
 8000b04:	1a40      	subs	r0, r0, r1
 8000b06:	40c4      	lsrs	r4, r0
 8000b08:	4314      	orrs	r4, r2
 8000b0a:	e7e0      	b.n	8000ace <__aeabi_ui2f+0x3a>
 8000b0c:	0264      	lsls	r4, r4, #9
 8000b0e:	2096      	movs	r0, #150	@ 0x96
 8000b10:	0a64      	lsrs	r4, r4, #9
 8000b12:	e7d3      	b.n	8000abc <__aeabi_ui2f+0x28>
 8000b14:	fbffffff 	.word	0xfbffffff

08000b18 <__clzsi2>:
 8000b18:	211c      	movs	r1, #28
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	041b      	lsls	r3, r3, #16
 8000b1e:	4298      	cmp	r0, r3
 8000b20:	d301      	bcc.n	8000b26 <__clzsi2+0xe>
 8000b22:	0c00      	lsrs	r0, r0, #16
 8000b24:	3910      	subs	r1, #16
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	d301      	bcc.n	8000b30 <__clzsi2+0x18>
 8000b2c:	0a00      	lsrs	r0, r0, #8
 8000b2e:	3908      	subs	r1, #8
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	4298      	cmp	r0, r3
 8000b34:	d301      	bcc.n	8000b3a <__clzsi2+0x22>
 8000b36:	0900      	lsrs	r0, r0, #4
 8000b38:	3904      	subs	r1, #4
 8000b3a:	a202      	add	r2, pc, #8	@ (adr r2, 8000b44 <__clzsi2+0x2c>)
 8000b3c:	5c10      	ldrb	r0, [r2, r0]
 8000b3e:	1840      	adds	r0, r0, r1
 8000b40:	4770      	bx	lr
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	02020304 	.word	0x02020304
 8000b48:	01010101 	.word	0x01010101
	...

08000b54 <__clzdi2>:
 8000b54:	b510      	push	{r4, lr}
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d103      	bne.n	8000b62 <__clzdi2+0xe>
 8000b5a:	f7ff ffdd 	bl	8000b18 <__clzsi2>
 8000b5e:	3020      	adds	r0, #32
 8000b60:	e002      	b.n	8000b68 <__clzdi2+0x14>
 8000b62:	0008      	movs	r0, r1
 8000b64:	f7ff ffd8 	bl	8000b18 <__clzsi2>
 8000b68:	bd10      	pop	{r4, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)

08000b6c <CC_APP_Nop>:
uint8_t CC_APP_BlinkCnts=CC_APP_LED_INDICATOR_OK_CNTS_BT10MS;	//Variable used to set the board's led blink frequency
CC_APP_Config_t CC_APP_BoardData;								//Handler with the board's data

//Functions
void CC_APP_Nop(void* param1, void* param2, void* param3)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	__asm__("nop");
 8000b78:	46c0      	nop			@ (mov r8, r8)
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <CC_APP_BoardLedBlinking>:

void CC_APP_BoardLedBlinking(void* const param1, void* param2, void* param3)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	uint8_t TotalCounts;
	static uint8_t counts=0;				//Static var to keep the value between entries.

	TotalCounts=*((uint8_t*)param1);		//Same TotalCounts on and off
 8000b90:	2117      	movs	r1, #23
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	7812      	ldrb	r2, [r2, #0]
 8000b98:	701a      	strb	r2, [r3, #0]
	if(counts<TotalCounts)
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <CC_APP_BoardLedBlinking+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	187a      	adds	r2, r7, r1
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d906      	bls.n	8000bb4 <CC_APP_BoardLedBlinking+0x30>
	{
		counts++;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <CC_APP_BoardLedBlinking+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <CC_APP_BoardLedBlinking+0x44>)
 8000bb0:	701a      	strb	r2, [r3, #0]
	else
	{
		CC_ML_LedBoardToggle();
		counts=0;
	}
}
 8000bb2:	e004      	b.n	8000bbe <CC_APP_BoardLedBlinking+0x3a>
		CC_ML_LedBoardToggle();
 8000bb4:	f001 fa54 	bl	8002060 <CC_ML_LedBoardToggle>
		counts=0;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <CC_APP_BoardLedBlinking+0x44>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b006      	add	sp, #24
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	20000088 	.word	0x20000088

08000bcc <CC_APP_SetBoardParam>:

void CC_APP_SetBoardParam(CC_APP_Config_t* const SysData)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	size_t  length;

	length=sizeof(SysData->HwCode);							//Extract the length of the array (already defined like a vector of sizeof(constant to store) length)
 8000bd4:	2311      	movs	r3, #17
 8000bd6:	60fb      	str	r3, [r7, #12]
	strncpy(SysData->HwCode,CC_APP_BOARDHWCODE, length);	//Copy the constant string
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4920      	ldr	r1, [pc, #128]	@ (8000c60 <CC_APP_SetBoardParam+0x94>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f006 ff40 	bl	8007a64 <strncpy>
	SysData->HwCode[length-1]='\0';							//Ensures null terminator (to avoid problems)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	2100      	movs	r1, #0
 8000bec:	54d1      	strb	r1, [r2, r3]

	length=sizeof(SysData->SwVer);
 8000bee:	2313      	movs	r3, #19
 8000bf0:	60fb      	str	r3, [r7, #12]
	strncpy(SysData->SwVer,CC_APP_FWVER, length);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3311      	adds	r3, #17
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	491a      	ldr	r1, [pc, #104]	@ (8000c64 <CC_APP_SetBoardParam+0x98>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f006 ff32 	bl	8007a64 <strncpy>
	SysData->SwVer[length-1]='\0';
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	18d3      	adds	r3, r2, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	745a      	strb	r2, [r3, #17]

	length=sizeof(SysData->HwCode);
 8000c0c:	2311      	movs	r3, #17
 8000c0e:	60fb      	str	r3, [r7, #12]
	strncpy(SysData->Summary,CC_APP_SUMMARY, length);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3324      	adds	r3, #36	@ 0x24
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	4914      	ldr	r1, [pc, #80]	@ (8000c68 <CC_APP_SetBoardParam+0x9c>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f006 ff23 	bl	8007a64 <strncpy>
	SysData->Summary[length-1]='\0';
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	2124      	movs	r1, #36	@ 0x24
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	185b      	adds	r3, r3, r1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]

	length=sizeof(SysData->uC);
 8000c2e:	230e      	movs	r3, #14
 8000c30:	60fb      	str	r3, [r7, #12]
	strncpy(SysData->uC,CC_APP_MICROCONTROLLER, length);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	334d      	adds	r3, #77	@ 0x4d
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <CC_APP_SetBoardParam+0xa0>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f006 ff12 	bl	8007a64 <strncpy>
	SysData->uC[length-1]='\0';
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	214d      	movs	r1, #77	@ 0x4d
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	185b      	adds	r3, r3, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]

	SysData->id=0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	225b      	movs	r2, #91	@ 0x5b
 8000c54:	2100      	movs	r1, #0
 8000c56:	5499      	strb	r1, [r3, r2]
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b004      	add	sp, #16
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	08007b00 	.word	0x08007b00
 8000c64:	08007b14 	.word	0x08007b14
 8000c68:	08007b28 	.word	0x08007b28
 8000c6c:	08007b54 	.word	0x08007b54

08000c70 <CC_LEDPWM_Init>:


//Functions
void CC_LEDPWM_Init(CC_LEDPWM_SoftPwm_t* const pStripControl)
//Initializing the strip's control structure
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]

	pStripControl->Control.BaseCounts=CC_LEDPWM_SOFTPWMBASECOUNTS;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	22a4      	movs	r2, #164	@ 0xa4
 8000c84:	2164      	movs	r1, #100	@ 0x64
 8000c86:	5099      	str	r1, [r3, r2]
	pStripControl->Control.Counter=0;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	22a0      	movs	r2, #160	@ 0xa0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	5099      	str	r1, [r3, r2]

	while(i<CC_LEDPWM_TOTALSTRIPS)
 8000c90:	e01c      	b.n	8000ccc <CC_LEDPWM_Init+0x5c>
	{
		pStripControl->Strip[i].RedDuty=CC_LEDPWM_INITDUTY;
 8000c92:	200f      	movs	r0, #15
 8000c94:	183b      	adds	r3, r7, r0
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	54d1      	strb	r1, [r2, r3]
		pStripControl->Strip[i].GreenDuty=CC_LEDPWM_INITDUTY;
 8000ca0:	0001      	movs	r1, r0
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	18d3      	adds	r3, r2, r3
 8000cac:	3301      	adds	r3, #1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
		pStripControl->Strip[i].BlueDuty=CC_LEDPWM_INITDUTY;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	18d3      	adds	r3, r2, r3
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
		i++;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	3201      	adds	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
	while(i<CC_LEDPWM_TOTALSTRIPS)
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b09      	cmp	r3, #9
 8000cd4:	d9dd      	bls.n	8000c92 <CC_LEDPWM_Init+0x22>
	}
}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b004      	add	sp, #16
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <CC_LEDPWM_CntrCalculus>:

void CC_LEDPWM_CntrCalculus(void* const param1, void* const param2, void* const param3)
//Calculus of the equivalent counts to be reached to accomplish with the given duty
//1st parameter is the struct to manage the strips and 2nd is the number of strips
{
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	CC_LEDPWM_SoftPwm_t* const pStripData=(CC_LEDPWM_SoftPwm_t*)param1;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	61bb      	str	r3, [r7, #24]
	const uint8_t NumStrips=*((uint8_t*)param2);					// Casting and dereference
 8000cf0:	2317      	movs	r3, #23
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 8000cfa:	231f      	movs	r3, #31
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]

	while (i<NumStrips)
 8000d02:	e056      	b.n	8000db2 <CC_LEDPWM_CntrCalculus+0xd2>
	{
		pStripData->Strip[i].RedCounts=(pStripData->Strip[i].RedDuty*pStripData->Control.BaseCounts)/100;
 8000d04:	201f      	movs	r0, #31
 8000d06:	183b      	adds	r3, r7, r0
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	0019      	movs	r1, r3
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	22a4      	movs	r2, #164	@ 0xa4
 8000d16:	589b      	ldr	r3, [r3, r2]
 8000d18:	434b      	muls	r3, r1
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	0005      	movs	r5, r0
 8000d1e:	183b      	adds	r3, r7, r0
 8000d20:	781c      	ldrb	r4, [r3, #0]
 8000d22:	2164      	movs	r1, #100	@ 0x64
 8000d24:	0010      	movs	r0, r2
 8000d26:	f7ff f9f5 	bl	8000114 <__udivsi3>
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	0123      	lsls	r3, r4, #4
 8000d32:	18d3      	adds	r3, r2, r3
 8000d34:	3304      	adds	r3, #4
 8000d36:	6019      	str	r1, [r3, #0]
		pStripData->Strip[i].GreenCounts=(pStripData->Strip[i].GreenDuty*pStripData->Control.BaseCounts)/100;
 8000d38:	0028      	movs	r0, r5
 8000d3a:	183b      	adds	r3, r7, r0
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	18d3      	adds	r3, r2, r3
 8000d44:	3301      	adds	r3, #1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	0019      	movs	r1, r3
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	22a4      	movs	r2, #164	@ 0xa4
 8000d4e:	589b      	ldr	r3, [r3, r2]
 8000d50:	434b      	muls	r3, r1
 8000d52:	001a      	movs	r2, r3
 8000d54:	0005      	movs	r5, r0
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	781c      	ldrb	r4, [r3, #0]
 8000d5a:	2164      	movs	r1, #100	@ 0x64
 8000d5c:	0010      	movs	r0, r2
 8000d5e:	f7ff f9d9 	bl	8000114 <__udivsi3>
 8000d62:	0003      	movs	r3, r0
 8000d64:	0019      	movs	r1, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	0123      	lsls	r3, r4, #4
 8000d6a:	18d3      	adds	r3, r2, r3
 8000d6c:	3308      	adds	r3, #8
 8000d6e:	6019      	str	r1, [r3, #0]
		pStripData->Strip[i].BlueCounts=(pStripData->Strip[i].BlueDuty*pStripData->Control.BaseCounts)/100;
 8000d70:	0028      	movs	r0, r5
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	18d3      	adds	r3, r2, r3
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	0019      	movs	r1, r3
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	22a4      	movs	r2, #164	@ 0xa4
 8000d86:	589b      	ldr	r3, [r3, r2]
 8000d88:	434b      	muls	r3, r1
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	0005      	movs	r5, r0
 8000d8e:	183b      	adds	r3, r7, r0
 8000d90:	781c      	ldrb	r4, [r3, #0]
 8000d92:	2164      	movs	r1, #100	@ 0x64
 8000d94:	0010      	movs	r0, r2
 8000d96:	f7ff f9bd 	bl	8000114 <__udivsi3>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	0123      	lsls	r3, r4, #4
 8000da2:	18d3      	adds	r3, r2, r3
 8000da4:	330c      	adds	r3, #12
 8000da6:	6019      	str	r1, [r3, #0]
		i++;
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	197b      	adds	r3, r7, r5
 8000dae:	3201      	adds	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
	while (i<NumStrips)
 8000db2:	231f      	movs	r3, #31
 8000db4:	18fa      	adds	r2, r7, r3
 8000db6:	2317      	movs	r3, #23
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	7812      	ldrb	r2, [r2, #0]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3a0      	bcc.n	8000d04 <CC_LEDPWM_CntrCalculus+0x24>
	}
}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b008      	add	sp, #32
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}

08000dcc <CC_LEDPWM_IncreaseCntr>:

void CC_LEDPWM_IncreaseCntr(void* const param1, void* const param2, void* const param3)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	CC_LEDPWM_SoftPwm_t* const pStripData=(CC_LEDPWM_SoftPwm_t*) param1;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	617b      	str	r3, [r7, #20]
	pStripData->Control.Counter++;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	22a0      	movs	r2, #160	@ 0xa0
 8000de0:	589b      	ldr	r3, [r3, r2]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	21a0      	movs	r1, #160	@ 0xa0
 8000de8:	505a      	str	r2, [r3, r1]
	if (pStripData->Control.Counter>pStripData->Control.BaseCounts)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	22a0      	movs	r2, #160	@ 0xa0
 8000dee:	589a      	ldr	r2, [r3, r2]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	21a4      	movs	r1, #164	@ 0xa4
 8000df4:	585b      	ldr	r3, [r3, r1]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d903      	bls.n	8000e02 <CC_LEDPWM_IncreaseCntr+0x36>
	{
		pStripData->Control.Counter=0;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	22a0      	movs	r2, #160	@ 0xa0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	5099      	str	r1, [r3, r2]
	}
}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b006      	add	sp, #24
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <CC_LEDPWM_UpdatePwms>:

void CC_LEDPWM_UpdatePwms(void* const param1, void* const param2, void* const param3)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	const CC_LEDPWM_SoftPwm_t* const pStripData=(CC_LEDPWM_SoftPwm_t*)param1;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	613b      	str	r3, [r7, #16]
//	const CC_LED_StripLedFuncts_t* const pStripFuncts=(CC_LED_StripLedFuncts_t*)param2;
	uint8_t i=0;
 8000e1c:	2317      	movs	r3, #23
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]

	while(i<CC_LEDPWM_TOTALSTRIPS)
 8000e24:	e05b      	b.n	8000ede <CC_LEDPWM_UpdatePwms+0xd2>
	{
		if (pStripData->Control.Counter<pStripData->Strip[i].RedCounts)
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	22a0      	movs	r2, #160	@ 0xa0
 8000e2a:	589a      	ldr	r2, [r3, r2]
 8000e2c:	2017      	movs	r0, #23
 8000e2e:	183b      	adds	r3, r7, r0
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	6939      	ldr	r1, [r7, #16]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	18cb      	adds	r3, r1, r3
 8000e38:	3304      	adds	r3, #4
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d206      	bcs.n	8000e4e <CC_LEDPWM_UpdatePwms+0x42>
		{
			(*CC_ML_LedsStripsFunctions.pRedLedOnFunction[i])();
 8000e40:	183b      	adds	r3, r7, r0
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <CC_LEDPWM_UpdatePwms+0xe8>)
 8000e46:	0092      	lsls	r2, r2, #2
 8000e48:	58d3      	ldr	r3, [r2, r3]
 8000e4a:	4798      	blx	r3
 8000e4c:	e007      	b.n	8000e5e <CC_LEDPWM_UpdatePwms+0x52>
//			(*pStripFuncts->pRedLedOnFunction[i])();
		}
		else
		{
//			(*pStripFuncts->pRedLedOffFunction[i])();
			(*CC_ML_LedsStripsFunctions.pRedLedOffFunction[i])();
 8000e4e:	2317      	movs	r3, #23
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <CC_LEDPWM_UpdatePwms+0xe8>)
 8000e56:	320a      	adds	r2, #10
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	58d3      	ldr	r3, [r2, r3]
 8000e5c:	4798      	blx	r3
		}
		if (pStripData->Control.Counter<pStripData->Strip[i].GreenCounts)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	22a0      	movs	r2, #160	@ 0xa0
 8000e62:	589a      	ldr	r2, [r3, r2]
 8000e64:	2017      	movs	r0, #23
 8000e66:	183b      	adds	r3, r7, r0
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	6939      	ldr	r1, [r7, #16]
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	18cb      	adds	r3, r1, r3
 8000e70:	3308      	adds	r3, #8
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <CC_LEDPWM_UpdatePwms+0x7c>
		{
//			(*pStripFuncts->pGreenLedOnFunction[i])();
			(*CC_ML_LedsStripsFunctions.pGreenLedOnFunction[i])();
 8000e78:	183b      	adds	r3, r7, r0
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <CC_LEDPWM_UpdatePwms+0xe8>)
 8000e7e:	3214      	adds	r2, #20
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	58d3      	ldr	r3, [r2, r3]
 8000e84:	4798      	blx	r3
 8000e86:	e007      	b.n	8000e98 <CC_LEDPWM_UpdatePwms+0x8c>
		}
		else
		{
//			(*pStripFuncts->pGreenLedOffFunction[i])();
			(*CC_ML_LedsStripsFunctions.pGreenLedOffFunction[i])();
 8000e88:	2317      	movs	r3, #23
 8000e8a:	18fb      	adds	r3, r7, r3
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <CC_LEDPWM_UpdatePwms+0xe8>)
 8000e90:	321e      	adds	r2, #30
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	58d3      	ldr	r3, [r2, r3]
 8000e96:	4798      	blx	r3
		}
		if (pStripData->Control.Counter<pStripData->Strip[i].BlueCounts)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	22a0      	movs	r2, #160	@ 0xa0
 8000e9c:	589a      	ldr	r2, [r3, r2]
 8000e9e:	2017      	movs	r0, #23
 8000ea0:	183b      	adds	r3, r7, r0
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	6939      	ldr	r1, [r7, #16]
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	18cb      	adds	r3, r1, r3
 8000eaa:	330c      	adds	r3, #12
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d207      	bcs.n	8000ec2 <CC_LEDPWM_UpdatePwms+0xb6>
		{
//			(*pStripFuncts->pBlueLedOnFunction[i])();
			(*CC_ML_LedsStripsFunctions.pBlueLedOnFunction[i])();
 8000eb2:	183b      	adds	r3, r7, r0
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <CC_LEDPWM_UpdatePwms+0xe8>)
 8000eb8:	3228      	adds	r2, #40	@ 0x28
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	58d3      	ldr	r3, [r2, r3]
 8000ebe:	4798      	blx	r3
 8000ec0:	e007      	b.n	8000ed2 <CC_LEDPWM_UpdatePwms+0xc6>
		}
		else
		{
//			(*pStripFuncts->pBlueLedOffFunction[i])();
			(*CC_ML_LedsStripsFunctions.pBlueLedOffFunction[i])();
 8000ec2:	2317      	movs	r3, #23
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <CC_LEDPWM_UpdatePwms+0xe8>)
 8000eca:	3232      	adds	r2, #50	@ 0x32
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	58d3      	ldr	r3, [r2, r3]
 8000ed0:	4798      	blx	r3
		}
		i++;
 8000ed2:	2117      	movs	r1, #23
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	3201      	adds	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
	while(i<CC_LEDPWM_TOTALSTRIPS)
 8000ede:	2317      	movs	r3, #23
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b09      	cmp	r3, #9
 8000ee6:	d99e      	bls.n	8000e26 <CC_LEDPWM_UpdatePwms+0x1a>
	}
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b006      	add	sp, #24
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	08007f90 	.word	0x08007f90

08000ef8 <CC_SCHDLR_Scheduler>:
//Procedure thought to be executed over a non-stop timer interruption.
//Every time it triggers a task is executed (function or procedures).
//and next execution it will execute next task.
//Up to CC_SCHDLR_MAX_THREADS tasks. Only one every time, but restarting
//when the last is done.
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	CC_SCHDLR_Scheduler_t* pSchedulerData;

	pSchedulerData = (CC_SCHDLR_Scheduler_t*)pSchedulerStruct;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	617b      	str	r3, [r7, #20]
	((void (*)(void*, void*, void*))pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].function)	//Task pSchedulerData->TaskOngoing dereferencing and calling
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	22b0      	movs	r2, #176	@ 0xb0
 8000f0c:	5c9b      	ldrb	r3, [r3, r2]
 8000f0e:	001a      	movs	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	58d3      	ldr	r3, [r2, r3]
 8000f16:	001c      	movs	r4, r3
	(
		pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].input_param1,							//Task pSchedulerData->TaskOngoing parameter 1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	22b0      	movs	r2, #176	@ 0xb0
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
	((void (*)(void*, void*, void*))pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].function)	//Task pSchedulerData->TaskOngoing dereferencing and calling
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	18d3      	adds	r3, r2, r3
 8000f24:	3304      	adds	r3, #4
 8000f26:	6818      	ldr	r0, [r3, #0]
		pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].input_param2, 							//Task pSchedulerData->TaskOngoing parameter 2
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	22b0      	movs	r2, #176	@ 0xb0
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
	((void (*)(void*, void*, void*))pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].function)	//Task pSchedulerData->TaskOngoing dereferencing and calling
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	18d3      	adds	r3, r2, r3
 8000f34:	3308      	adds	r3, #8
 8000f36:	6819      	ldr	r1, [r3, #0]
		pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].input_param3 							//Task pSchedulerData->TaskOngoing parameter 3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	22b0      	movs	r2, #176	@ 0xb0
 8000f3c:	5c9b      	ldrb	r3, [r3, r2]
	((void (*)(void*, void*, void*))pSchedulerData->Task2Launch[pSchedulerData->TaskOngoing].function)	//Task pSchedulerData->TaskOngoing dereferencing and calling
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	18d3      	adds	r3, r2, r3
 8000f44:	330c      	adds	r3, #12
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	001a      	movs	r2, r3
 8000f4a:	47a0      	blx	r4
	);
	pSchedulerData->IntCount++;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	33a8      	adds	r3, #168	@ 0xa8
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2001      	movs	r0, #1
 8000f56:	2100      	movs	r1, #0
 8000f58:	1812      	adds	r2, r2, r0
 8000f5a:	414b      	adcs	r3, r1
 8000f5c:	6979      	ldr	r1, [r7, #20]
 8000f5e:	31a8      	adds	r1, #168	@ 0xa8
 8000f60:	600a      	str	r2, [r1, #0]
 8000f62:	604b      	str	r3, [r1, #4]
	pSchedulerData->TaskOngoing++;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	22b0      	movs	r2, #176	@ 0xb0
 8000f68:	5c9b      	ldrb	r3, [r3, r2]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b2d9      	uxtb	r1, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	22b0      	movs	r2, #176	@ 0xb0
 8000f72:	5499      	strb	r1, [r3, r2]
	if(pSchedulerData->TaskOngoing==CC_SCHDLR_MAX_THREADS)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	22b0      	movs	r2, #176	@ 0xb0
 8000f78:	5c9b      	ldrb	r3, [r3, r2]
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d103      	bne.n	8000f86 <CC_SCHDLR_Scheduler+0x8e>
	{
		pSchedulerData->TaskOngoing=0;		//Restart tasks
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	22b0      	movs	r2, #176	@ 0xb0
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]
	}
	CC_SCHDLR_CheckForSchedulerOverflow(pSchedulerData);
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 f805 	bl	8000f98 <CC_SCHDLR_CheckForSchedulerOverflow>
}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b007      	add	sp, #28
 8000f94:	bd90      	pop	{r4, r7, pc}
	...

08000f98 <CC_SCHDLR_CheckForSchedulerOverflow>:

//CC_TMR
void CC_SCHDLR_CheckForSchedulerOverflow(CC_SCHDLR_Scheduler_t* const pSchedulerData)
//It is checked if an interrupt happened while ISR is attended.
//It should be used inside the timer's ISR.
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	if (CC_TMR_CheckTimIntFlag(&CC_ML_SCHEDULER_BASETIME_HANDLER)==1)
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <CC_SCHDLR_CheckForSchedulerOverflow+0x38>)
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 ff86 	bl	8001eb4 <CC_TMR_CheckTimIntFlag>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10b      	bne.n	8000fc6 <CC_SCHDLR_CheckForSchedulerOverflow+0x2e>
	{
		pSchedulerData->MissIntCnt++;  		//Overflow count
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	33b8      	adds	r3, #184	@ 0xb8
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	2100      	movs	r1, #0
 8000fba:	1812      	adds	r2, r2, r0
 8000fbc:	414b      	adcs	r3, r1
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	31b8      	adds	r1, #184	@ 0xb8
 8000fc2:	600a      	str	r2, [r1, #0]
 8000fc4:	604b      	str	r3, [r1, #4]
	}
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	200004ac 	.word	0x200004ac

08000fd4 <CC_SCHDLR_SchedulerUsage>:
//ISR starting, and stop before that.
//Then both counts are compared and the % of time used to execute the current
//scheduler's task is calculated.
//If needed this calculus could be done outside the ISR as it is a float calculus
//and therefore it is slow.
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	000a      	movs	r2, r1
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	701a      	strb	r2, [r3, #0]
	uint32_t ControllerTimerCounts;
	uint32_t SchedulerTimerTotalCounts;
	float usage;

	ControllerTimerCounts=CC_ML_GetTimerElapsedCounts(&CC_ML_SCHEDULER_CHRONO_HANDLER);
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <CC_SCHDLR_SchedulerUsage+0x80>)
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 ffc6 	bl	8001f76 <CC_ML_GetTimerElapsedCounts>
 8000fea:	0003      	movs	r3, r0
 8000fec:	617b      	str	r3, [r7, #20]
	pSchedulerControl->TaskUsageCounts[task_number]=ControllerTimerCounts;
 8000fee:	1cfb      	adds	r3, r7, #3
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	320a      	adds	r2, #10
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	6979      	ldr	r1, [r7, #20]
 8000ffa:	50d1      	str	r1, [r2, r3]
	SchedulerTimerTotalCounts=CC_ML_GetTimerLimitCounts(&CC_ML_SCHEDULER_BASETIME_HANDLER);
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <CC_SCHDLR_SchedulerUsage+0x84>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 ffc6 	bl	8001f90 <CC_ML_GetTimerLimitCounts>
 8001004:	0003      	movs	r3, r0
 8001006:	613b      	str	r3, [r7, #16]
	pSchedulerControl->TotalAvailableCounts[task_number]=SchedulerTimerTotalCounts;
 8001008:	1cfb      	adds	r3, r7, #3
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3214      	adds	r2, #20
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	6939      	ldr	r1, [r7, #16]
 8001014:	50d1      	str	r1, [r2, r3]
	usage=((float)ControllerTimerCounts)/((float)SchedulerTimerTotalCounts);
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff fd3c 	bl	8000a94 <__aeabi_ui2f>
 800101c:	1c04      	adds	r4, r0, #0
 800101e:	6938      	ldr	r0, [r7, #16]
 8001020:	f7ff fd38 	bl	8000a94 <__aeabi_ui2f>
 8001024:	1c03      	adds	r3, r0, #0
 8001026:	1c19      	adds	r1, r3, #0
 8001028:	1c20      	adds	r0, r4, #0
 800102a:	f7ff fad5 	bl	80005d8 <__aeabi_fdiv>
 800102e:	1c03      	adds	r3, r0, #0
 8001030:	60fb      	str	r3, [r7, #12]
	usage=usage*100.0;
 8001032:	490a      	ldr	r1, [pc, #40]	@ (800105c <CC_SCHDLR_SchedulerUsage+0x88>)
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f7ff fbef 	bl	8000818 <__aeabi_fmul>
 800103a:	1c03      	adds	r3, r0, #0
 800103c:	60fb      	str	r3, [r7, #12]
	pSchedulerControl->TaskUsageRatio[task_number]=usage;
 800103e:	1cfb      	adds	r3, r7, #3
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	68f9      	ldr	r1, [r7, #12]
 8001048:	50d1      	str	r1, [r2, r3]
}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b007      	add	sp, #28
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	20000414 	.word	0x20000414
 8001058:	200004ac 	.word	0x200004ac
 800105c:	42c80000 	.word	0x42c80000

08001060 <CC_SCHDLR_InitFastScheduler>:

void CC_SCHDLR_InitFastScheduler(CC_SCHDLR_Scheduler_t* const data)
//Loading the scheduler's structure with functions and/or procedures to launch,
//and also their parameters.
//Void pointers to be able to launch different kinds of functions.
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	void (*pfunction) (void*, void*, void*);		//Pointer to void function with 3 void pointers as a parameters

	CC_SCHDLR_Scheduler_t* 	pNestedScheduler;		//Pointer to nested scheduler data
//	CC_LEDPWM_SoftPwm_t* 	pCC_LEDPWM_SoftPwm;		//Pointer to strip leds control data

	data->TaskOngoing=0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	22b0      	movs	r2, #176	@ 0xb0
 800106c:	2100      	movs	r1, #0
 800106e:	5499      	strb	r1, [r3, r2]
	data->IntCount=0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	33a8      	adds	r3, #168	@ 0xa8
 8001074:	0019      	movs	r1, r3
 8001076:	2200      	movs	r2, #0
 8001078:	2300      	movs	r3, #0
 800107a:	600a      	str	r2, [r1, #0]
 800107c:	604b      	str	r3, [r1, #4]
	data->MissIntCnt=0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	33b8      	adds	r3, #184	@ 0xb8
 8001082:	0019      	movs	r1, r3
 8001084:	2200      	movs	r2, #0
 8001086:	2300      	movs	r3, #0
 8001088:	600a      	str	r2, [r1, #0]
 800108a:	604b      	str	r3, [r1, #4]
	data->BaseTimems=CC_SCHDLR_BASE_TIME;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	22a0      	movs	r2, #160	@ 0xa0
 8001090:	2101      	movs	r1, #1
 8001092:	5499      	strb	r1, [r3, r2]

//	pfunction=&CC_LEDPWM_UpdatePwms;							//Task0 initialization. Strip Leds PWM generation
	pfunction=&CC_APP_Nop;										//Task0 initialization
 8001094:	4b4c      	ldr	r3, [pc, #304]	@ (80011c8 <CC_SCHDLR_InitFastScheduler+0x168>)
 8001096:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[0].function=(void*)pfunction;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	601a      	str	r2, [r3, #0]
//	pCC_LEDPWM_SoftPwm=&CC_LEDPWM_Strip;						//Pointer to strip control data
//	data->Task2Launch[0].input_param1=(void*)pCC_LEDPWM_SoftPwm;
	data->Task2Launch[0].input_param1=(void*)NULL;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
	data->Task2Launch[0].input_param2=(void*)NULL;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
	data->Task2Launch[0].input_param3=(void*)NULL;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]

//	pfunction=&CC_LEDPWM_IncreaseCntr;							//Task1 initialization. Base PWM count increasing
	pfunction=&CC_APP_Nop;										//Task1 initialization
 80010b0:	4b45      	ldr	r3, [pc, #276]	@ (80011c8 <CC_SCHDLR_InitFastScheduler+0x168>)
 80010b2:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[1].function=(void*)pfunction;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	611a      	str	r2, [r3, #16]
//	pCC_LEDPWM_SoftPwm=&CC_LEDPWM_Strip;						//Pointer to strip control data
//	data->Task2Launch[1].input_param1=(void*)pCC_LEDPWM_SoftPwm;
	data->Task2Launch[1].input_param1=(void*)NULL;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
	data->Task2Launch[1].input_param2=(void*)NULL;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
	data->Task2Launch[1].input_param3=(void*)NULL;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]

	pfunction=&CC_APP_Nop;										//Task2 initialization
 80010cc:	4b3e      	ldr	r3, [pc, #248]	@ (80011c8 <CC_SCHDLR_InitFastScheduler+0x168>)
 80010ce:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[2].function=(void*)pfunction;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	621a      	str	r2, [r3, #32]
	data->Task2Launch[2].input_param1=(void*)NULL;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24
	data->Task2Launch[2].input_param2=(void*)NULL;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	@ 0x28
	data->Task2Launch[2].input_param3=(void*)NULL;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	62da      	str	r2, [r3, #44]	@ 0x2c

	pfunction=&CC_APP_Nop;										//Task3 initialization
 80010e8:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <CC_SCHDLR_InitFastScheduler+0x168>)
 80010ea:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[3].function=(void*)pfunction;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	631a      	str	r2, [r3, #48]	@ 0x30
	data->Task2Launch[3].input_param1=(void*)NULL;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	635a      	str	r2, [r3, #52]	@ 0x34
	data->Task2Launch[3].input_param2=(void*)NULL;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	639a      	str	r2, [r3, #56]	@ 0x38
	data->Task2Launch[3].input_param3=(void*)NULL;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	63da      	str	r2, [r3, #60]	@ 0x3c

	pfunction=&CC_APP_Nop;										//Task4 initialization
 8001104:	4b30      	ldr	r3, [pc, #192]	@ (80011c8 <CC_SCHDLR_InitFastScheduler+0x168>)
 8001106:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[4].function=(void*)pfunction;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	641a      	str	r2, [r3, #64]	@ 0x40
	data->Task2Launch[4].input_param1=(void*)NULL;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	645a      	str	r2, [r3, #68]	@ 0x44
	data->Task2Launch[4].input_param2=(void*)NULL;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	649a      	str	r2, [r3, #72]	@ 0x48
	data->Task2Launch[4].input_param3=(void*)NULL;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	64da      	str	r2, [r3, #76]	@ 0x4c

	pfunction=&CC_APP_Nop;										//Task5 initialization
 8001120:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <CC_SCHDLR_InitFastScheduler+0x168>)
 8001122:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[5].function=(void*)pfunction;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	651a      	str	r2, [r3, #80]	@ 0x50
	data->Task2Launch[5].input_param1=(void*)NULL;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	655a      	str	r2, [r3, #84]	@ 0x54
	data->Task2Launch[5].input_param2=(void*)NULL;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	659a      	str	r2, [r3, #88]	@ 0x58
	data->Task2Launch[5].input_param3=(void*)NULL;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	65da      	str	r2, [r3, #92]	@ 0x5c

	pfunction=&CC_APP_Nop;										//Task6 initialization
 800113c:	4b22      	ldr	r3, [pc, #136]	@ (80011c8 <CC_SCHDLR_InitFastScheduler+0x168>)
 800113e:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[6].function=(void*)pfunction;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	661a      	str	r2, [r3, #96]	@ 0x60
	data->Task2Launch[6].input_param1=(void*)NULL;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	665a      	str	r2, [r3, #100]	@ 0x64
	data->Task2Launch[6].input_param2=(void*)NULL;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	669a      	str	r2, [r3, #104]	@ 0x68
	data->Task2Launch[6].input_param3=(void*)NULL;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	66da      	str	r2, [r3, #108]	@ 0x6c

	pfunction=&CC_APP_Nop;										//Task7 initialization
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <CC_SCHDLR_InitFastScheduler+0x168>)
 800115a:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[7].function=(void*)pfunction;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	671a      	str	r2, [r3, #112]	@ 0x70
	data->Task2Launch[7].input_param1=(void*)NULL;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	675a      	str	r2, [r3, #116]	@ 0x74
	data->Task2Launch[7].input_param2=(void*)NULL;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	679a      	str	r2, [r3, #120]	@ 0x78
	data->Task2Launch[7].input_param3=(void*)NULL;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	67da      	str	r2, [r3, #124]	@ 0x7c

	pfunction=&CC_APP_Nop;										//Task8 initialization
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <CC_SCHDLR_InitFastScheduler+0x168>)
 8001176:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[8].function=(void*)pfunction;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2180      	movs	r1, #128	@ 0x80
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	505a      	str	r2, [r3, r1]
	data->Task2Launch[8].input_param1=(void*)NULL;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2284      	movs	r2, #132	@ 0x84
 8001184:	2100      	movs	r1, #0
 8001186:	5099      	str	r1, [r3, r2]
	data->Task2Launch[8].input_param2=(void*)NULL;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2288      	movs	r2, #136	@ 0x88
 800118c:	2100      	movs	r1, #0
 800118e:	5099      	str	r1, [r3, r2]
	data->Task2Launch[8].input_param3=(void*)NULL;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	228c      	movs	r2, #140	@ 0x8c
 8001194:	2100      	movs	r1, #0
 8001196:	5099      	str	r1, [r3, r2]


	pfunction=&CC_SCHDLR_Scheduler;								//Task9 initialization. Nested scheduler
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <CC_SCHDLR_InitFastScheduler+0x16c>)
 800119a:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[9].function=(void*)pfunction;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2190      	movs	r1, #144	@ 0x90
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	505a      	str	r2, [r3, r1]
	pNestedScheduler=&CC_SCHDLR_SlowScheduler;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <CC_SCHDLR_InitFastScheduler+0x170>)
 80011a6:	60bb      	str	r3, [r7, #8]
	data->Task2Launch[9].input_param1=(void*)pNestedScheduler;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2194      	movs	r1, #148	@ 0x94
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	505a      	str	r2, [r3, r1]
	data->Task2Launch[9].input_param2=(void*)NULL;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2298      	movs	r2, #152	@ 0x98
 80011b4:	2100      	movs	r1, #0
 80011b6:	5099      	str	r1, [r3, r2]
	data->Task2Launch[9].input_param3=(void*)NULL;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	229c      	movs	r2, #156	@ 0x9c
 80011bc:	2100      	movs	r1, #0
 80011be:	5099      	str	r1, [r3, r2]

	//HAL_IWDG_Refresh(&hiwdg);						//Watchdog refresh
}
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b004      	add	sp, #16
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	08000b6d 	.word	0x08000b6d
 80011cc:	08000ef9 	.word	0x08000ef9
 80011d0:	200001f8 	.word	0x200001f8

080011d4 <CC_SCHDLR_InitSlowScheduler>:

void CC_SCHDLR_InitSlowScheduler(CC_SCHDLR_Scheduler_t* const data)
//Loading the scheduler's structure with functions and/or procedures to launch,
//and also their parameters.
//Void pointers to be able to launch different kinds of functions.
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	FDCAN_HandleTypeDef* 	pFDCAN_HandleTypeDef;	//Pointer FDCAN_HandleTypeDef
	FDCAN_TxHeaderTypeDef* 	pFDCAN_TxHeaderTypeDef;	//Pointer FDCAN_TxHeaderTypeDef
	CC_LEDPWM_SoftPwm_t* 	pCC_LEDPWM_SoftPwm;		//Pointer to strip leds control data
	const uint8_t* 			puint8_2;				//Constant pointer to a constant uint8_t data

	data->TaskOngoing=0;							//AIXO HO VULL A FORA. PEL NESTED ES RARO
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	22b0      	movs	r2, #176	@ 0xb0
 80011e0:	2100      	movs	r1, #0
 80011e2:	5499      	strb	r1, [r3, r2]
	data->IntCount=0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	33a8      	adds	r3, #168	@ 0xa8
 80011e8:	0019      	movs	r1, r3
 80011ea:	2200      	movs	r2, #0
 80011ec:	2300      	movs	r3, #0
 80011ee:	600a      	str	r2, [r1, #0]
 80011f0:	604b      	str	r3, [r1, #4]
	data->MissIntCnt=0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	33b8      	adds	r3, #184	@ 0xb8
 80011f6:	0019      	movs	r1, r3
 80011f8:	2200      	movs	r2, #0
 80011fa:	2300      	movs	r3, #0
 80011fc:	600a      	str	r2, [r1, #0]
 80011fe:	604b      	str	r3, [r1, #4]
	data->BaseTimems=CC_SCHDLR_BASE_TIME*CC_SCHDLR_MAX_THREADS;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	22a0      	movs	r2, #160	@ 0xa0
 8001204:	210a      	movs	r1, #10
 8001206:	5499      	strb	r1, [r3, r2]

	pfunction=&CC_APP_BoardLedBlinking;							//Task9.0 initialization. Led blinking
 8001208:	4b54      	ldr	r3, [pc, #336]	@ (800135c <CC_SCHDLR_InitSlowScheduler+0x188>)
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[0].function=(void*)pfunction;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001210:	601a      	str	r2, [r3, #0]
	puint8=&CC_APP_BlinkCnts;
 8001212:	4b53      	ldr	r3, [pc, #332]	@ (8001360 <CC_SCHDLR_InitSlowScheduler+0x18c>)
 8001214:	623b      	str	r3, [r7, #32]
	data->Task2Launch[0].input_param1=(void*)puint8;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a3a      	ldr	r2, [r7, #32]
 800121a:	605a      	str	r2, [r3, #4]
	data->Task2Launch[0].input_param2=(void*)NULL;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
	data->Task2Launch[0].input_param3=(void*)NULL;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]

	pfunction=&CC_ML_GetDipSwitch4pos;							//Task9.1 initialization. DIP-Switch update
 8001228:	4b4e      	ldr	r3, [pc, #312]	@ (8001364 <CC_SCHDLR_InitSlowScheduler+0x190>)
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[1].function=(void*) pfunction;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001230:	611a      	str	r2, [r3, #16]
	pCC_DIPSW_DipSw=&CC_DIPSW_DipSwitch;
 8001232:	4b4d      	ldr	r3, [pc, #308]	@ (8001368 <CC_SCHDLR_InitSlowScheduler+0x194>)
 8001234:	61fb      	str	r3, [r7, #28]
	data->Task2Launch[1].input_param1=(void*)pCC_DIPSW_DipSw;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	615a      	str	r2, [r3, #20]
	data->Task2Launch[1].input_param2=(void*)NULL;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
	data->Task2Launch[1].input_param3=(void*)NULL;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]

	pfunction=&CC_ML_UpdateIdSysFromDipSwitch;					//Task9.2 initialization. Board Id update from DIP-Switch
 8001248:	4b48      	ldr	r3, [pc, #288]	@ (800136c <CC_SCHDLR_InitSlowScheduler+0x198>)
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[2].function=(void*)pfunction;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001250:	621a      	str	r2, [r3, #32]
	pCC_DIPSW_DipSw=&CC_DIPSW_DipSwitch;
 8001252:	4b45      	ldr	r3, [pc, #276]	@ (8001368 <CC_SCHDLR_InitSlowScheduler+0x194>)
 8001254:	61fb      	str	r3, [r7, #28]
	pCC_SYS_Config=&CC_APP_BoardData;
 8001256:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <CC_SCHDLR_InitSlowScheduler+0x19c>)
 8001258:	61bb      	str	r3, [r7, #24]
	data->Task2Launch[2].input_param1=(void*)pCC_SYS_Config;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	625a      	str	r2, [r3, #36]	@ 0x24
	data->Task2Launch[2].input_param2=(void*)pCC_DIPSW_DipSw;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28
	data->Task2Launch[2].input_param3=(void*)NULL;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	62da      	str	r2, [r3, #44]	@ 0x2c

	pfunction=&CC_SM_UsartSM;									//Task9.3 initialization. USART state machine
 800126c:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <CC_SCHDLR_InitSlowScheduler+0x1a0>)
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[3].function=(void*)pfunction;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001274:	631a      	str	r2, [r3, #48]	@ 0x30
	data->Task2Launch[3].input_param1=(void*)NULL;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	635a      	str	r2, [r3, #52]	@ 0x34
	data->Task2Launch[3].input_param2=(void*)NULL;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	639a      	str	r2, [r3, #56]	@ 0x38
	data->Task2Launch[3].input_param3=(void*)NULL;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	63da      	str	r2, [r3, #60]	@ 0x3c

	pfunction=&CC_ML_SendMessageCAN;							//Task9.4 initialization. Send CAN
 8001288:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <CC_SCHDLR_InitSlowScheduler+0x1a4>)
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[4].function=(void*)pfunction;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001290:	641a      	str	r2, [r3, #64]	@ 0x40
	pFDCAN_HandleTypeDef=&hfdcan2;
 8001292:	4b3a      	ldr	r3, [pc, #232]	@ (800137c <CC_SCHDLR_InitSlowScheduler+0x1a8>)
 8001294:	617b      	str	r3, [r7, #20]
	pFDCAN_TxHeaderTypeDef=&CC_CAN_TxHeader;
 8001296:	4b3a      	ldr	r3, [pc, #232]	@ (8001380 <CC_SCHDLR_InitSlowScheduler+0x1ac>)
 8001298:	613b      	str	r3, [r7, #16]
	puint8=CC_CAN_TxData;
 800129a:	4b3a      	ldr	r3, [pc, #232]	@ (8001384 <CC_SCHDLR_InitSlowScheduler+0x1b0>)
 800129c:	623b      	str	r3, [r7, #32]
	data->Task2Launch[4].input_param1=(void*)pFDCAN_HandleTypeDef;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	645a      	str	r2, [r3, #68]	@ 0x44
	data->Task2Launch[4].input_param2=(void*)pFDCAN_TxHeaderTypeDef;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	649a      	str	r2, [r3, #72]	@ 0x48
	data->Task2Launch[4].input_param3=(void*)puint8;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a3a      	ldr	r2, [r7, #32]
 80012ae:	64da      	str	r2, [r3, #76]	@ 0x4c

	pfunction=&CC_LEDPWM_CntrCalculus;										//Task9.5 initialization
 80012b0:	4b35      	ldr	r3, [pc, #212]	@ (8001388 <CC_SCHDLR_InitSlowScheduler+0x1b4>)
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[5].function=(void*)pfunction;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b8:	651a      	str	r2, [r3, #80]	@ 0x50
	pCC_LEDPWM_SoftPwm=&CC_LEDPWM_Strip;
 80012ba:	4b34      	ldr	r3, [pc, #208]	@ (800138c <CC_SCHDLR_InitSlowScheduler+0x1b8>)
 80012bc:	60fb      	str	r3, [r7, #12]
	data->Task2Launch[5].input_param1=(void*)pCC_LEDPWM_SoftPwm;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	655a      	str	r2, [r3, #84]	@ 0x54
	puint8_2=&CC_LEDPWM_TotalStrips;
 80012c4:	4b32      	ldr	r3, [pc, #200]	@ (8001390 <CC_SCHDLR_InitSlowScheduler+0x1bc>)
 80012c6:	60bb      	str	r3, [r7, #8]
	data->Task2Launch[5].input_param2=(void*)puint8_2;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	659a      	str	r2, [r3, #88]	@ 0x58
	data->Task2Launch[5].input_param3=(void*)NULL;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	65da      	str	r2, [r3, #92]	@ 0x5c

	pfunction=&CC_APP_Nop;										//Task9.6 initialization
 80012d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <CC_SCHDLR_InitSlowScheduler+0x1c0>)
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[6].function=(void*)pfunction;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012dc:	661a      	str	r2, [r3, #96]	@ 0x60
	data->Task2Launch[6].input_param1=(void*)NULL;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	665a      	str	r2, [r3, #100]	@ 0x64
	data->Task2Launch[6].input_param2=(void*)NULL;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	669a      	str	r2, [r3, #104]	@ 0x68
	data->Task2Launch[6].input_param3=(void*)NULL;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	66da      	str	r2, [r3, #108]	@ 0x6c

	pfunction=&CC_APP_Nop;										//Task9.7 initialization
 80012f0:	4b28      	ldr	r3, [pc, #160]	@ (8001394 <CC_SCHDLR_InitSlowScheduler+0x1c0>)
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[7].function=(void*)pfunction;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f8:	671a      	str	r2, [r3, #112]	@ 0x70
	data->Task2Launch[7].input_param1=(void*)NULL;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	675a      	str	r2, [r3, #116]	@ 0x74
	data->Task2Launch[7].input_param2=(void*)NULL;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	679a      	str	r2, [r3, #120]	@ 0x78
	data->Task2Launch[7].input_param3=(void*)NULL;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	67da      	str	r2, [r3, #124]	@ 0x7c

	pfunction=&CC_APP_Nop;										//Task9.8 initialization
 800130c:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <CC_SCHDLR_InitSlowScheduler+0x1c0>)
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[8].function=(void*)pfunction;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2180      	movs	r1, #128	@ 0x80
 8001314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001316:	505a      	str	r2, [r3, r1]
	data->Task2Launch[8].input_param1=(void*)NULL;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2284      	movs	r2, #132	@ 0x84
 800131c:	2100      	movs	r1, #0
 800131e:	5099      	str	r1, [r3, r2]
	data->Task2Launch[8].input_param2=(void*)NULL;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2288      	movs	r2, #136	@ 0x88
 8001324:	2100      	movs	r1, #0
 8001326:	5099      	str	r1, [r3, r2]
	data->Task2Launch[8].input_param3=(void*)NULL;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	228c      	movs	r2, #140	@ 0x8c
 800132c:	2100      	movs	r1, #0
 800132e:	5099      	str	r1, [r3, r2]

	pfunction=&CC_APP_Nop;										//Task9.9 initialization
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <CC_SCHDLR_InitSlowScheduler+0x1c0>)
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
	data->Task2Launch[9].function=(void*)pfunction;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2190      	movs	r1, #144	@ 0x90
 8001338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800133a:	505a      	str	r2, [r3, r1]
	data->Task2Launch[9].input_param1=(void*)NULL;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2294      	movs	r2, #148	@ 0x94
 8001340:	2100      	movs	r1, #0
 8001342:	5099      	str	r1, [r3, r2]
	data->Task2Launch[9].input_param2=(void*)NULL;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2298      	movs	r2, #152	@ 0x98
 8001348:	2100      	movs	r1, #0
 800134a:	5099      	str	r1, [r3, r2]
	data->Task2Launch[9].input_param3=(void*)NULL;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	229c      	movs	r2, #156	@ 0x9c
 8001350:	2100      	movs	r1, #0
 8001352:	5099      	str	r1, [r3, r2]
}
 8001354:	46c0      	nop			@ (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b00a      	add	sp, #40	@ 0x28
 800135a:	bd80      	pop	{r7, pc}
 800135c:	08000b85 	.word	0x08000b85
 8001360:	20000000 	.word	0x20000000
 8001364:	08001f31 	.word	0x08001f31
 8001368:	20000394 	.word	0x20000394
 800136c:	08001f51 	.word	0x08001f51
 8001370:	2000002c 	.word	0x2000002c
 8001374:	080013e5 	.word	0x080013e5
 8001378:	08001f05 	.word	0x08001f05
 800137c:	200003b0 	.word	0x200003b0
 8001380:	2000036c 	.word	0x2000036c
 8001384:	2000033c 	.word	0x2000033c
 8001388:	08000ce1 	.word	0x08000ce1
 800138c:	2000008c 	.word	0x2000008c
 8001390:	08007d88 	.word	0x08007d88
 8001394:	08000b6d 	.word	0x08000b6d

08001398 <CC_SM_SetColor>:
//Global Variables Declaration

//Functions
void CC_SM_SetColor(CC_LED_Colors_t RequestedColor)
//Connector between the State Machine and the LED's controller
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	0002      	movs	r2, r0
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80013a4:	230f      	movs	r3, #15
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
	while(i<CC_LED_MAX_STRIPS)
 80013ac:	e00e      	b.n	80013cc <CC_SM_SetColor+0x34>
	{
		CC_LED_hStrip[i].color = RequestedColor;
 80013ae:	210f      	movs	r1, #15
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <CC_SM_SetColor+0x48>)
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	18d3      	adds	r3, r2, r3
 80013ba:	3301      	adds	r3, #1
 80013bc:	1dfa      	adds	r2, r7, #7
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	701a      	strb	r2, [r3, #0]
		i++;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	3201      	adds	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
	while(i<CC_LED_MAX_STRIPS)
 80013cc:	230f      	movs	r3, #15
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b09      	cmp	r3, #9
 80013d4:	d9eb      	bls.n	80013ae <CC_SM_SetColor+0x16>
	}
}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b004      	add	sp, #16
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000398 	.word	0x20000398

080013e4 <CC_SM_UsartSM>:

void CC_SM_UsartSM(void* param1, void* param2, void* param3)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b0ab      	sub	sp, #172	@ 0xac
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	static CC_SM_SerialStatesTypedef UsartSM_state=UART_SM_WELCOME_MESSAGE;
	char sendString[TX_BUFF_LENGTH];

	switch (UsartSM_state)
 80013f0:	4b70      	ldr	r3, [pc, #448]	@ (80015b4 <CC_SM_UsartSM+0x1d0>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d900      	bls.n	80013fa <CC_SM_UsartSM+0x16>
 80013f8:	e0d8      	b.n	80015ac <CC_SM_UsartSM+0x1c8>
 80013fa:	009a      	lsls	r2, r3, #2
 80013fc:	4b6e      	ldr	r3, [pc, #440]	@ (80015b8 <CC_SM_UsartSM+0x1d4>)
 80013fe:	18d3      	adds	r3, r2, r3
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	469f      	mov	pc, r3
	{
	case UART_SM_WELCOME_MESSAGE:
		CC_ML_SendUARTString((const char*)MESSAGE1, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001404:	4a6d      	ldr	r2, [pc, #436]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 8001406:	4b6e      	ldr	r3, [pc, #440]	@ (80015c0 <CC_SM_UsartSM+0x1dc>)
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f000 fdcd 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE2, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001410:	4a6a      	ldr	r2, [pc, #424]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 8001412:	4b6c      	ldr	r3, [pc, #432]	@ (80015c4 <CC_SM_UsartSM+0x1e0>)
 8001414:	0011      	movs	r1, r2
 8001416:	0018      	movs	r0, r3
 8001418:	f000 fdc7 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE3, &CC_ML_SERIAL_DEBUG_HANDLER);
 800141c:	4a67      	ldr	r2, [pc, #412]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 800141e:	4b6a      	ldr	r3, [pc, #424]	@ (80015c8 <CC_SM_UsartSM+0x1e4>)
 8001420:	0011      	movs	r1, r2
 8001422:	0018      	movs	r0, r3
 8001424:	f000 fdc1 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)CC_APP_BoardData.HwCode, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001428:	4a64      	ldr	r2, [pc, #400]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 800142a:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <CC_SM_UsartSM+0x1e8>)
 800142c:	0011      	movs	r1, r2
 800142e:	0018      	movs	r0, r3
 8001430:	f000 fdbb 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE_RETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001434:	4a61      	ldr	r2, [pc, #388]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 8001436:	4b66      	ldr	r3, [pc, #408]	@ (80015d0 <CC_SM_UsartSM+0x1ec>)
 8001438:	0011      	movs	r1, r2
 800143a:	0018      	movs	r0, r3
 800143c:	f000 fdb5 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE4, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001440:	4a5e      	ldr	r2, [pc, #376]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 8001442:	4b64      	ldr	r3, [pc, #400]	@ (80015d4 <CC_SM_UsartSM+0x1f0>)
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f000 fdaf 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)CC_APP_BoardData.uC, &CC_ML_SERIAL_DEBUG_HANDLER);
 800144c:	4a5b      	ldr	r2, [pc, #364]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 800144e:	4b62      	ldr	r3, [pc, #392]	@ (80015d8 <CC_SM_UsartSM+0x1f4>)
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f000 fda9 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE_RETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001458:	4a58      	ldr	r2, [pc, #352]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 800145a:	4b5d      	ldr	r3, [pc, #372]	@ (80015d0 <CC_SM_UsartSM+0x1ec>)
 800145c:	0011      	movs	r1, r2
 800145e:	0018      	movs	r0, r3
 8001460:	f000 fda3 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE5, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001464:	4a55      	ldr	r2, [pc, #340]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 8001466:	4b5d      	ldr	r3, [pc, #372]	@ (80015dc <CC_SM_UsartSM+0x1f8>)
 8001468:	0011      	movs	r1, r2
 800146a:	0018      	movs	r0, r3
 800146c:	f000 fd9d 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)CC_APP_BoardData.SwVer, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001470:	4a52      	ldr	r2, [pc, #328]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 8001472:	4b5b      	ldr	r3, [pc, #364]	@ (80015e0 <CC_SM_UsartSM+0x1fc>)
 8001474:	0011      	movs	r1, r2
 8001476:	0018      	movs	r0, r3
 8001478:	f000 fd97 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE_RETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 800147c:	4a4f      	ldr	r2, [pc, #316]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 800147e:	4b54      	ldr	r3, [pc, #336]	@ (80015d0 <CC_SM_UsartSM+0x1ec>)
 8001480:	0011      	movs	r1, r2
 8001482:	0018      	movs	r0, r3
 8001484:	f000 fd91 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE6, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001488:	4a4c      	ldr	r2, [pc, #304]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 800148a:	4b56      	ldr	r3, [pc, #344]	@ (80015e4 <CC_SM_UsartSM+0x200>)
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fd8b 	bl	8001faa <CC_ML_SendUARTString>
		utoa(CC_APP_BoardData.id, sendString, 10);									//Converting the identifier to ascii in decimal base
 8001494:	4b4d      	ldr	r3, [pc, #308]	@ (80015cc <CC_SM_UsartSM+0x1e8>)
 8001496:	225b      	movs	r2, #91	@ 0x5b
 8001498:	5c9b      	ldrb	r3, [r3, r2]
 800149a:	0018      	movs	r0, r3
 800149c:	2410      	movs	r4, #16
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	220a      	movs	r2, #10
 80014a2:	0019      	movs	r1, r3
 80014a4:	f006 fad2 	bl	8007a4c <utoa>
		CC_ML_SendUARTString((const char*)sendString, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014a8:	4a44      	ldr	r2, [pc, #272]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	0011      	movs	r1, r2
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fd7b 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE_RETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014b4:	4a41      	ldr	r2, [pc, #260]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 80014b6:	4b46      	ldr	r3, [pc, #280]	@ (80015d0 <CC_SM_UsartSM+0x1ec>)
 80014b8:	0011      	movs	r1, r2
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 fd75 	bl	8001faa <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_GETTING_COLORS_MESSAGE;
 80014c0:	4b3c      	ldr	r3, [pc, #240]	@ (80015b4 <CC_SM_UsartSM+0x1d0>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
	break;
 80014c6:	e071      	b.n	80015ac <CC_SM_UsartSM+0x1c8>

	case UART_SM_GETTING_COLORS_MESSAGE:
		CC_ML_SendUARTString((const char*)MESSAGE7, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014c8:	4a3c      	ldr	r2, [pc, #240]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 80014ca:	4b47      	ldr	r3, [pc, #284]	@ (80015e8 <CC_SM_UsartSM+0x204>)
 80014cc:	0011      	movs	r1, r2
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 fd6b 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE8, &CC_ML_SERIAL_DEBUG_HANDLER);
 80014d4:	4a39      	ldr	r2, [pc, #228]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 80014d6:	4b45      	ldr	r3, [pc, #276]	@ (80015ec <CC_SM_UsartSM+0x208>)
 80014d8:	0011      	movs	r1, r2
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 fd65 	bl	8001faa <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_GET_COLOR_ALL;
 80014e0:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <CC_SM_UsartSM+0x1d0>)
 80014e2:	2202      	movs	r2, #2
 80014e4:	701a      	strb	r2, [r3, #0]
	break;
 80014e6:	e061      	b.n	80015ac <CC_SM_UsartSM+0x1c8>

	case UART_SM_GET_COLOR_ALL:
		char input_char=*(pCC_ML_SERIAL_DEBUG_RxData+0);
 80014e8:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <CC_SM_UsartSM+0x20c>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	21a7      	movs	r1, #167	@ 0xa7
 80014ee:	187b      	adds	r3, r7, r1
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	701a      	strb	r2, [r3, #0]
		switch (input_char)
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b79      	cmp	r3, #121	@ 0x79
 80014fa:	d828      	bhi.n	800154e <CC_SM_UsartSM+0x16a>
 80014fc:	009a      	lsls	r2, r3, #2
 80014fe:	4b3d      	ldr	r3, [pc, #244]	@ (80015f4 <CC_SM_UsartSM+0x210>)
 8001500:	18d3      	adds	r3, r2, r3
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	469f      	mov	pc, r3
		case '\0':					//No order gotten

		break;
		case 'E':
		case 'e':					//Exit order
			UsartSM_state=UART_SM_EXIT;
 8001506:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <CC_SM_UsartSM+0x1d0>)
 8001508:	2204      	movs	r2, #4
 800150a:	701a      	strb	r2, [r3, #0]
		break;
 800150c:	e024      	b.n	8001558 <CC_SM_UsartSM+0x174>
		case 'R':
		case 'r':					//Set all red
			CC_SM_SetColor(RED);
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff ff42 	bl	8001398 <CC_SM_SetColor>
		break;
 8001514:	e020      	b.n	8001558 <CC_SM_UsartSM+0x174>
		case 'G':
		case 'g':					//Set all green
			CC_SM_SetColor(GREEN);
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff ff3e 	bl	8001398 <CC_SM_SetColor>
		break;
 800151c:	e01c      	b.n	8001558 <CC_SM_UsartSM+0x174>
		case 'B':
		case 'b':					//Set all blue
			CC_SM_SetColor(BLUE);
 800151e:	2002      	movs	r0, #2
 8001520:	f7ff ff3a 	bl	8001398 <CC_SM_SetColor>
		break;
 8001524:	e018      	b.n	8001558 <CC_SM_UsartSM+0x174>
		case 'Y':
		case 'y':					//Set all yellow
			CC_SM_SetColor(YELLOW);
 8001526:	2003      	movs	r0, #3
 8001528:	f7ff ff36 	bl	8001398 <CC_SM_SetColor>
		break;
 800152c:	e014      	b.n	8001558 <CC_SM_UsartSM+0x174>
		case 'P':
		case 'p':					//Set all pink
			CC_SM_SetColor(PINK);
 800152e:	2004      	movs	r0, #4
 8001530:	f7ff ff32 	bl	8001398 <CC_SM_SetColor>
		break;
 8001534:	e010      	b.n	8001558 <CC_SM_UsartSM+0x174>
		case 'C':
		case 'c':					//Set all pink
			CC_SM_SetColor(CYAN);
 8001536:	2005      	movs	r0, #5
 8001538:	f7ff ff2e 	bl	8001398 <CC_SM_SetColor>
		break;
 800153c:	e00c      	b.n	8001558 <CC_SM_UsartSM+0x174>
		case 'W':
		case 'w':					//Set all white
			CC_SM_SetColor(WHITE);
 800153e:	2006      	movs	r0, #6
 8001540:	f7ff ff2a 	bl	8001398 <CC_SM_SetColor>
		break;
 8001544:	e008      	b.n	8001558 <CC_SM_UsartSM+0x174>
		case 'O':
		case 'o':					//Set all off
			CC_SM_SetColor(BLACK);
 8001546:	2007      	movs	r0, #7
 8001548:	f7ff ff26 	bl	8001398 <CC_SM_SetColor>
		break;
 800154c:	e004      	b.n	8001558 <CC_SM_UsartSM+0x174>
		default:					//Wrong order gotten
			UsartSM_state=UART_SM_WRONG_INPUT;
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <CC_SM_UsartSM+0x1d0>)
 8001550:	2203      	movs	r2, #3
 8001552:	701a      	strb	r2, [r3, #0]
		break;
 8001554:	e000      	b.n	8001558 <CC_SM_UsartSM+0x174>
		break;
 8001556:	46c0      	nop			@ (mov r8, r8)
		}
		CC_ML_ClearUARTRxData();
 8001558:	f000 fd78 	bl	800204c <CC_ML_ClearUARTRxData>
	break;
 800155c:	e026      	b.n	80015ac <CC_SM_UsartSM+0x1c8>

	case UART_SM_WRONG_INPUT:
		CC_ML_SendUARTString((const char*)MESSAGE_RETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 800155e:	4a17      	ldr	r2, [pc, #92]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <CC_SM_UsartSM+0x1ec>)
 8001562:	0011      	movs	r1, r2
 8001564:	0018      	movs	r0, r3
 8001566:	f000 fd20 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE9, &CC_ML_SERIAL_DEBUG_HANDLER);
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <CC_SM_UsartSM+0x214>)
 800156e:	0011      	movs	r1, r2
 8001570:	0018      	movs	r0, r3
 8001572:	f000 fd1a 	bl	8001faa <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_GET_COLOR_ALL;
 8001576:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <CC_SM_UsartSM+0x1d0>)
 8001578:	2202      	movs	r2, #2
 800157a:	701a      	strb	r2, [r3, #0]
	break;
 800157c:	e016      	b.n	80015ac <CC_SM_UsartSM+0x1c8>

	case UART_SM_EXIT:
		CC_ML_SendUARTString((const char*)MESSAGE_RETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 800157e:	4a0f      	ldr	r2, [pc, #60]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <CC_SM_UsartSM+0x1ec>)
 8001582:	0011      	movs	r1, r2
 8001584:	0018      	movs	r0, r3
 8001586:	f000 fd10 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE10, &CC_ML_SERIAL_DEBUG_HANDLER);
 800158a:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <CC_SM_UsartSM+0x218>)
 800158e:	0011      	movs	r1, r2
 8001590:	0018      	movs	r0, r3
 8001592:	f000 fd0a 	bl	8001faa <CC_ML_SendUARTString>
		CC_ML_SendUARTString((const char*)MESSAGE_TRIPLERETURN, &CC_ML_SERIAL_DEBUG_HANDLER);
 8001596:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <CC_SM_UsartSM+0x1d8>)
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <CC_SM_UsartSM+0x21c>)
 800159a:	0011      	movs	r1, r2
 800159c:	0018      	movs	r0, r3
 800159e:	f000 fd04 	bl	8001faa <CC_ML_SendUARTString>
		UsartSM_state=UART_SM_STOP;
 80015a2:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <CC_SM_UsartSM+0x1d0>)
 80015a4:	2205      	movs	r2, #5
 80015a6:	701a      	strb	r2, [r3, #0]
	break;
 80015a8:	e000      	b.n	80015ac <CC_SM_UsartSM+0x1c8>

	case UART_SM_STOP:

	break;
 80015aa:	46c0      	nop			@ (mov r8, r8)
	}
}
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b02b      	add	sp, #172	@ 0xac
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	20000330 	.word	0x20000330
 80015b8:	08007d8c 	.word	0x08007d8c
 80015bc:	200004f8 	.word	0x200004f8
 80015c0:	08007b64 	.word	0x08007b64
 80015c4:	08007b88 	.word	0x08007b88
 80015c8:	08007bc8 	.word	0x08007bc8
 80015cc:	2000002c 	.word	0x2000002c
 80015d0:	08007be4 	.word	0x08007be4
 80015d4:	08007be8 	.word	0x08007be8
 80015d8:	20000079 	.word	0x20000079
 80015dc:	08007bf4 	.word	0x08007bf4
 80015e0:	2000003d 	.word	0x2000003d
 80015e4:	08007c08 	.word	0x08007c08
 80015e8:	08007c1c 	.word	0x08007c1c
 80015ec:	08007c48 	.word	0x08007c48
 80015f0:	08007f8c 	.word	0x08007f8c
 80015f4:	08007da4 	.word	0x08007da4
 80015f8:	08007cb4 	.word	0x08007cb4
 80015fc:	08007cd8 	.word	0x08007cd8
 8001600:	08007d04 	.word	0x08007d04

08001604 <CC_BOARDLED_Led1Toggle>:
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, CC_BOARDLED_OFF);
	}

	inline void CC_BOARDLED_Led1Toggle(void)
	{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001608:	23a0      	movs	r3, #160	@ 0xa0
 800160a:	05db      	lsls	r3, r3, #23
 800160c:	2102      	movs	r1, #2
 800160e:	0018      	movs	r0, r3
 8001610:	f002 fc54 	bl	8003ebc <HAL_GPIO_TogglePin>
	}
 8001614:	46c0      	nop			@ (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <CC_CAN_SetAddress>:
FDCAN_TxHeaderTypeDef CC_CAN_TxHeader;
uint32_t CC_CAN_RxAdress;

//Functions
void CC_CAN_SetAddress(const uint32_t new_adress)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	CC_CAN_RxAdress=new_adress;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <CC_CAN_SetAddress+0x18>)
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	601a      	str	r2, [r3, #0]
}
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	20000390 	.word	0x20000390

08001638 <CC_CAN_SendMessage>:
void CC_CAN_SendMessage(
						FDCAN_HandleTypeDef* const pHeaderCan,
						const FDCAN_TxHeaderTypeDef* const pHeaderTx,
						const uint8_t* const pdata2send
						)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	HAL_FDCAN_AddMessageToTxFifoQ
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	0018      	movs	r0, r3
 800164c:	f001 fdf4 	bl	8003238 <HAL_FDCAN_AddMessageToTxFifoQ>
	(
		pHeaderCan,
		pHeaderTx,
		pdata2send
	);
}
 8001650:	46c0      	nop			@ (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b004      	add	sp, #16
 8001656:	bd80      	pop	{r7, pc}

08001658 <CC_CAN_Init>:

void CC_CAN_Init(FDCAN_TxHeaderTypeDef* const txheader )
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
//	sFilterConfig.FilterID1 = 0x000;						//First possible delta module. Extended id
//	sFilterConfig.FilterID2 = 0x7FF;						//Last possible delta module. Extended id
//	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK){Error_Handler();}		//Filter configuration

	//Tx header configuration
	txheader->Identifier = CC_CAN_TX_ADRESS;			//Transmit identifier
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	32ff      	adds	r2, #255	@ 0xff
 8001666:	601a      	str	r2, [r3, #0]
	txheader->IdType = FDCAN_STANDARD_ID;				//Standard format identifier
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
	txheader->TxFrameType = FDCAN_DATA_FRAME;			//Frame type
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
	txheader->DataLength = CC_CAN_TXDATALENGHT;			//Length of the data is 8 bytes
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2208      	movs	r2, #8
 8001678:	60da      	str	r2, [r3, #12]
	txheader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;	//Error indicator active
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
	txheader->BitRateSwitch = FDCAN_BRS_OFF;			//Without bit rate switching
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
	txheader->FDFormat = FDCAN_CLASSIC_CAN;				//Classic format
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
	txheader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;	//Without any Tx event
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
	txheader->MessageMarker = 0;						//Identifier (marker) in case of an Tx event
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
}
 8001698:	46c0      	nop			@ (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* const hfdcan, uint32_t RxFifo0ITs)
//CAN bus receiver, FIFO 0 callback (FIFO it is not used).
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	uint8_t temp_data[CC_CAN_RXDATALENGHT];

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2201      	movs	r2, #1
 80016ae:	4013      	ands	r3, r2
 80016b0:	d015      	beq.n	80016de <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CC_CAN_RxHeader, temp_data) != HAL_OK)
 80016b2:	2308      	movs	r3, #8
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	4a0c      	ldr	r2, [pc, #48]	@ (80016e8 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	2140      	movs	r1, #64	@ 0x40
 80016bc:	f001 fe02 	bl	80032c4 <HAL_FDCAN_GetRxMessage>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_FDCAN_RxFifo0Callback+0x28>
		{
			Error_Handler();
 80016c4:	f000 ffc0 	bl	8002648 <Error_Handler>
		}
		if (CC_CAN_RxHeader.Identifier == CC_CAN_RxAdress)
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d104      	bne.n	80016de <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			memcpy(&CC_CAN_RxData,&temp_data, sizeof(temp_data));
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80016d6:	2208      	movs	r2, #8
 80016d8:	18ba      	adds	r2, r7, r2
 80016da:	ca03      	ldmia	r2!, {r0, r1}
 80016dc:	c303      	stmia	r3!, {r0, r1}
//			CC_CAN_RXPROCESS;
		}
	}
}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	20000344 	.word	0x20000344
 80016ec:	20000390 	.word	0x20000390
 80016f0:	20000334 	.word	0x20000334

080016f4 <CC_DIPSW_GetDipSwitch4pos>:
		pdata->bits.bit2=HAL_GPIO_ReadPin(DIP_SW3_GPIO_Port, DIP_SW3_Pin);
	}
#endif
#ifdef DIP_SW4_Pin
	void CC_DIPSW_GetDipSwitch4pos(CC_DIPSW_DipSw_t* const pdata)
	{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
		pdata->bits.bit0=HAL_GPIO_ReadPin(DIP_SW1_GPIO_Port, DIP_SW1_Pin);
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	019b      	lsls	r3, r3, #6
 8001700:	4a2e      	ldr	r2, [pc, #184]	@ (80017bc <CC_DIPSW_GetDipSwitch4pos+0xc8>)
 8001702:	0019      	movs	r1, r3
 8001704:	0010      	movs	r0, r2
 8001706:	f002 fb9f 	bl	8003e48 <HAL_GPIO_ReadPin>
 800170a:	0003      	movs	r3, r0
 800170c:	1c1a      	adds	r2, r3, #0
 800170e:	2301      	movs	r3, #1
 8001710:	4013      	ands	r3, r2
 8001712:	b2da      	uxtb	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2101      	movs	r1, #1
 8001718:	400a      	ands	r2, r1
 800171a:	0010      	movs	r0, r2
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	438a      	bics	r2, r1
 8001722:	1c11      	adds	r1, r2, #0
 8001724:	1c02      	adds	r2, r0, #0
 8001726:	430a      	orrs	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
		pdata->bits.bit1=HAL_GPIO_ReadPin(DIP_SW2_GPIO_Port, DIP_SW2_Pin);
 800172a:	2380      	movs	r3, #128	@ 0x80
 800172c:	01db      	lsls	r3, r3, #7
 800172e:	4a23      	ldr	r2, [pc, #140]	@ (80017bc <CC_DIPSW_GetDipSwitch4pos+0xc8>)
 8001730:	0019      	movs	r1, r3
 8001732:	0010      	movs	r0, r2
 8001734:	f002 fb88 	bl	8003e48 <HAL_GPIO_ReadPin>
 8001738:	0003      	movs	r3, r0
 800173a:	1c1a      	adds	r2, r3, #0
 800173c:	2301      	movs	r3, #1
 800173e:	4013      	ands	r3, r2
 8001740:	b2da      	uxtb	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2101      	movs	r1, #1
 8001746:	400a      	ands	r2, r1
 8001748:	1890      	adds	r0, r2, r2
 800174a:	781a      	ldrb	r2, [r3, #0]
 800174c:	2102      	movs	r1, #2
 800174e:	438a      	bics	r2, r1
 8001750:	1c11      	adds	r1, r2, #0
 8001752:	1c02      	adds	r2, r0, #0
 8001754:	430a      	orrs	r2, r1
 8001756:	701a      	strb	r2, [r3, #0]
		pdata->bits.bit2=HAL_GPIO_ReadPin(DIP_SW3_GPIO_Port, DIP_SW3_Pin);
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <CC_DIPSW_GetDipSwitch4pos+0xc8>)
 800175e:	0019      	movs	r1, r3
 8001760:	0010      	movs	r0, r2
 8001762:	f002 fb71 	bl	8003e48 <HAL_GPIO_ReadPin>
 8001766:	0003      	movs	r3, r0
 8001768:	1c1a      	adds	r2, r3, #0
 800176a:	2301      	movs	r3, #1
 800176c:	4013      	ands	r3, r2
 800176e:	b2da      	uxtb	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2101      	movs	r1, #1
 8001774:	400a      	ands	r2, r1
 8001776:	0090      	lsls	r0, r2, #2
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	2104      	movs	r1, #4
 800177c:	438a      	bics	r2, r1
 800177e:	1c11      	adds	r1, r2, #0
 8001780:	1c02      	adds	r2, r0, #0
 8001782:	430a      	orrs	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
		pdata->bits.bit3=HAL_GPIO_ReadPin(DIP_SW4_GPIO_Port, DIP_SW4_Pin);
 8001786:	23a0      	movs	r3, #160	@ 0xa0
 8001788:	05db      	lsls	r3, r3, #23
 800178a:	2101      	movs	r1, #1
 800178c:	0018      	movs	r0, r3
 800178e:	f002 fb5b 	bl	8003e48 <HAL_GPIO_ReadPin>
 8001792:	0003      	movs	r3, r0
 8001794:	1c1a      	adds	r2, r3, #0
 8001796:	2301      	movs	r3, #1
 8001798:	4013      	ands	r3, r2
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2101      	movs	r1, #1
 80017a0:	400a      	ands	r2, r1
 80017a2:	00d0      	lsls	r0, r2, #3
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	2108      	movs	r1, #8
 80017a8:	438a      	bics	r2, r1
 80017aa:	1c11      	adds	r1, r2, #0
 80017ac:	1c02      	adds	r2, r0, #0
 80017ae:	430a      	orrs	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
	}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	50000800 	.word	0x50000800

080017c0 <CC_LED_InitStrips>:
//Global Variables Declaration
CC_LED_Strip_t CC_LED_hStrip[CC_LED_MAX_STRIPS];		//Vector to manage several strip leds

//Functions
void CC_LED_InitStrips(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
	uint8_t index=0;
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
	for (index=0; index<CC_LED_MAX_STRIPS; index++)
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e015      	b.n	8001800 <CC_LED_InitStrips+0x40>
	{
		CC_LED_hStrip[index].color=BLACK;
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <CC_LED_InitStrips+0x54>)
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	18d3      	adds	r3, r2, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	2207      	movs	r2, #7
 80017e2:	701a      	strb	r2, [r3, #0]
		CC_LED_hStrip[index].number=index+1;
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2d9      	uxtb	r1, r3
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <CC_LED_InitStrips+0x54>)
 80017f2:	0052      	lsls	r2, r2, #1
 80017f4:	54d1      	strb	r1, [r2, r3]
	for (index=0; index<CC_LED_MAX_STRIPS; index++)
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	781a      	ldrb	r2, [r3, #0]
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	3201      	adds	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b09      	cmp	r3, #9
 8001806:	d9e5      	bls.n	80017d4 <CC_LED_InitStrips+0x14>
	}
}
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b002      	add	sp, #8
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	20000398 	.word	0x20000398

08001818 <CC_LED_TurnOnRedOnStrip1>:
}

//Single led action
//Strip1
inline void CC_LED_TurnOnRedOnStrip1(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4803      	ldr	r0, [pc, #12]	@ (8001830 <CC_LED_TurnOnRedOnStrip1+0x18>)
 8001822:	2201      	movs	r2, #1
 8001824:	0019      	movs	r1, r3
 8001826:	f002 fb2c 	bl	8003e82 <HAL_GPIO_WritePin>
}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	50000400 	.word	0x50000400

08001834 <CC_LED_TurnOnGreenOnStrip1>:
inline void CC_LED_TurnOnGreenOnStrip1(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4803      	ldr	r0, [pc, #12]	@ (800184c <CC_LED_TurnOnGreenOnStrip1+0x18>)
 800183e:	2201      	movs	r2, #1
 8001840:	0019      	movs	r1, r3
 8001842:	f002 fb1e 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	50000400 	.word	0x50000400

08001850 <CC_LED_TurnOnBlueOnStrip1>:
inline void CC_LED_TurnOnBlueOnStrip1(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_SET);
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <CC_LED_TurnOnBlueOnStrip1+0x18>)
 8001856:	2201      	movs	r2, #1
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	0018      	movs	r0, r3
 800185c:	f002 fb11 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001860:	46c0      	nop			@ (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	50000400 	.word	0x50000400

0800186c <CC_LED_TurnOffRedOnStrip1>:
inline void CC_LED_TurnOffRedOnStrip1(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <CC_LED_TurnOffRedOnStrip1+0x18>)
 8001876:	2200      	movs	r2, #0
 8001878:	0019      	movs	r1, r3
 800187a:	f002 fb02 	bl	8003e82 <HAL_GPIO_WritePin>
}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	50000400 	.word	0x50000400

08001888 <CC_LED_TurnOffGreenOnStrip1>:
inline void CC_LED_TurnOffGreenOnStrip1(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <CC_LED_TurnOffGreenOnStrip1+0x18>)
 8001892:	2200      	movs	r2, #0
 8001894:	0019      	movs	r1, r3
 8001896:	f002 faf4 	bl	8003e82 <HAL_GPIO_WritePin>
}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	50000400 	.word	0x50000400

080018a4 <CC_LED_TurnOffBlueOnStrip1>:
inline void CC_LED_TurnOffBlueOnStrip1(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_RESET);
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <CC_LED_TurnOffBlueOnStrip1+0x18>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	2180      	movs	r1, #128	@ 0x80
 80018ae:	0018      	movs	r0, r3
 80018b0:	f002 fae7 	bl	8003e82 <HAL_GPIO_WritePin>
}
 80018b4:	46c0      	nop			@ (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	50000400 	.word	0x50000400

080018c0 <CC_LED_TurnOnRedOnStrip2>:
//Strip2
inline void CC_LED_TurnOnRedOnStrip2(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <CC_LED_TurnOnRedOnStrip2+0x18>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	2140      	movs	r1, #64	@ 0x40
 80018ca:	0018      	movs	r0, r3
 80018cc:	f002 fad9 	bl	8003e82 <HAL_GPIO_WritePin>
}
 80018d0:	46c0      	nop			@ (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	50000400 	.word	0x50000400

080018dc <CC_LED_TurnOnGreenOnStrip2>:
inline void CC_LED_TurnOnGreenOnStrip2(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <CC_LED_TurnOnGreenOnStrip2+0x18>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	2120      	movs	r1, #32
 80018e6:	0018      	movs	r0, r3
 80018e8:	f002 facb 	bl	8003e82 <HAL_GPIO_WritePin>
}
 80018ec:	46c0      	nop			@ (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	50000400 	.word	0x50000400

080018f8 <CC_LED_TurnOnBlueOnStrip2>:
inline void CC_LED_TurnOnBlueOnStrip2(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, GPIO_PIN_SET);
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <CC_LED_TurnOnBlueOnStrip2+0x18>)
 80018fe:	2201      	movs	r2, #1
 8001900:	2110      	movs	r1, #16
 8001902:	0018      	movs	r0, r3
 8001904:	f002 fabd 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001908:	46c0      	nop			@ (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	50000400 	.word	0x50000400

08001914 <CC_LED_TurnOffRedOnStrip2>:
inline void CC_LED_TurnOffRedOnStrip2(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <CC_LED_TurnOffRedOnStrip2+0x18>)
 800191a:	2200      	movs	r2, #0
 800191c:	2140      	movs	r1, #64	@ 0x40
 800191e:	0018      	movs	r0, r3
 8001920:	f002 faaf 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001924:	46c0      	nop			@ (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	50000400 	.word	0x50000400

08001930 <CC_LED_TurnOffGreenOnStrip2>:
inline void CC_LED_TurnOffGreenOnStrip2(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8001934:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <CC_LED_TurnOffGreenOnStrip2+0x18>)
 8001936:	2200      	movs	r2, #0
 8001938:	2120      	movs	r1, #32
 800193a:	0018      	movs	r0, r3
 800193c:	f002 faa1 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001940:	46c0      	nop			@ (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	50000400 	.word	0x50000400

0800194c <CC_LED_TurnOffBlueOnStrip2>:
inline void CC_LED_TurnOffBlueOnStrip2(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, GPIO_PIN_RESET);
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <CC_LED_TurnOffBlueOnStrip2+0x18>)
 8001952:	2200      	movs	r2, #0
 8001954:	2110      	movs	r1, #16
 8001956:	0018      	movs	r0, r3
 8001958:	f002 fa93 	bl	8003e82 <HAL_GPIO_WritePin>
}
 800195c:	46c0      	nop			@ (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	50000400 	.word	0x50000400

08001968 <CC_LED_TurnOnRedOnStrip3>:
//Strip3
inline void CC_LED_TurnOnRedOnStrip3(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800196c:	4b04      	ldr	r3, [pc, #16]	@ (8001980 <CC_LED_TurnOnRedOnStrip3+0x18>)
 800196e:	2201      	movs	r2, #1
 8001970:	2108      	movs	r1, #8
 8001972:	0018      	movs	r0, r3
 8001974:	f002 fa85 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001978:	46c0      	nop			@ (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	50000400 	.word	0x50000400

08001984 <CC_LED_TurnOnGreenOnStrip3>:
inline void CC_LED_TurnOnGreenOnStrip3(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_SET);
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <CC_LED_TurnOnGreenOnStrip3+0x18>)
 800198a:	2201      	movs	r2, #1
 800198c:	2108      	movs	r1, #8
 800198e:	0018      	movs	r0, r3
 8001990:	f002 fa77 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001994:	46c0      	nop			@ (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	50000c00 	.word	0x50000c00

080019a0 <CC_LED_TurnOnBlueOnStrip3>:
inline void CC_LED_TurnOnBlueOnStrip3(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, GPIO_PIN_SET);
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <CC_LED_TurnOnBlueOnStrip3+0x18>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	2104      	movs	r1, #4
 80019aa:	0018      	movs	r0, r3
 80019ac:	f002 fa69 	bl	8003e82 <HAL_GPIO_WritePin>
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	50000c00 	.word	0x50000c00

080019bc <CC_LED_TurnOffRedOnStrip3>:
inline void CC_LED_TurnOffRedOnStrip3(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 80019c0:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <CC_LED_TurnOffRedOnStrip3+0x18>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	2108      	movs	r1, #8
 80019c6:	0018      	movs	r0, r3
 80019c8:	f002 fa5b 	bl	8003e82 <HAL_GPIO_WritePin>
}
 80019cc:	46c0      	nop			@ (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	50000400 	.word	0x50000400

080019d8 <CC_LED_TurnOffGreenOnStrip3>:
inline void CC_LED_TurnOffGreenOnStrip3(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_RESET);
 80019dc:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <CC_LED_TurnOffGreenOnStrip3+0x18>)
 80019de:	2200      	movs	r2, #0
 80019e0:	2108      	movs	r1, #8
 80019e2:	0018      	movs	r0, r3
 80019e4:	f002 fa4d 	bl	8003e82 <HAL_GPIO_WritePin>
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	50000c00 	.word	0x50000c00

080019f4 <CC_LED_TurnOffBlueOnStrip3>:
inline void CC_LED_TurnOffBlueOnStrip3(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, GPIO_PIN_RESET);
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <CC_LED_TurnOffBlueOnStrip3+0x18>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	2104      	movs	r1, #4
 80019fe:	0018      	movs	r0, r3
 8001a00:	f002 fa3f 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001a04:	46c0      	nop			@ (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	50000c00 	.word	0x50000c00

08001a10 <CC_LED_TurnOnRedOnStrip4>:
//Strip4
inline void CC_LED_TurnOnRedOnStrip4(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <CC_LED_TurnOnRedOnStrip4+0x18>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	2102      	movs	r1, #2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f002 fa31 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001a20:	46c0      	nop			@ (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	50000c00 	.word	0x50000c00

08001a2c <CC_LED_TurnOnGreenOnStrip4>:
inline void CC_LED_TurnOnGreenOnStrip4(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_SET);
 8001a30:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <CC_LED_TurnOnGreenOnStrip4+0x18>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	2101      	movs	r1, #1
 8001a36:	0018      	movs	r0, r3
 8001a38:	f002 fa23 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001a3c:	46c0      	nop			@ (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	50000c00 	.word	0x50000c00

08001a48 <CC_LED_TurnOnBlueOnStrip4>:
inline void CC_LED_TurnOnBlueOnStrip4(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_SET);
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	0219      	lsls	r1, r3, #8
 8001a50:	23a0      	movs	r3, #160	@ 0xa0
 8001a52:	05db      	lsls	r3, r3, #23
 8001a54:	2201      	movs	r2, #1
 8001a56:	0018      	movs	r0, r3
 8001a58:	f002 fa13 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001a5c:	46c0      	nop			@ (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <CC_LED_TurnOffRedOnStrip4>:
inline void CC_LED_TurnOffRedOnStrip4(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8001a68:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <CC_LED_TurnOffRedOnStrip4+0x18>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f002 fa07 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	50000c00 	.word	0x50000c00

08001a80 <CC_LED_TurnOffGreenOnStrip4>:
inline void CC_LED_TurnOffGreenOnStrip4(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_RESET);
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <CC_LED_TurnOffGreenOnStrip4+0x18>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	2101      	movs	r1, #1
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f002 f9f9 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001a90:	46c0      	nop			@ (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	50000c00 	.word	0x50000c00

08001a9c <CC_LED_TurnOffBlueOnStrip4>:
inline void CC_LED_TurnOffBlueOnStrip4(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_RESET);
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	0219      	lsls	r1, r3, #8
 8001aa4:	23a0      	movs	r3, #160	@ 0xa0
 8001aa6:	05db      	lsls	r3, r3, #23
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f002 f9e9 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001ab0:	46c0      	nop			@ (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <CC_LED_TurnOnRedOnStrip5>:
//Strip5
inline void CC_LED_TurnOnRedOnStrip5(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R5_GPIO_Port, R5_Pin, GPIO_PIN_SET);
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	0159      	lsls	r1, r3, #5
 8001abe:	23a0      	movs	r3, #160	@ 0xa0
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f002 f9dc 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <CC_LED_TurnOnGreenOnStrip5>:
inline void CC_LED_TurnOnGreenOnStrip5(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_SET);
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	0119      	lsls	r1, r3, #4
 8001ad8:	23a0      	movs	r3, #160	@ 0xa0
 8001ada:	05db      	lsls	r3, r3, #23
 8001adc:	2201      	movs	r2, #1
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f002 f9cf 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001ae4:	46c0      	nop			@ (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <CC_LED_TurnOnBlueOnStrip5>:
inline void CC_LED_TurnOnBlueOnStrip5(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_SET);
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <CC_LED_TurnOnBlueOnStrip5+0x18>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	0018      	movs	r0, r3
 8001af8:	f002 f9c3 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001afc:	46c0      	nop			@ (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	50000800 	.word	0x50000800

08001b08 <CC_LED_TurnOffRedOnStrip5>:
inline void CC_LED_TurnOffRedOnStrip5(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R5_GPIO_Port, R5_Pin, GPIO_PIN_RESET);
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	0159      	lsls	r1, r3, #5
 8001b10:	23a0      	movs	r3, #160	@ 0xa0
 8001b12:	05db      	lsls	r3, r3, #23
 8001b14:	2200      	movs	r2, #0
 8001b16:	0018      	movs	r0, r3
 8001b18:	f002 f9b3 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001b1c:	46c0      	nop			@ (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <CC_LED_TurnOffGreenOnStrip5>:
inline void CC_LED_TurnOffGreenOnStrip5(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_RESET);
 8001b26:	2380      	movs	r3, #128	@ 0x80
 8001b28:	0119      	lsls	r1, r3, #4
 8001b2a:	23a0      	movs	r3, #160	@ 0xa0
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	2200      	movs	r2, #0
 8001b30:	0018      	movs	r0, r3
 8001b32:	f002 f9a6 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <CC_LED_TurnOffBlueOnStrip5>:
inline void CC_LED_TurnOffBlueOnStrip5(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_RESET);
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <CC_LED_TurnOffBlueOnStrip5+0x18>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	2180      	movs	r1, #128	@ 0x80
 8001b46:	0018      	movs	r0, r3
 8001b48:	f002 f99b 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001b4c:	46c0      	nop			@ (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	50000800 	.word	0x50000800

08001b58 <CC_LED_TurnOnRedOnStrip6>:
//Strip6
inline void CC_LED_TurnOnRedOnStrip6(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R6_GPIO_Port, R6_Pin, GPIO_PIN_SET);
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <CC_LED_TurnOnRedOnStrip6+0x18>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	2140      	movs	r1, #64	@ 0x40
 8001b62:	0018      	movs	r0, r3
 8001b64:	f002 f98d 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001b68:	46c0      	nop			@ (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	50000800 	.word	0x50000800

08001b74 <CC_LED_TurnOnGreenOnStrip6>:
inline void CC_LED_TurnOnGreenOnStrip6(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_SET);
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	0059      	lsls	r1, r3, #1
 8001b7c:	23a0      	movs	r3, #160	@ 0xa0
 8001b7e:	05db      	lsls	r3, r3, #23
 8001b80:	2201      	movs	r2, #1
 8001b82:	0018      	movs	r0, r3
 8001b84:	f002 f97d 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <CC_LED_TurnOnBlueOnStrip6>:
inline void CC_LED_TurnOnBlueOnStrip6(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_SET);
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <CC_LED_TurnOnBlueOnStrip6+0x18>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	f002 f970 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	50000400 	.word	0x50000400

08001bac <CC_LED_TurnOffRedOnStrip6>:
inline void CC_LED_TurnOffRedOnStrip6(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R6_GPIO_Port, R6_Pin, GPIO_PIN_RESET);
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <CC_LED_TurnOffRedOnStrip6+0x18>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2140      	movs	r1, #64	@ 0x40
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f002 f963 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	50000800 	.word	0x50000800

08001bc8 <CC_LED_TurnOffGreenOnStrip6>:
inline void CC_LED_TurnOffGreenOnStrip6(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_RESET);
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	0059      	lsls	r1, r3, #1
 8001bd0:	23a0      	movs	r3, #160	@ 0xa0
 8001bd2:	05db      	lsls	r3, r3, #23
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f002 f953 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <CC_LED_TurnOffBlueOnStrip6>:
inline void CC_LED_TurnOffBlueOnStrip6(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_RESET);
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <CC_LED_TurnOffBlueOnStrip6+0x18>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	f002 f946 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	50000400 	.word	0x50000400

08001c00 <CC_LED_TurnOnRedOnStrip7>:
//Strip7
inline void CC_LED_TurnOnRedOnStrip7(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R7_GPIO_Port, R7_Pin, GPIO_PIN_SET);
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	01db      	lsls	r3, r3, #7
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <CC_LED_TurnOnRedOnStrip7+0x18>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	f002 f938 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	50000400 	.word	0x50000400

08001c1c <CC_LED_TurnOnGreenOnStrip7>:
inline void CC_LED_TurnOnGreenOnStrip7(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_SET);
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	019b      	lsls	r3, r3, #6
 8001c24:	4803      	ldr	r0, [pc, #12]	@ (8001c34 <CC_LED_TurnOnGreenOnStrip7+0x18>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	0019      	movs	r1, r3
 8001c2a:	f002 f92a 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	50000400 	.word	0x50000400

08001c38 <CC_LED_TurnOnBlueOnStrip7>:
inline void CC_LED_TurnOnBlueOnStrip7(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_SET);
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	4803      	ldr	r0, [pc, #12]	@ (8001c50 <CC_LED_TurnOnBlueOnStrip7+0x18>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	0019      	movs	r1, r3
 8001c46:	f002 f91c 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	50000400 	.word	0x50000400

08001c54 <CC_LED_TurnOffRedOnStrip7>:
inline void CC_LED_TurnOffRedOnStrip7(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R7_GPIO_Port, R7_Pin, GPIO_PIN_RESET);
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	01db      	lsls	r3, r3, #7
 8001c5c:	4803      	ldr	r0, [pc, #12]	@ (8001c6c <CC_LED_TurnOffRedOnStrip7+0x18>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	0019      	movs	r1, r3
 8001c62:	f002 f90e 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	50000400 	.word	0x50000400

08001c70 <CC_LED_TurnOffGreenOnStrip7>:
inline void CC_LED_TurnOffGreenOnStrip7(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_RESET);
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	019b      	lsls	r3, r3, #6
 8001c78:	4803      	ldr	r0, [pc, #12]	@ (8001c88 <CC_LED_TurnOffGreenOnStrip7+0x18>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	f002 f900 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	50000400 	.word	0x50000400

08001c8c <CC_LED_TurnOffBlueOnStrip7>:
inline void CC_LED_TurnOffBlueOnStrip7(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_RESET);
 8001c90:	2380      	movs	r3, #128	@ 0x80
 8001c92:	015b      	lsls	r3, r3, #5
 8001c94:	4803      	ldr	r0, [pc, #12]	@ (8001ca4 <CC_LED_TurnOffBlueOnStrip7+0x18>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	0019      	movs	r1, r3
 8001c9a:	f002 f8f2 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	50000400 	.word	0x50000400

08001ca8 <CC_LED_TurnOnRedOnStrip8>:
//Strip8
inline void CC_LED_TurnOnRedOnStrip8(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R8_GPIO_Port, R8_Pin, GPIO_PIN_SET);
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	4803      	ldr	r0, [pc, #12]	@ (8001cc0 <CC_LED_TurnOnRedOnStrip8+0x18>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	f002 f8e4 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	50000400 	.word	0x50000400

08001cc4 <CC_LED_TurnOnGreenOnStrip8>:
inline void CC_LED_TurnOnGreenOnStrip8(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_SET);
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4803      	ldr	r0, [pc, #12]	@ (8001cdc <CC_LED_TurnOnGreenOnStrip8+0x18>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	f002 f8d6 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	50000400 	.word	0x50000400

08001ce0 <CC_LED_TurnOnBlueOnStrip8>:
inline void CC_LED_TurnOnBlueOnStrip8(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B8_GPIO_Port, B8_Pin, GPIO_PIN_SET);
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <CC_LED_TurnOnBlueOnStrip8+0x18>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2104      	movs	r1, #4
 8001cea:	0018      	movs	r0, r3
 8001cec:	f002 f8c9 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001cf0:	46c0      	nop			@ (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	50000400 	.word	0x50000400

08001cfc <CC_LED_TurnOffRedOnStrip8>:
inline void CC_LED_TurnOffRedOnStrip8(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R8_GPIO_Port, R8_Pin, GPIO_PIN_RESET);
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	4803      	ldr	r0, [pc, #12]	@ (8001d14 <CC_LED_TurnOffRedOnStrip8+0x18>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	0019      	movs	r1, r3
 8001d0a:	f002 f8ba 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	50000400 	.word	0x50000400

08001d18 <CC_LED_TurnOffGreenOnStrip8>:
inline void CC_LED_TurnOffGreenOnStrip8(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_RESET);
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <CC_LED_TurnOffGreenOnStrip8+0x18>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	0019      	movs	r1, r3
 8001d26:	f002 f8ac 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	50000400 	.word	0x50000400

08001d34 <CC_LED_TurnOffBlueOnStrip8>:
inline void CC_LED_TurnOffBlueOnStrip8(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B8_GPIO_Port, B8_Pin, GPIO_PIN_RESET);
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <CC_LED_TurnOffBlueOnStrip8+0x18>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f002 f89f 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001d44:	46c0      	nop			@ (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			@ (mov r8, r8)
 8001d4c:	50000400 	.word	0x50000400

08001d50 <CC_LED_TurnOnRedOnStrip9>:
//Strip9
inline void CC_LED_TurnOnRedOnStrip9(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R9_GPIO_Port, R9_Pin, GPIO_PIN_SET);
 8001d54:	23a0      	movs	r3, #160	@ 0xa0
 8001d56:	05db      	lsls	r3, r3, #23
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f002 f890 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <CC_LED_TurnOnGreenOnStrip9>:
inline void CC_LED_TurnOnGreenOnStrip9(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_SET);
 8001d6c:	23a0      	movs	r3, #160	@ 0xa0
 8001d6e:	05db      	lsls	r3, r3, #23
 8001d70:	2201      	movs	r2, #1
 8001d72:	2140      	movs	r1, #64	@ 0x40
 8001d74:	0018      	movs	r0, r3
 8001d76:	f002 f884 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <CC_LED_TurnOnBlueOnStrip9>:
inline void CC_LED_TurnOnBlueOnStrip9(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B9_GPIO_Port, B9_Pin, GPIO_PIN_SET);
 8001d84:	23a0      	movs	r3, #160	@ 0xa0
 8001d86:	05db      	lsls	r3, r3, #23
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2120      	movs	r1, #32
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f002 f878 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <CC_LED_TurnOffRedOnStrip9>:
inline void CC_LED_TurnOffRedOnStrip9(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R9_GPIO_Port, R9_Pin, GPIO_PIN_RESET);
 8001d9c:	23a0      	movs	r3, #160	@ 0xa0
 8001d9e:	05db      	lsls	r3, r3, #23
 8001da0:	2200      	movs	r2, #0
 8001da2:	2180      	movs	r1, #128	@ 0x80
 8001da4:	0018      	movs	r0, r3
 8001da6:	f002 f86c 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <CC_LED_TurnOffGreenOnStrip9>:
inline void CC_LED_TurnOffGreenOnStrip9(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_RESET);
 8001db4:	23a0      	movs	r3, #160	@ 0xa0
 8001db6:	05db      	lsls	r3, r3, #23
 8001db8:	2200      	movs	r2, #0
 8001dba:	2140      	movs	r1, #64	@ 0x40
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f002 f860 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <CC_LED_TurnOffBlueOnStrip9>:
inline void CC_LED_TurnOffBlueOnStrip9(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B9_GPIO_Port, B9_Pin, GPIO_PIN_RESET);
 8001dcc:	23a0      	movs	r3, #160	@ 0xa0
 8001dce:	05db      	lsls	r3, r3, #23
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2120      	movs	r1, #32
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f002 f854 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <CC_LED_TurnOnRedOnStrip10>:
//Strip10
inline void CC_LED_TurnOnRedOnStrip10(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R10_GPIO_Port, R10_Pin, GPIO_PIN_SET);
 8001de4:	23a0      	movs	r3, #160	@ 0xa0
 8001de6:	05db      	lsls	r3, r3, #23
 8001de8:	2201      	movs	r2, #1
 8001dea:	2110      	movs	r1, #16
 8001dec:	0018      	movs	r0, r3
 8001dee:	f002 f848 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <CC_LED_TurnOnGreenOnStrip10>:
inline void CC_LED_TurnOnGreenOnStrip10(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G10_GPIO_Port, G10_Pin, GPIO_PIN_SET);
 8001dfc:	23a0      	movs	r3, #160	@ 0xa0
 8001dfe:	05db      	lsls	r3, r3, #23
 8001e00:	2201      	movs	r2, #1
 8001e02:	2108      	movs	r1, #8
 8001e04:	0018      	movs	r0, r3
 8001e06:	f002 f83c 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <CC_LED_TurnOnBlueOnStrip10>:
inline void CC_LED_TurnOnBlueOnStrip10(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B10_GPIO_Port, B10_Pin, GPIO_PIN_SET);
 8001e14:	23a0      	movs	r3, #160	@ 0xa0
 8001e16:	05db      	lsls	r3, r3, #23
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f002 f830 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <CC_LED_TurnOffRedOnStrip10>:
inline void CC_LED_TurnOffRedOnStrip10(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(R10_GPIO_Port, R10_Pin, GPIO_PIN_RESET);
 8001e2c:	23a0      	movs	r3, #160	@ 0xa0
 8001e2e:	05db      	lsls	r3, r3, #23
 8001e30:	2200      	movs	r2, #0
 8001e32:	2110      	movs	r1, #16
 8001e34:	0018      	movs	r0, r3
 8001e36:	f002 f824 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <CC_LED_TurnOffGreenOnStrip10>:
inline void CC_LED_TurnOffGreenOnStrip10(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(G10_GPIO_Port, G10_Pin, GPIO_PIN_RESET);
 8001e44:	23a0      	movs	r3, #160	@ 0xa0
 8001e46:	05db      	lsls	r3, r3, #23
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f002 f818 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <CC_LED_TurnOffBlueOnStrip10>:
inline void CC_LED_TurnOffBlueOnStrip10(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(B10_GPIO_Port, B10_Pin, GPIO_PIN_RESET);
 8001e5c:	23a0      	movs	r3, #160	@ 0xa0
 8001e5e:	05db      	lsls	r3, r3, #23
 8001e60:	2200      	movs	r2, #0
 8001e62:	2104      	movs	r1, #4
 8001e64:	0018      	movs	r0, r3
 8001e66:	f002 f80c 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_UART_RxCpltCallback>:
uint8_t CC_SERIAL_RxData[CC_SERIAL_RX_BUFF_LENGTH];

//Functions
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* const huart)
//UART callback
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
//  HAL_UART_Transmit(huart, CC_SERIAL_RxData, 1, 10);					//Gives back the character gotten
  HAL_UART_Receive_IT(huart, CC_SERIAL_RxData, CC_SERIAL_RX_CHAR_TIME);	//Restarts the listening and interruption by serial comm
 8001e78:	4904      	ldr	r1, [pc, #16]	@ (8001e8c <HAL_UART_RxCpltCallback+0x1c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f003 fcb8 	bl	80057f4 <HAL_UART_Receive_IT>
}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200003ac 	.word	0x200003ac

08001e90 <CC_SERIAL_SendData>:
void CC_SERIAL_SendData	(
						UART_HandleTypeDef* const huart,
						const uint8_t* const tx_buffer,
						const uint16_t Size
						)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	1dbb      	adds	r3, r7, #6
 8001e9c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(huart, tx_buffer, Size, CC_SERIAL_TX_TIMEOUT);	//Send the string via UART
 8001e9e:	1dbb      	adds	r3, r7, #6
 8001ea0:	881a      	ldrh	r2, [r3, #0]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f003 fc00 	bl	80056ac <HAL_UART_Transmit>
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b004      	add	sp, #16
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <CC_TMR_CheckTimIntFlag>:

//Global Variables Declaration

//Functions
uint8_t CC_TMR_CheckTimIntFlag(const TIM_HandleTypeDef* const htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE))	//Check if another interrupt event has happened
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <CC_TMR_CheckTimIntFlag+0x1a>
	{
		return 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <CC_TMR_CheckTimIntFlag+0x1c>
	}
	else
	{
		return 0;
 8001ece:	2300      	movs	r3, #0
	}
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <CC_TMR_GetElapsedCounts>:

uint32_t CC_TMR_GetElapsedCounts(const TIM_HandleTypeDef* const htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b002      	add	sp, #8
 8001eec:	bd80      	pop	{r7, pc}

08001eee <CC_TMR_GetLimitCounts>:

uint32_t CC_TMR_GetLimitCounts(const TIM_HandleTypeDef* const htim)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_AUTORELOAD(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <CC_ML_SendMessageCAN>:
};

//Functions
	//CC_CAN
void CC_ML_SendMessageCAN(void* param1, void* param2, void* param3)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
	FDCAN_HandleTypeDef* pHandlerCan;
	FDCAN_TxHeaderTypeDef* pHeaderTxCan;
	uint8_t* pdata2send;

	pHandlerCan=(FDCAN_HandleTypeDef*)param1;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	61fb      	str	r3, [r7, #28]
	pHeaderTxCan=(FDCAN_TxHeaderTypeDef*)param2;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
	pdata2send= (uint8_t*)param3;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	617b      	str	r3, [r7, #20]
	CC_CAN_SendMessage(pHandlerCan,	pHeaderTxCan, pdata2send);
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7ff fb88 	bl	8001638 <CC_CAN_SendMessage>
}
 8001f28:	46c0      	nop			@ (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b008      	add	sp, #32
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <CC_ML_GetDipSwitch4pos>:

	//CC_DIPSW
void CC_ML_GetDipSwitch4pos(void* pdata, void* param2, void* param3)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
	CC_DIPSW_DipSw_t* pDipSwitch;
	pDipSwitch=(CC_DIPSW_DipSw_t*)pdata;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	617b      	str	r3, [r7, #20]

	CC_DIPSW_GetDipSwitch4pos(pDipSwitch);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7ff fbd6 	bl	80016f4 <CC_DIPSW_GetDipSwitch4pos>
}
 8001f48:	46c0      	nop			@ (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b006      	add	sp, #24
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <CC_ML_UpdateIdSysFromDipSwitch>:

void CC_ML_UpdateIdSysFromDipSwitch(void* BoardData, void* DipSwData, void*)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
	CC_APP_Config_t* pBoardData=(CC_APP_Config_t*)BoardData;		//Input parameters castings
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	617b      	str	r3, [r7, #20]
	CC_DIPSW_DipSw_t* pDipSwitch=(CC_DIPSW_DipSw_t*)DipSwData;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	613b      	str	r3, [r7, #16]

	pBoardData->id = pDipSwitch->all;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	7819      	ldrb	r1, [r3, #0]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	225b      	movs	r2, #91	@ 0x5b
 8001f6c:	5499      	strb	r1, [r3, r2]
}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b006      	add	sp, #24
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <CC_ML_GetTimerElapsedCounts>:

	//CC_TMR
uint32_t CC_ML_GetTimerElapsedCounts(const TIM_HandleTypeDef* const ptimer_header)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
	return CC_TMR_GetElapsedCounts(ptimer_header);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff ffa9 	bl	8001ed8 <CC_TMR_GetElapsedCounts>
 8001f86:	0003      	movs	r3, r0
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <CC_ML_GetTimerLimitCounts>:

uint32_t CC_ML_GetTimerLimitCounts(const TIM_HandleTypeDef* const ptimer_header)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	return 	CC_TMR_GetLimitCounts(ptimer_header);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7ff ffa7 	bl	8001eee <CC_TMR_GetLimitCounts>
 8001fa0:	0003      	movs	r3, r0
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <CC_ML_SendUARTString>:

	//CC_SERIAL
void CC_ML_SendUARTString(const char* String2bSend, UART_HandleTypeDef* const huart)
//Function to send strings via USART
{
 8001faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fac:	46c6      	mov	lr, r8
 8001fae:	b500      	push	{lr}
 8001fb0:	b08c      	sub	sp, #48	@ 0x30
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	61f8      	str	r0, [r7, #28]
 8001fb6:	61b9      	str	r1, [r7, #24]
 8001fb8:	466b      	mov	r3, sp
 8001fba:	4698      	mov	r8, r3
    uint32_t length=0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    length = strlen(String2bSend);  	//Gets length of the string
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7fe f89e 	bl	8000104 <strlen>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    length++;  							//Increasing one for the null terminator
 8001fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fce:	3301      	adds	r3, #1
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t tx_buffer[length];  		//Creating an array (VLA) as long as the string to be sent, avoiding like this the intrinsic problem on strncpy() function (no length control)
 8001fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	3a01      	subs	r2, #1
 8001fd8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60fa      	str	r2, [r7, #12]
 8001fe0:	68b8      	ldr	r0, [r7, #8]
 8001fe2:	68f9      	ldr	r1, [r7, #12]
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	0f52      	lsrs	r2, r2, #29
 8001fe8:	000e      	movs	r6, r1
 8001fea:	00f6      	lsls	r6, r6, #3
 8001fec:	617e      	str	r6, [r7, #20]
 8001fee:	697e      	ldr	r6, [r7, #20]
 8001ff0:	4316      	orrs	r6, r2
 8001ff2:	617e      	str	r6, [r7, #20]
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	00d2      	lsls	r2, r2, #3
 8001ff8:	613a      	str	r2, [r7, #16]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	6838      	ldr	r0, [r7, #0]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	0002      	movs	r2, r0
 8002006:	0f52      	lsrs	r2, r2, #29
 8002008:	000e      	movs	r6, r1
 800200a:	00f5      	lsls	r5, r6, #3
 800200c:	4315      	orrs	r5, r2
 800200e:	0002      	movs	r2, r0
 8002010:	00d4      	lsls	r4, r2, #3
 8002012:	3307      	adds	r3, #7
 8002014:	08db      	lsrs	r3, r3, #3
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	466a      	mov	r2, sp
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	469d      	mov	sp, r3
 800201e:	466b      	mov	r3, sp
 8002020:	3300      	adds	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24

    strncpy((char*)tx_buffer, String2bSend, length);  		//Copy string to buffer
 8002024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002026:	69f9      	ldr	r1, [r7, #28]
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	0018      	movs	r0, r3
 800202c:	f005 fd1a 	bl	8007a64 <strncpy>
    CC_SERIAL_SendData(huart, tx_buffer, length);
 8002030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002032:	b29a      	uxth	r2, r3
 8002034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff ff29 	bl	8001e90 <CC_SERIAL_SendData>
 800203e:	46c5      	mov	sp, r8
}
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b00c      	add	sp, #48	@ 0x30
 8002046:	bc80      	pop	{r7}
 8002048:	46b8      	mov	r8, r7
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800204c <CC_ML_ClearUARTRxData>:

void CC_ML_ClearUARTRxData(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	CC_SERIAL_RxData[0]='\0';
 8002050:	4b02      	ldr	r3, [pc, #8]	@ (800205c <CC_ML_ClearUARTRxData+0x10>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200003ac 	.word	0x200003ac

08002060 <CC_ML_LedBoardToggle>:

	//CC_BOARDLED
void CC_ML_LedBoardToggle(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	CC_BOARDLED_Led1Toggle();
 8002064:	f7ff face 	bl	8001604 <CC_BOARDLED_Led1Toggle>
}
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002074:	f000 fd12 	bl	8002a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002078:	f000 f85e 	bl	8002138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800207c:	f000 f9f2 	bl	8002464 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8002080:	f000 f8bc 	bl	80021fc <MX_FDCAN2_Init>
  MX_TIM14_Init();
 8002084:	f000 f97a 	bl	800237c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8002088:	f000 f99e 	bl	80023c8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800208c:	f000 f8fe 	bl	800228c <MX_TIM6_Init>
  MX_TIM7_Init();
 8002090:	f000 f938 	bl	8002304 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  //Strip leds header initialization
  CC_LED_InitStrips();
 8002094:	f7ff fb94 	bl	80017c0 <CC_LED_InitStrips>
  CC_LEDPWM_Init(&CC_LEDPWM_Strip);
 8002098:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <main+0x9c>)
 800209a:	0018      	movs	r0, r3
 800209c:	f7fe fde8 	bl	8000c70 <CC_LEDPWM_Init>
  CC_APP_SetBoardParam(&CC_APP_BoardData);
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <main+0xa0>)
 80020a2:	0018      	movs	r0, r3
 80020a4:	f7fe fd92 	bl	8000bcc <CC_APP_SetBoardParam>
  CC_CAN_SetAddress(CC_CAN_RX_ADRESS);			//Static fixed address for CAN
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <main+0xa4>)
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7ff fab6 	bl	800161c <CC_CAN_SetAddress>

  //Soft-PWM timer generation initialization
  HAL_TIM_Base_Init(&CC_ML_PWM_GEN_BASETIME);
 80020b0:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <main+0xa8>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f002 ff14 	bl	8004ee0 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&CC_ML_PWM_GEN_BASETIME);
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <main+0xa8>)
 80020ba:	0018      	movs	r0, r3
 80020bc:	f002 ffe8 	bl	8005090 <HAL_TIM_Base_Start_IT>

  //Scheduler timer initialization
  CC_SCHDLR_InitFastScheduler(&CC_SCHDLR_FastScheduler);
 80020c0:	4b16      	ldr	r3, [pc, #88]	@ (800211c <main+0xac>)
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7fe ffcc 	bl	8001060 <CC_SCHDLR_InitFastScheduler>
  CC_SCHDLR_InitSlowScheduler(&CC_SCHDLR_SlowScheduler);
 80020c8:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <main+0xb0>)
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff f882 	bl	80011d4 <CC_SCHDLR_InitSlowScheduler>
  HAL_TIM_Base_Init(&CC_ML_SCHEDULER_BASETIME_HANDLER);
 80020d0:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <main+0xb4>)
 80020d2:	0018      	movs	r0, r3
 80020d4:	f002 ff04 	bl	8004ee0 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&CC_ML_SCHEDULER_BASETIME_HANDLER);
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <main+0xb4>)
 80020da:	0018      	movs	r0, r3
 80020dc:	f002 ffd8 	bl	8005090 <HAL_TIM_Base_Start_IT>
  //Serial receive initialization
  HAL_UART_Receive_IT(&CC_ML_SERIAL_DEBUG_HANDLER, CC_SERIAL_RxData, 1);
 80020e0:	4911      	ldr	r1, [pc, #68]	@ (8002128 <main+0xb8>)
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <main+0xbc>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	0018      	movs	r0, r3
 80020e8:	f003 fb84 	bl	80057f4 <HAL_UART_Receive_IT>
  //CAN initialization
  CC_CAN_Init(&CC_CAN_TxHeader);
 80020ec:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <main+0xc0>)
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff fab2 	bl	8001658 <CC_CAN_Init>
  HAL_FDCAN_Start(&CC_ML_PERIPHERALS_CAN);													//Starting CAN module
 80020f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002134 <main+0xc4>)
 80020f6:	0018      	movs	r0, r3
 80020f8:	f001 f878 	bl	80031ec <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&CC_ML_PERIPHERALS_CAN, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);	//When a message passes the filtering it triggers something
 80020fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <main+0xc4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	2101      	movs	r1, #1
 8002102:	0018      	movs	r0, r3
 8002104:	f001 f9ec 	bl	80034e0 <HAL_FDCAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002108:	46c0      	nop			@ (mov r8, r8)
 800210a:	e7fd      	b.n	8002108 <main+0x98>
 800210c:	2000008c 	.word	0x2000008c
 8002110:	2000002c 	.word	0x2000002c
 8002114:	00000201 	.word	0x00000201
 8002118:	20000460 	.word	0x20000460
 800211c:	20000138 	.word	0x20000138
 8002120:	200001f8 	.word	0x200001f8
 8002124:	200004ac 	.word	0x200004ac
 8002128:	200003ac 	.word	0x200003ac
 800212c:	200004f8 	.word	0x200004f8
 8002130:	2000036c 	.word	0x2000036c
 8002134:	200003b0 	.word	0x200003b0

08002138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b095      	sub	sp, #84	@ 0x54
 800213c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213e:	2414      	movs	r4, #20
 8002140:	193b      	adds	r3, r7, r4
 8002142:	0018      	movs	r0, r3
 8002144:	233c      	movs	r3, #60	@ 0x3c
 8002146:	001a      	movs	r2, r3
 8002148:	2100      	movs	r1, #0
 800214a:	f005 fc83 	bl	8007a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	0018      	movs	r0, r3
 8002152:	2310      	movs	r3, #16
 8002154:	001a      	movs	r2, r3
 8002156:	2100      	movs	r1, #0
 8002158:	f005 fc7c 	bl	8007a54 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	0018      	movs	r0, r3
 8002162:	f001 fec7 	bl	8003ef4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002166:	193b      	adds	r3, r7, r4
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216c:	193b      	adds	r3, r7, r4
 800216e:	2280      	movs	r2, #128	@ 0x80
 8002170:	0252      	lsls	r2, r2, #9
 8002172:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002174:	0021      	movs	r1, r4
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2202      	movs	r2, #2
 800217a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217c:	187b      	adds	r3, r7, r1
 800217e:	2203      	movs	r2, #3
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002182:	187b      	adds	r3, r7, r1
 8002184:	2200      	movs	r2, #0
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002188:	187b      	adds	r3, r7, r1
 800218a:	2219      	movs	r2, #25
 800218c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800218e:	187b      	adds	r3, r7, r1
 8002190:	2280      	movs	r2, #128	@ 0x80
 8002192:	0312      	lsls	r2, r2, #12
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002196:	187b      	adds	r3, r7, r1
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	0492      	lsls	r2, r2, #18
 800219c:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	22c0      	movs	r2, #192	@ 0xc0
 80021a2:	05d2      	lsls	r2, r2, #23
 80021a4:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	0018      	movs	r0, r3
 80021aa:	f001 feef 	bl	8003f8c <HAL_RCC_OscConfig>
 80021ae:	1e03      	subs	r3, r0, #0
 80021b0:	d001      	beq.n	80021b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80021b2:	f000 fa49 	bl	8002648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2202      	movs	r2, #2
 80021c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2102      	movs	r1, #2
 80021d2:	0018      	movs	r0, r3
 80021d4:	f002 fa3a 	bl	800464c <HAL_RCC_ClockConfig>
 80021d8:	1e03      	subs	r3, r0, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80021dc:	f000 fa34 	bl	8002648 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PF2, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	045b      	lsls	r3, r3, #17
 80021e4:	4804      	ldr	r0, [pc, #16]	@ (80021f8 <SystemClock_Config+0xc0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	0019      	movs	r1, r3
 80021ea:	f002 fb37 	bl	800485c <HAL_RCC_MCOConfig>
}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b015      	add	sp, #84	@ 0x54
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	00050004 	.word	0x00050004

080021fc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002200:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002202:	4a21      	ldr	r2, [pc, #132]	@ (8002288 <MX_FDCAN2_Init+0x8c>)
 8002204:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002206:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002208:	2200      	movs	r2, #0
 800220a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800220c:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002212:	4b1c      	ldr	r3, [pc, #112]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8002218:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 800221a:	2201      	movs	r2, #1
 800221c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002220:	2201      	movs	r2, #1
 8002222:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002224:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002226:	2200      	movs	r2, #0
 8002228:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800222a:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 800222c:	2201      	movs	r2, #1
 800222e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002232:	2210      	movs	r2, #16
 8002234:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 8002236:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002238:	2256      	movs	r2, #86	@ 0x56
 800223a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 800223e:	220d      	movs	r2, #13
 8002240:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002244:	2201      	movs	r2, #1
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 800224a:	2204      	movs	r2, #4
 800224c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 5;
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002250:	2205      	movs	r2, #5
 8002252:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002256:	2204      	movs	r2, #4
 8002258:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 800225a:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 800225c:	2201      	movs	r2, #1
 800225e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002262:	2200      	movs	r2, #0
 8002264:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 8002268:	2200      	movs	r2, #0
 800226a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <MX_FDCAN2_Init+0x88>)
 800226e:	0018      	movs	r0, r3
 8002270:	f000 fe56 	bl	8002f20 <HAL_FDCAN_Init>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d001      	beq.n	800227c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8002278:	f000 f9e6 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800227c:	46c0      	nop			@ (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	200003b0 	.word	0x200003b0
 8002288:	40006800 	.word	0x40006800

0800228c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	0018      	movs	r0, r3
 8002296:	230c      	movs	r3, #12
 8002298:	001a      	movs	r2, r3
 800229a:	2100      	movs	r1, #0
 800229c:	f005 fbda 	bl	8007a54 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022a0:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <MX_TIM6_Init+0x6c>)
 80022a2:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <MX_TIM6_Init+0x70>)
 80022a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80022a6:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <MX_TIM6_Init+0x6c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <MX_TIM6_Init+0x6c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80022b2:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <MX_TIM6_Init+0x6c>)
 80022b4:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <MX_TIM6_Init+0x74>)
 80022b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <MX_TIM6_Init+0x6c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <MX_TIM6_Init+0x6c>)
 80022c0:	0018      	movs	r0, r3
 80022c2:	f002 fe0d 	bl	8004ee0 <HAL_TIM_Base_Init>
 80022c6:	1e03      	subs	r3, r0, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80022ca:	f000 f9bd 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022da:	1d3a      	adds	r2, r7, #4
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <MX_TIM6_Init+0x6c>)
 80022de:	0011      	movs	r1, r2
 80022e0:	0018      	movs	r0, r3
 80022e2:	f003 f8ff 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 80022e6:	1e03      	subs	r3, r0, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80022ea:	f000 f9ad 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	20000414 	.word	0x20000414
 80022fc:	40001000 	.word	0x40001000
 8002300:	0000ffff 	.word	0x0000ffff

08002304 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	0018      	movs	r0, r3
 800230e:	230c      	movs	r3, #12
 8002310:	001a      	movs	r2, r3
 8002312:	2100      	movs	r1, #0
 8002314:	f005 fb9e 	bl	8007a54 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002318:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <MX_TIM7_Init+0x6c>)
 800231a:	4a16      	ldr	r2, [pc, #88]	@ (8002374 <MX_TIM7_Init+0x70>)
 800231c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800231e:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <MX_TIM7_Init+0x6c>)
 8002320:	2200      	movs	r2, #0
 8002322:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <MX_TIM7_Init+0x6c>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 800232a:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <MX_TIM7_Init+0x6c>)
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <MX_TIM7_Init+0x74>)
 800232e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002330:	4b0f      	ldr	r3, [pc, #60]	@ (8002370 <MX_TIM7_Init+0x6c>)
 8002332:	2280      	movs	r2, #128	@ 0x80
 8002334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002336:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <MX_TIM7_Init+0x6c>)
 8002338:	0018      	movs	r0, r3
 800233a:	f002 fdd1 	bl	8004ee0 <HAL_TIM_Base_Init>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002342:	f000 f981 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002352:	1d3a      	adds	r2, r7, #4
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <MX_TIM7_Init+0x6c>)
 8002356:	0011      	movs	r1, r2
 8002358:	0018      	movs	r0, r3
 800235a:	f003 f8c3 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 800235e:	1e03      	subs	r3, r0, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8002362:	f000 f971 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	20000460 	.word	0x20000460
 8002374:	40001400 	.word	0x40001400
 8002378:	00001387 	.word	0x00001387

0800237c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <MX_TIM14_Init+0x40>)
 8002382:	4a0f      	ldr	r2, [pc, #60]	@ (80023c0 <MX_TIM14_Init+0x44>)
 8002384:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002386:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <MX_TIM14_Init+0x40>)
 8002388:	2200      	movs	r2, #0
 800238a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <MX_TIM14_Init+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000-1;
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <MX_TIM14_Init+0x40>)
 8002394:	4a0b      	ldr	r2, [pc, #44]	@ (80023c4 <MX_TIM14_Init+0x48>)
 8002396:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002398:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <MX_TIM14_Init+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800239e:	4b07      	ldr	r3, [pc, #28]	@ (80023bc <MX_TIM14_Init+0x40>)
 80023a0:	2280      	movs	r2, #128	@ 0x80
 80023a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <MX_TIM14_Init+0x40>)
 80023a6:	0018      	movs	r0, r3
 80023a8:	f002 fd9a 	bl	8004ee0 <HAL_TIM_Base_Init>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80023b0:	f000 f94a 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80023b4:	46c0      	nop			@ (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	200004ac 	.word	0x200004ac
 80023c0:	40002000 	.word	0x40002000
 80023c4:	0000c34f 	.word	0x0000c34f

080023c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023cc:	4b23      	ldr	r3, [pc, #140]	@ (800245c <MX_USART1_UART_Init+0x94>)
 80023ce:	4a24      	ldr	r2, [pc, #144]	@ (8002460 <MX_USART1_UART_Init+0x98>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023d2:	4b22      	ldr	r3, [pc, #136]	@ (800245c <MX_USART1_UART_Init+0x94>)
 80023d4:	22e1      	movs	r2, #225	@ 0xe1
 80023d6:	0252      	lsls	r2, r2, #9
 80023d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <MX_USART1_UART_Init+0x94>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <MX_USART1_UART_Init+0x94>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <MX_USART1_UART_Init+0x94>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <MX_USART1_UART_Init+0x94>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <MX_USART1_UART_Init+0x94>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	4b18      	ldr	r3, [pc, #96]	@ (800245c <MX_USART1_UART_Init+0x94>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fe:	4b17      	ldr	r3, [pc, #92]	@ (800245c <MX_USART1_UART_Init+0x94>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002404:	4b15      	ldr	r3, [pc, #84]	@ (800245c <MX_USART1_UART_Init+0x94>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800240a:	4b14      	ldr	r3, [pc, #80]	@ (800245c <MX_USART1_UART_Init+0x94>)
 800240c:	2200      	movs	r2, #0
 800240e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <MX_USART1_UART_Init+0x94>)
 8002412:	0018      	movs	r0, r3
 8002414:	f003 f8f4 	bl	8005600 <HAL_UART_Init>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d001      	beq.n	8002420 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800241c:	f000 f914 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002420:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <MX_USART1_UART_Init+0x94>)
 8002422:	2100      	movs	r1, #0
 8002424:	0018      	movs	r0, r3
 8002426:	f005 f9fd 	bl	8007824 <HAL_UARTEx_SetTxFifoThreshold>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d001      	beq.n	8002432 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800242e:	f000 f90b 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <MX_USART1_UART_Init+0x94>)
 8002434:	2100      	movs	r1, #0
 8002436:	0018      	movs	r0, r3
 8002438:	f005 fa34 	bl	80078a4 <HAL_UARTEx_SetRxFifoThreshold>
 800243c:	1e03      	subs	r3, r0, #0
 800243e:	d001      	beq.n	8002444 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002440:	f000 f902 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <MX_USART1_UART_Init+0x94>)
 8002446:	0018      	movs	r0, r3
 8002448:	f005 f9b2 	bl	80077b0 <HAL_UARTEx_DisableFifoMode>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d001      	beq.n	8002454 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002450:	f000 f8fa 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002454:	46c0      	nop			@ (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	200004f8 	.word	0x200004f8
 8002460:	40013800 	.word	0x40013800

08002464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b08b      	sub	sp, #44	@ 0x2c
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	2414      	movs	r4, #20
 800246c:	193b      	adds	r3, r7, r4
 800246e:	0018      	movs	r0, r3
 8002470:	2314      	movs	r3, #20
 8002472:	001a      	movs	r2, r3
 8002474:	2100      	movs	r1, #0
 8002476:	f005 faed 	bl	8007a54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800247a:	4b6c      	ldr	r3, [pc, #432]	@ (800262c <MX_GPIO_Init+0x1c8>)
 800247c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800247e:	4b6b      	ldr	r3, [pc, #428]	@ (800262c <MX_GPIO_Init+0x1c8>)
 8002480:	2104      	movs	r1, #4
 8002482:	430a      	orrs	r2, r1
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34
 8002486:	4b69      	ldr	r3, [pc, #420]	@ (800262c <MX_GPIO_Init+0x1c8>)
 8002488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248a:	2204      	movs	r2, #4
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002492:	4b66      	ldr	r3, [pc, #408]	@ (800262c <MX_GPIO_Init+0x1c8>)
 8002494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002496:	4b65      	ldr	r3, [pc, #404]	@ (800262c <MX_GPIO_Init+0x1c8>)
 8002498:	2120      	movs	r1, #32
 800249a:	430a      	orrs	r2, r1
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34
 800249e:	4b63      	ldr	r3, [pc, #396]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a2:	2220      	movs	r2, #32
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b60      	ldr	r3, [pc, #384]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ae:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024b0:	2101      	movs	r1, #1
 80024b2:	430a      	orrs	r2, r1
 80024b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80024b6:	4b5d      	ldr	r3, [pc, #372]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ba:	2201      	movs	r2, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	4b5a      	ldr	r3, [pc, #360]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c6:	4b59      	ldr	r3, [pc, #356]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024c8:	2102      	movs	r1, #2
 80024ca:	430a      	orrs	r2, r1
 80024cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ce:	4b57      	ldr	r3, [pc, #348]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024da:	4b54      	ldr	r3, [pc, #336]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024de:	4b53      	ldr	r3, [pc, #332]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024e0:	2108      	movs	r1, #8
 80024e2:	430a      	orrs	r2, r1
 80024e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80024e6:	4b51      	ldr	r3, [pc, #324]	@ (800262c <MX_GPIO_Init+0x1c8>)
 80024e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ea:	2208      	movs	r2, #8
 80024ec:	4013      	ands	r3, r2
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|B10_Pin|G10_Pin|R10_Pin
 80024f2:	494f      	ldr	r1, [pc, #316]	@ (8002630 <MX_GPIO_Init+0x1cc>)
 80024f4:	23a0      	movs	r3, #160	@ 0xa0
 80024f6:	05db      	lsls	r3, r3, #23
 80024f8:	2200      	movs	r2, #0
 80024fa:	0018      	movs	r0, r3
 80024fc:	f001 fcc1 	bl	8003e82 <HAL_GPIO_WritePin>
                          |B9_Pin|G9_Pin|R9_Pin|G6_Pin
                          |G5_Pin|R5_Pin|B4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B8_Pin|G8_Pin|R8_Pin|B7_Pin
 8002500:	494c      	ldr	r1, [pc, #304]	@ (8002634 <MX_GPIO_Init+0x1d0>)
 8002502:	4b4d      	ldr	r3, [pc, #308]	@ (8002638 <MX_GPIO_Init+0x1d4>)
 8002504:	2200      	movs	r2, #0
 8002506:	0018      	movs	r0, r3
 8002508:	f001 fcbb 	bl	8003e82 <HAL_GPIO_WritePin>
                          |G7_Pin|R7_Pin|B6_Pin|R3_Pin
                          |B2_Pin|G2_Pin|R2_Pin|B1_Pin
                          |G1_Pin|R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R6_Pin|B5_Pin, GPIO_PIN_RESET);
 800250c:	4b4b      	ldr	r3, [pc, #300]	@ (800263c <MX_GPIO_Init+0x1d8>)
 800250e:	2200      	movs	r2, #0
 8002510:	21c0      	movs	r1, #192	@ 0xc0
 8002512:	0018      	movs	r0, r3
 8002514:	f001 fcb5 	bl	8003e82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, G4_Pin|R4_Pin|B3_Pin|G3_Pin, GPIO_PIN_RESET);
 8002518:	4b49      	ldr	r3, [pc, #292]	@ (8002640 <MX_GPIO_Init+0x1dc>)
 800251a:	2200      	movs	r2, #0
 800251c:	210f      	movs	r1, #15
 800251e:	0018      	movs	r0, r3
 8002520:	f001 fcaf 	bl	8003e82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP_SW1_Pin DIP_SW2_Pin DIP_SW3_Pin */
  GPIO_InitStruct.Pin = DIP_SW1_Pin|DIP_SW2_Pin|DIP_SW3_Pin;
 8002524:	193b      	adds	r3, r7, r4
 8002526:	22e0      	movs	r2, #224	@ 0xe0
 8002528:	0212      	lsls	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252c:	193b      	adds	r3, r7, r4
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	193b      	adds	r3, r7, r4
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002538:	193b      	adds	r3, r7, r4
 800253a:	4a40      	ldr	r2, [pc, #256]	@ (800263c <MX_GPIO_Init+0x1d8>)
 800253c:	0019      	movs	r1, r3
 800253e:	0010      	movs	r0, r2
 8002540:	f001 fb16 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002544:	193b      	adds	r3, r7, r4
 8002546:	2204      	movs	r2, #4
 8002548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	193b      	adds	r3, r7, r4
 800254c:	2202      	movs	r2, #2
 800254e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	193b      	adds	r3, r7, r4
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	193b      	adds	r3, r7, r4
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800255c:	193b      	adds	r3, r7, r4
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002562:	193b      	adds	r3, r7, r4
 8002564:	4a37      	ldr	r2, [pc, #220]	@ (8002644 <MX_GPIO_Init+0x1e0>)
 8002566:	0019      	movs	r1, r3
 8002568:	0010      	movs	r0, r2
 800256a:	f001 fb01 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP_SW4_Pin */
  GPIO_InitStruct.Pin = DIP_SW4_Pin;
 800256e:	193b      	adds	r3, r7, r4
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002574:	193b      	adds	r3, r7, r4
 8002576:	2200      	movs	r2, #0
 8002578:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	193b      	adds	r3, r7, r4
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIP_SW4_GPIO_Port, &GPIO_InitStruct);
 8002580:	193a      	adds	r2, r7, r4
 8002582:	23a0      	movs	r3, #160	@ 0xa0
 8002584:	05db      	lsls	r3, r3, #23
 8002586:	0011      	movs	r1, r2
 8002588:	0018      	movs	r0, r3
 800258a:	f001 faf1 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin B10_Pin G10_Pin R10_Pin
                           B9_Pin G9_Pin R9_Pin G6_Pin
                           G5_Pin R5_Pin B4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|B10_Pin|G10_Pin|R10_Pin
 800258e:	193b      	adds	r3, r7, r4
 8002590:	4a27      	ldr	r2, [pc, #156]	@ (8002630 <MX_GPIO_Init+0x1cc>)
 8002592:	601a      	str	r2, [r3, #0]
                          |B9_Pin|G9_Pin|R9_Pin|G6_Pin
                          |G5_Pin|R5_Pin|B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002594:	193b      	adds	r3, r7, r4
 8002596:	2201      	movs	r2, #1
 8002598:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	193b      	adds	r3, r7, r4
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	2200      	movs	r2, #0
 80025a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	193a      	adds	r2, r7, r4
 80025a8:	23a0      	movs	r3, #160	@ 0xa0
 80025aa:	05db      	lsls	r3, r3, #23
 80025ac:	0011      	movs	r1, r2
 80025ae:	0018      	movs	r0, r3
 80025b0:	f001 fade 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : B8_Pin G8_Pin R8_Pin B7_Pin
                           G7_Pin R7_Pin B6_Pin R3_Pin
                           B2_Pin G2_Pin R2_Pin B1_Pin
                           G1_Pin R1_Pin */
  GPIO_InitStruct.Pin = B8_Pin|G8_Pin|R8_Pin|B7_Pin
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002634 <MX_GPIO_Init+0x1d0>)
 80025b8:	601a      	str	r2, [r3, #0]
                          |G7_Pin|R7_Pin|B6_Pin|R3_Pin
                          |B2_Pin|G2_Pin|R2_Pin|B1_Pin
                          |G1_Pin|R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	2201      	movs	r2, #1
 80025be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	193b      	adds	r3, r7, r4
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002638 <MX_GPIO_Init+0x1d4>)
 80025d0:	0019      	movs	r1, r3
 80025d2:	0010      	movs	r0, r2
 80025d4:	f001 facc 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : R6_Pin B5_Pin */
  GPIO_InitStruct.Pin = R6_Pin|B5_Pin;
 80025d8:	193b      	adds	r3, r7, r4
 80025da:	22c0      	movs	r2, #192	@ 0xc0
 80025dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025de:	193b      	adds	r3, r7, r4
 80025e0:	2201      	movs	r2, #1
 80025e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	2200      	movs	r2, #0
 80025ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	4a12      	ldr	r2, [pc, #72]	@ (800263c <MX_GPIO_Init+0x1d8>)
 80025f4:	0019      	movs	r1, r3
 80025f6:	0010      	movs	r0, r2
 80025f8:	f001 faba 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin R4_Pin B3_Pin G3_Pin */
  GPIO_InitStruct.Pin = G4_Pin|R4_Pin|B3_Pin|G3_Pin;
 80025fc:	0021      	movs	r1, r4
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	220f      	movs	r2, #15
 8002602:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2201      	movs	r2, #1
 8002608:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002616:	187b      	adds	r3, r7, r1
 8002618:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <MX_GPIO_Init+0x1dc>)
 800261a:	0019      	movs	r1, r3
 800261c:	0010      	movs	r0, r2
 800261e:	f001 faa7 	bl	8003b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b00b      	add	sp, #44	@ 0x2c
 8002628:	bd90      	pop	{r4, r7, pc}
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	40021000 	.word	0x40021000
 8002630:	000099fe 	.word	0x000099fe
 8002634:	0000fffc 	.word	0x0000fffc
 8002638:	50000400 	.word	0x50000400
 800263c:	50000800 	.word	0x50000800
 8002640:	50000c00 	.word	0x50000c00
 8002644:	50001400 	.word	0x50001400

08002648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800264c:	b672      	cpsid	i
}
 800264e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002650:	46c0      	nop			@ (mov r8, r8)
 8002652:	e7fd      	b.n	8002650 <Error_Handler+0x8>

08002654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_MspInit+0x4c>)
 800265c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <HAL_MspInit+0x4c>)
 8002660:	2101      	movs	r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40
 8002666:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <HAL_MspInit+0x4c>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	2201      	movs	r2, #1
 800266c:	4013      	ands	r3, r2
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_MspInit+0x4c>)
 8002674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002676:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_MspInit+0x4c>)
 8002678:	2180      	movs	r1, #128	@ 0x80
 800267a:	0549      	lsls	r1, r1, #21
 800267c:	430a      	orrs	r2, r1
 800267e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002680:	4b07      	ldr	r3, [pc, #28]	@ (80026a0 <HAL_MspInit+0x4c>)
 8002682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	055b      	lsls	r3, r3, #21
 8002688:	4013      	ands	r3, r2
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800268e:	23c0      	movs	r3, #192	@ 0xc0
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fa88 	bl	8002ba8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002698:	46c0      	nop			@ (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b09d      	sub	sp, #116	@ 0x74
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	235c      	movs	r3, #92	@ 0x5c
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	0018      	movs	r0, r3
 80026b2:	2314      	movs	r3, #20
 80026b4:	001a      	movs	r2, r3
 80026b6:	2100      	movs	r1, #0
 80026b8:	f005 f9cc 	bl	8007a54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026bc:	2410      	movs	r4, #16
 80026be:	193b      	adds	r3, r7, r4
 80026c0:	0018      	movs	r0, r3
 80026c2:	234c      	movs	r3, #76	@ 0x4c
 80026c4:	001a      	movs	r2, r3
 80026c6:	2100      	movs	r1, #0
 80026c8:	f005 f9c4 	bl	8007a54 <memset>
  if(hfdcan->Instance==FDCAN2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2a      	ldr	r2, [pc, #168]	@ (800277c <HAL_FDCAN_MspInit+0xd8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d14e      	bne.n	8002774 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	2280      	movs	r2, #128	@ 0x80
 80026da:	0492      	lsls	r2, r2, #18
 80026dc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	2200      	movs	r2, #0
 80026e2:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	0018      	movs	r0, r3
 80026e8:	f002 f9be 	bl	8004a68 <HAL_RCCEx_PeriphCLKConfig>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80026f0:	f7ff ffaa 	bl	8002648 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80026f4:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <HAL_FDCAN_MspInit+0xdc>)
 80026f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f8:	4b21      	ldr	r3, [pc, #132]	@ (8002780 <HAL_FDCAN_MspInit+0xdc>)
 80026fa:	2180      	movs	r1, #128	@ 0x80
 80026fc:	0149      	lsls	r1, r1, #5
 80026fe:	430a      	orrs	r2, r1
 8002700:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002702:	4b1f      	ldr	r3, [pc, #124]	@ (8002780 <HAL_FDCAN_MspInit+0xdc>)
 8002704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	015b      	lsls	r3, r3, #5
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <HAL_FDCAN_MspInit+0xdc>)
 8002712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002714:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <HAL_FDCAN_MspInit+0xdc>)
 8002716:	2102      	movs	r1, #2
 8002718:	430a      	orrs	r2, r1
 800271a:	635a      	str	r2, [r3, #52]	@ 0x34
 800271c:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <HAL_FDCAN_MspInit+0xdc>)
 800271e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002720:	2202      	movs	r2, #2
 8002722:	4013      	ands	r3, r2
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002728:	215c      	movs	r1, #92	@ 0x5c
 800272a:	187b      	adds	r3, r7, r1
 800272c:	2203      	movs	r2, #3
 800272e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	187b      	adds	r3, r7, r1
 8002732:	2202      	movs	r2, #2
 8002734:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	187b      	adds	r3, r7, r1
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	187b      	adds	r3, r7, r1
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8002742:	187b      	adds	r3, r7, r1
 8002744:	2203      	movs	r2, #3
 8002746:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	187b      	adds	r3, r7, r1
 800274a:	4a0e      	ldr	r2, [pc, #56]	@ (8002784 <HAL_FDCAN_MspInit+0xe0>)
 800274c:	0019      	movs	r1, r3
 800274e:	0010      	movs	r0, r2
 8002750:	f001 fa0e 	bl	8003b70 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 2, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2102      	movs	r1, #2
 8002758:	2015      	movs	r0, #21
 800275a:	f000 fae7 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800275e:	2015      	movs	r0, #21
 8002760:	f000 faf9 	bl	8002d56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 2, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	2102      	movs	r1, #2
 8002768:	2016      	movs	r0, #22
 800276a:	f000 fadf 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 800276e:	2016      	movs	r0, #22
 8002770:	f000 faf1 	bl	8002d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8002774:	46c0      	nop			@ (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b01d      	add	sp, #116	@ 0x74
 800277a:	bd90      	pop	{r4, r7, pc}
 800277c:	40006800 	.word	0x40006800
 8002780:	40021000 	.word	0x40021000
 8002784:	50000400 	.word	0x50000400

08002788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a24      	ldr	r2, [pc, #144]	@ (8002828 <HAL_TIM_Base_MspInit+0xa0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10c      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800279a:	4b24      	ldr	r3, [pc, #144]	@ (800282c <HAL_TIM_Base_MspInit+0xa4>)
 800279c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800279e:	4b23      	ldr	r3, [pc, #140]	@ (800282c <HAL_TIM_Base_MspInit+0xa4>)
 80027a0:	2110      	movs	r1, #16
 80027a2:	430a      	orrs	r2, r1
 80027a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027a6:	4b21      	ldr	r3, [pc, #132]	@ (800282c <HAL_TIM_Base_MspInit+0xa4>)
 80027a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027aa:	2210      	movs	r2, #16
 80027ac:	4013      	ands	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80027b2:	e034      	b.n	800281e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002830 <HAL_TIM_Base_MspInit+0xa8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d114      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027be:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_TIM_Base_MspInit+0xa4>)
 80027c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027c2:	4b1a      	ldr	r3, [pc, #104]	@ (800282c <HAL_TIM_Base_MspInit+0xa4>)
 80027c4:	2120      	movs	r1, #32
 80027c6:	430a      	orrs	r2, r1
 80027c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <HAL_TIM_Base_MspInit+0xa4>)
 80027cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ce:	2220      	movs	r2, #32
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2012      	movs	r0, #18
 80027dc:	f000 faa6 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 80027e0:	2012      	movs	r0, #18
 80027e2:	f000 fab8 	bl	8002d56 <HAL_NVIC_EnableIRQ>
}
 80027e6:	e01a      	b.n	800281e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a11      	ldr	r2, [pc, #68]	@ (8002834 <HAL_TIM_Base_MspInit+0xac>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d115      	bne.n	800281e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <HAL_TIM_Base_MspInit+0xa4>)
 80027f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <HAL_TIM_Base_MspInit+0xa4>)
 80027f8:	2180      	movs	r1, #128	@ 0x80
 80027fa:	0209      	lsls	r1, r1, #8
 80027fc:	430a      	orrs	r2, r1
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002800:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <HAL_TIM_Base_MspInit+0xa4>)
 8002802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2101      	movs	r1, #1
 8002812:	2013      	movs	r0, #19
 8002814:	f000 fa8a 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002818:	2013      	movs	r0, #19
 800281a:	f000 fa9c 	bl	8002d56 <HAL_NVIC_EnableIRQ>
}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b006      	add	sp, #24
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	40001000 	.word	0x40001000
 800282c:	40021000 	.word	0x40021000
 8002830:	40001400 	.word	0x40001400
 8002834:	40002000 	.word	0x40002000

08002838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b09d      	sub	sp, #116	@ 0x74
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	235c      	movs	r3, #92	@ 0x5c
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	0018      	movs	r0, r3
 8002846:	2314      	movs	r3, #20
 8002848:	001a      	movs	r2, r3
 800284a:	2100      	movs	r1, #0
 800284c:	f005 f902 	bl	8007a54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002850:	2410      	movs	r4, #16
 8002852:	193b      	adds	r3, r7, r4
 8002854:	0018      	movs	r0, r3
 8002856:	234c      	movs	r3, #76	@ 0x4c
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f005 f8fa 	bl	8007a54 <memset>
  if(huart->Instance==USART1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a27      	ldr	r2, [pc, #156]	@ (8002904 <HAL_UART_MspInit+0xcc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d147      	bne.n	80028fa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800286a:	193b      	adds	r3, r7, r4
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002870:	193b      	adds	r3, r7, r4
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002876:	193b      	adds	r3, r7, r4
 8002878:	0018      	movs	r0, r3
 800287a:	f002 f8f5 	bl	8004a68 <HAL_RCCEx_PeriphCLKConfig>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002882:	f7ff fee1 	bl	8002648 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <HAL_UART_MspInit+0xd0>)
 8002888:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800288a:	4b1f      	ldr	r3, [pc, #124]	@ (8002908 <HAL_UART_MspInit+0xd0>)
 800288c:	2180      	movs	r1, #128	@ 0x80
 800288e:	01c9      	lsls	r1, r1, #7
 8002890:	430a      	orrs	r2, r1
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
 8002894:	4b1c      	ldr	r3, [pc, #112]	@ (8002908 <HAL_UART_MspInit+0xd0>)
 8002896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	01db      	lsls	r3, r3, #7
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <HAL_UART_MspInit+0xd0>)
 80028a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <HAL_UART_MspInit+0xd0>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	430a      	orrs	r2, r1
 80028ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80028ae:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <HAL_UART_MspInit+0xd0>)
 80028b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b2:	2201      	movs	r2, #1
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028ba:	215c      	movs	r1, #92	@ 0x5c
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	22c0      	movs	r2, #192	@ 0xc0
 80028c0:	00d2      	lsls	r2, r2, #3
 80028c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	2202      	movs	r2, #2
 80028c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2201      	movs	r2, #1
 80028da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028dc:	187a      	adds	r2, r7, r1
 80028de:	23a0      	movs	r3, #160	@ 0xa0
 80028e0:	05db      	lsls	r3, r3, #23
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f001 f943 	bl	8003b70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2102      	movs	r1, #2
 80028ee:	201b      	movs	r0, #27
 80028f0:	f000 fa1c 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028f4:	201b      	movs	r0, #27
 80028f6:	f000 fa2e 	bl	8002d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b01d      	add	sp, #116	@ 0x74
 8002900:	bd90      	pop	{r4, r7, pc}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	40013800 	.word	0x40013800
 8002908:	40021000 	.word	0x40021000

0800290c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002910:	46c0      	nop			@ (mov r8, r8)
 8002912:	e7fd      	b.n	8002910 <NMI_Handler+0x4>

08002914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002918:	46c0      	nop			@ (mov r8, r8)
 800291a:	e7fd      	b.n	8002918 <HardFault_Handler+0x4>

0800291c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002920:	46c0      	nop			@ (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002934:	f000 f91c 	bl	8002b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
//Timer used to generate the strip leds soft-PWM. The scheduler running over timer14
//was unable to run all the tasks fast enough.
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <TIM7_LPTIM2_IRQHandler+0x34>)
 8002948:	0018      	movs	r0, r3
 800294a:	f002 fc03 	bl	8005154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */
	CC_LEDPWM_SoftPwm_t* 	pCC_LEDPWM_SoftPwm;				//Pointer to strip leds control data
	pCC_LEDPWM_SoftPwm=&CC_LEDPWM_Strip;					//Pointer to strip control data
 800294e:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <TIM7_LPTIM2_IRQHandler+0x38>)
 8002950:	607b      	str	r3, [r7, #4]
//	CC_LED_StripLedFuncts_t* pCC_ML_LedsStripsFunctions;	//
//	pCC_ML_LedsStripsFunctions=&CC_ML_LedsStripsFunctions;

	CC_LEDPWM_UpdatePwms((void*)pCC_LEDPWM_SoftPwm, (void*)NULL, (void*)NULL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	0018      	movs	r0, r3
 800295a:	f7fe fa57 	bl	8000e0c <CC_LEDPWM_UpdatePwms>
//	CC_LEDPWM_UpdatePwms((void*)pCC_LEDPWM_SoftPwm, (void*)pCC_ML_LedsStripsFunctions, (void*)NULL);
	CC_LEDPWM_IncreaseCntr((void*)pCC_LEDPWM_SoftPwm, (void*)NULL, (void*)NULL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	0018      	movs	r0, r3
 8002966:	f7fe fa31 	bl	8000dcc <CC_LEDPWM_IncreaseCntr>

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	20000460 	.word	0x20000460
 8002978:	2000008c 	.word	0x2000008c

0800297c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
//executed if there weren't too many overflows, and afterwards is
//checked if another TMR14 interrupt event has happened by checking again
//the interrupt flag. If so, it means that the procedure lasted too much
//and it is increased the missed interrupts count.

	HAL_TIM_Base_Start(&CC_ML_SCHEDULER_CHRONO_HANDLER);
 8002982:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <TIM14_IRQHandler+0x68>)
 8002984:	0018      	movs	r0, r3
 8002986:	f002 fb03 	bl	8004f90 <HAL_TIM_Base_Start>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800298a:	4b17      	ldr	r3, [pc, #92]	@ (80029e8 <TIM14_IRQHandler+0x6c>)
 800298c:	0018      	movs	r0, r3
 800298e:	f002 fbe1 	bl	8005154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */
	uint8_t current_task;

	current_task=CC_SCHDLR_FastScheduler.TaskOngoing;
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	4a15      	ldr	r2, [pc, #84]	@ (80029ec <TIM14_IRQHandler+0x70>)
 8002996:	21b0      	movs	r1, #176	@ 0xb0
 8002998:	5c52      	ldrb	r2, [r2, r1]
 800299a:	701a      	strb	r2, [r3, #0]
//	CC_SCHDLR_FastScheduler.IntCount++;										//Interruptions counter
	//Overflowing stop
	if(CC_SCHDLR_FastScheduler.MissIntCnt>CC_SCHDLR_MAX_ALLOWED_MISS_INT)	//Check the number of overflows
 800299c:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <TIM14_IRQHandler+0x70>)
 800299e:	33b8      	adds	r3, #184	@ 0xb8
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d118      	bne.n	80029da <TIM14_IRQHandler+0x5e>
 80029a8:	d101      	bne.n	80029ae <TIM14_IRQHandler+0x32>
 80029aa:	2a64      	cmp	r2, #100	@ 0x64
 80029ac:	d815      	bhi.n	80029da <TIM14_IRQHandler+0x5e>
	{
	//INSERT AN ERROR LOG HERE
	return;																	//After a limit pSchedulerData wont work anymore
	}
	CC_SCHDLR_Scheduler(((void*)&CC_SCHDLR_FastScheduler), (void*)NULL, (void*)NULL);
 80029ae:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <TIM14_IRQHandler+0x70>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	2100      	movs	r1, #0
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7fe fa9f 	bl	8000ef8 <CC_SCHDLR_Scheduler>
	HAL_TIM_Base_Stop(&CC_ML_SCHEDULER_CHRONO_HANDLER);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <TIM14_IRQHandler+0x68>)
 80029bc:	0018      	movs	r0, r3
 80029be:	f002 fb41 	bl	8005044 <HAL_TIM_Base_Stop>
	CC_SCHDLR_SchedulerUsage(&CC_SCHDLR_MainSchedulerUsage, current_task); 	//Keep in mind that the scheduler update the current task, so it needs to work with non-updated current task
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <TIM14_IRQHandler+0x74>)
 80029c8:	0011      	movs	r1, r2
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7fe fb02 	bl	8000fd4 <CC_SCHDLR_SchedulerUsage>
	__HAL_TIM_SET_COUNTER(&CC_ML_SCHEDULER_CHRONO_HANDLER, 0);				//Reset counter timer used to calculate the task's usage
 80029d0:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <TIM14_IRQHandler+0x68>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80029d8:	e000      	b.n	80029dc <TIM14_IRQHandler+0x60>
	return;																	//After a limit pSchedulerData wont work anymore
 80029da:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE END TIM14_IRQn 1 */
}
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	20000414 	.word	0x20000414
 80029e8:	200004ac 	.word	0x200004ac
 80029ec:	20000138 	.word	0x20000138
 80029f0:	200002b8 	.word	0x200002b8

080029f4 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80029f8:	4b03      	ldr	r3, [pc, #12]	@ (8002a08 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 fe46 	bl	800368c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8002a00:	46c0      	nop			@ (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	200003b0 	.word	0x200003b0

08002a0c <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <TIM17_FDCAN_IT1_IRQHandler+0x14>)
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 fe3a 	bl	800368c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8002a18:	46c0      	nop			@ (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	200003b0 	.word	0x200003b0

08002a24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a28:	4b03      	ldr	r3, [pc, #12]	@ (8002a38 <USART1_IRQHandler+0x14>)
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f002 ff48 	bl	80058c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a30:	46c0      	nop			@ (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	200004f8 	.word	0x200004f8

08002a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a48:	480d      	ldr	r0, [pc, #52]	@ (8002a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a4c:	f7ff fff6 	bl	8002a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a50:	480c      	ldr	r0, [pc, #48]	@ (8002a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a52:	490d      	ldr	r1, [pc, #52]	@ (8002a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a54:	4a0d      	ldr	r2, [pc, #52]	@ (8002a8c <LoopForever+0xe>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a58:	e002      	b.n	8002a60 <LoopCopyDataInit>

08002a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5e:	3304      	adds	r3, #4

08002a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a64:	d3f9      	bcc.n	8002a5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a66:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a68:	4c0a      	ldr	r4, [pc, #40]	@ (8002a94 <LoopForever+0x16>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a6c:	e001      	b.n	8002a72 <LoopFillZerobss>

08002a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a70:	3204      	adds	r2, #4

08002a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a74:	d3fb      	bcc.n	8002a6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a76:	f005 f809 	bl	8007a8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002a7a:	f7ff faf9 	bl	8002070 <main>

08002a7e <LoopForever>:

LoopForever:
  b LoopForever
 8002a7e:	e7fe      	b.n	8002a7e <LoopForever>
  ldr   r0, =_estack
 8002a80:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002a8c:	08008150 	.word	0x08008150
  ldr r2, =_sbss
 8002a90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002a94:	20000590 	.word	0x20000590

08002a98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a98:	e7fe      	b.n	8002a98 <ADC1_COMP_IRQHandler>
	...

08002a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aa2:	1dfb      	adds	r3, r7, #7
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_Init+0x3c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_Init+0x3c>)
 8002aae:	2180      	movs	r1, #128	@ 0x80
 8002ab0:	0049      	lsls	r1, r1, #1
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ab6:	2003      	movs	r0, #3
 8002ab8:	f000 f810 	bl	8002adc <HAL_InitTick>
 8002abc:	1e03      	subs	r3, r0, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ac0:	1dfb      	adds	r3, r7, #7
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e001      	b.n	8002acc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ac8:	f7ff fdc4 	bl	8002654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002acc:	1dfb      	adds	r3, r7, #7
 8002ace:	781b      	ldrb	r3, [r3, #0]
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b002      	add	sp, #8
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40022000 	.word	0x40022000

08002adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002aec:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <HAL_InitTick+0x88>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02b      	beq.n	8002b4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002af4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <HAL_InitTick+0x8c>)
 8002af6:	681c      	ldr	r4, [r3, #0]
 8002af8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <HAL_InitTick+0x88>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	0019      	movs	r1, r3
 8002afe:	23fa      	movs	r3, #250	@ 0xfa
 8002b00:	0098      	lsls	r0, r3, #2
 8002b02:	f7fd fb07 	bl	8000114 <__udivsi3>
 8002b06:	0003      	movs	r3, r0
 8002b08:	0019      	movs	r1, r3
 8002b0a:	0020      	movs	r0, r4
 8002b0c:	f7fd fb02 	bl	8000114 <__udivsi3>
 8002b10:	0003      	movs	r3, r0
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 f92f 	bl	8002d76 <HAL_SYSTICK_Config>
 8002b18:	1e03      	subs	r3, r0, #0
 8002b1a:	d112      	bne.n	8002b42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d80a      	bhi.n	8002b38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	2301      	movs	r3, #1
 8002b26:	425b      	negs	r3, r3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 f8fe 	bl	8002d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <HAL_InitTick+0x90>)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e00d      	b.n	8002b54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b38:	230f      	movs	r3, #15
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e008      	b.n	8002b54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b42:	230f      	movs	r3, #15
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e003      	b.n	8002b54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b54:	230f      	movs	r3, #15
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	781b      	ldrb	r3, [r3, #0]
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b005      	add	sp, #20
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	2000000c 	.word	0x2000000c
 8002b68:	20000004 	.word	0x20000004
 8002b6c:	20000008 	.word	0x20000008

08002b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <HAL_IncTick+0x1c>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	001a      	movs	r2, r3
 8002b7a:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_IncTick+0x20>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	18d2      	adds	r2, r2, r3
 8002b80:	4b03      	ldr	r3, [pc, #12]	@ (8002b90 <HAL_IncTick+0x20>)
 8002b82:	601a      	str	r2, [r3, #0]
}
 8002b84:	46c0      	nop			@ (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	2000000c 	.word	0x2000000c
 8002b90:	2000058c 	.word	0x2000058c

08002b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  return uwTick;
 8002b98:	4b02      	ldr	r3, [pc, #8]	@ (8002ba4 <HAL_GetTick+0x10>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	2000058c 	.word	0x2000058c

08002ba8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a06      	ldr	r2, [pc, #24]	@ (8002bd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
}
 8002bc2:	46c0      	nop			@ (mov r8, r8)
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b002      	add	sp, #8
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	fffff9ff 	.word	0xfffff9ff

08002bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	0002      	movs	r2, r0
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002be6:	d809      	bhi.n	8002bfc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be8:	1dfb      	adds	r3, r7, #7
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	001a      	movs	r2, r3
 8002bee:	231f      	movs	r3, #31
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <__NVIC_EnableIRQ+0x30>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4091      	lsls	r1, r2
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002bfc:	46c0      	nop			@ (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	0002      	movs	r2, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	1dfb      	adds	r3, r7, #7
 8002c14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c1c:	d828      	bhi.n	8002c70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002cdc <__NVIC_SetPriority+0xd4>)
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b25b      	sxtb	r3, r3
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	33c0      	adds	r3, #192	@ 0xc0
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	589b      	ldr	r3, [r3, r2]
 8002c2e:	1dfa      	adds	r2, r7, #7
 8002c30:	7812      	ldrb	r2, [r2, #0]
 8002c32:	0011      	movs	r1, r2
 8002c34:	2203      	movs	r2, #3
 8002c36:	400a      	ands	r2, r1
 8002c38:	00d2      	lsls	r2, r2, #3
 8002c3a:	21ff      	movs	r1, #255	@ 0xff
 8002c3c:	4091      	lsls	r1, r2
 8002c3e:	000a      	movs	r2, r1
 8002c40:	43d2      	mvns	r2, r2
 8002c42:	401a      	ands	r2, r3
 8002c44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	22ff      	movs	r2, #255	@ 0xff
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	0018      	movs	r0, r3
 8002c54:	2303      	movs	r3, #3
 8002c56:	4003      	ands	r3, r0
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c5c:	481f      	ldr	r0, [pc, #124]	@ (8002cdc <__NVIC_SetPriority+0xd4>)
 8002c5e:	1dfb      	adds	r3, r7, #7
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	430a      	orrs	r2, r1
 8002c68:	33c0      	adds	r3, #192	@ 0xc0
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c6e:	e031      	b.n	8002cd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce0 <__NVIC_SetPriority+0xd8>)
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	0019      	movs	r1, r3
 8002c78:	230f      	movs	r3, #15
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	3b08      	subs	r3, #8
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3306      	adds	r3, #6
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	18d3      	adds	r3, r2, r3
 8002c86:	3304      	adds	r3, #4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1dfa      	adds	r2, r7, #7
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	0011      	movs	r1, r2
 8002c90:	2203      	movs	r2, #3
 8002c92:	400a      	ands	r2, r1
 8002c94:	00d2      	lsls	r2, r2, #3
 8002c96:	21ff      	movs	r1, #255	@ 0xff
 8002c98:	4091      	lsls	r1, r2
 8002c9a:	000a      	movs	r2, r1
 8002c9c:	43d2      	mvns	r2, r2
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	22ff      	movs	r2, #255	@ 0xff
 8002ca8:	401a      	ands	r2, r3
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	4003      	ands	r3, r0
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb8:	4809      	ldr	r0, [pc, #36]	@ (8002ce0 <__NVIC_SetPriority+0xd8>)
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	001c      	movs	r4, r3
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	4023      	ands	r3, r4
 8002cc4:	3b08      	subs	r3, #8
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	3306      	adds	r3, #6
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	18c3      	adds	r3, r0, r3
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	601a      	str	r2, [r3, #0]
}
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b003      	add	sp, #12
 8002cda:	bd90      	pop	{r4, r7, pc}
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1e5a      	subs	r2, r3, #1
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	045b      	lsls	r3, r3, #17
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d301      	bcc.n	8002cfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e010      	b.n	8002d1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <SysTick_Config+0x44>)
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	3a01      	subs	r2, #1
 8002d02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d04:	2301      	movs	r3, #1
 8002d06:	425b      	negs	r3, r3
 8002d08:	2103      	movs	r1, #3
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7ff ff7c 	bl	8002c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <SysTick_Config+0x44>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d16:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <SysTick_Config+0x44>)
 8002d18:	2207      	movs	r2, #7
 8002d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	e000e010 	.word	0xe000e010

08002d2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	210f      	movs	r1, #15
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	1c02      	adds	r2, r0, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7ff ff5d 	bl	8002c08 <__NVIC_SetPriority>
}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b004      	add	sp, #16
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	0002      	movs	r2, r0
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ff33 	bl	8002bd4 <__NVIC_EnableIRQ>
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b002      	add	sp, #8
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff ffaf 	bl	8002ce4 <SysTick_Config>
 8002d86:	0003      	movs	r3, r0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e04f      	b.n	8002e42 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2225      	movs	r2, #37	@ 0x25
 8002da6:	5c9b      	ldrb	r3, [r3, r2]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d008      	beq.n	8002dc0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2204      	movs	r2, #4
 8002db2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	@ 0x24
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e040      	b.n	8002e42 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	210e      	movs	r1, #14
 8002dcc:	438a      	bics	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dda:	491c      	ldr	r1, [pc, #112]	@ (8002e4c <HAL_DMA_Abort+0xbc>)
 8002ddc:	400a      	ands	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2101      	movs	r1, #1
 8002dec:	438a      	bics	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df4:	221c      	movs	r2, #28
 8002df6:	401a      	ands	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4091      	lsls	r1, r2
 8002e00:	000a      	movs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	490a      	ldr	r1, [pc, #40]	@ (8002e4c <HAL_DMA_Abort+0xbc>)
 8002e22:	400a      	ands	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2225      	movs	r2, #37	@ 0x25
 8002e34:	2101      	movs	r1, #1
 8002e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	@ 0x24
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b002      	add	sp, #8
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	fffffeff 	.word	0xfffffeff

08002e50 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	210f      	movs	r1, #15
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2225      	movs	r2, #37	@ 0x25
 8002e64:	5c9b      	ldrb	r3, [r3, r2]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d006      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e048      	b.n	8002f0c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	210e      	movs	r1, #14
 8002e86:	438a      	bics	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	438a      	bics	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea4:	491d      	ldr	r1, [pc, #116]	@ (8002f1c <HAL_DMA_Abort_IT+0xcc>)
 8002ea6:	400a      	ands	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	221c      	movs	r2, #28
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4091      	lsls	r1, r2
 8002eba:	000a      	movs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ec6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00c      	beq.n	8002eea <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eda:	4910      	ldr	r1, [pc, #64]	@ (8002f1c <HAL_DMA_Abort_IT+0xcc>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ee8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2225      	movs	r2, #37	@ 0x25
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2224      	movs	r2, #36	@ 0x24
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	0010      	movs	r0, r2
 8002f0a:	4798      	blx	r3
    }
  }
  return status;
 8002f0c:	230f      	movs	r3, #15
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	781b      	ldrb	r3, [r3, #0]
}
 8002f12:	0018      	movs	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b004      	add	sp, #16
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	fffffeff 	.word	0xfffffeff

08002f20 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e14e      	b.n	80031d0 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	225c      	movs	r2, #92	@ 0x5c
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	225d      	movs	r2, #93	@ 0x5d
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff fbab 	bl	80026a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2110      	movs	r1, #16
 8002f5a:	438a      	bics	r2, r1
 8002f5c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5e:	f7ff fe19 	bl	8002b94 <HAL_GetTick>
 8002f62:	0003      	movs	r3, r0
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002f66:	e012      	b.n	8002f8e <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002f68:	f7ff fe14 	bl	8002b94 <HAL_GetTick>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b0a      	cmp	r3, #10
 8002f74:	d90b      	bls.n	8002f8e <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	225c      	movs	r2, #92	@ 0x5c
 8002f86:	2103      	movs	r1, #3
 8002f88:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e120      	b.n	80031d0 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2208      	movs	r2, #8
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d0e5      	beq.n	8002f68 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fac:	f7ff fdf2 	bl	8002b94 <HAL_GetTick>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002fb4:	e012      	b.n	8002fdc <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002fb6:	f7ff fded 	bl	8002b94 <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b0a      	cmp	r3, #10
 8002fc2:	d90b      	bls.n	8002fdc <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc8:	2201      	movs	r2, #1
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	225c      	movs	r2, #92	@ 0x5c
 8002fd4:	2103      	movs	r1, #3
 8002fd6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0f9      	b.n	80031d0 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d0e6      	beq.n	8002fb6 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a76      	ldr	r2, [pc, #472]	@ (80031d8 <HAL_FDCAN_Init+0x2b8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d103      	bne.n	800300a <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003002:	4a76      	ldr	r2, [pc, #472]	@ (80031dc <HAL_FDCAN_Init+0x2bc>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7c1b      	ldrb	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2140      	movs	r1, #64	@ 0x40
 800301e:	438a      	bics	r2, r1
 8003020:	619a      	str	r2, [r3, #24]
 8003022:	e007      	b.n	8003034 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2140      	movs	r1, #64	@ 0x40
 8003030:	430a      	orrs	r2, r1
 8003032:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7c5b      	ldrb	r3, [r3, #17]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d109      	bne.n	8003050 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2180      	movs	r1, #128	@ 0x80
 8003048:	01c9      	lsls	r1, r1, #7
 800304a:	430a      	orrs	r2, r1
 800304c:	619a      	str	r2, [r3, #24]
 800304e:	e007      	b.n	8003060 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4961      	ldr	r1, [pc, #388]	@ (80031e0 <HAL_FDCAN_Init+0x2c0>)
 800305c:	400a      	ands	r2, r1
 800305e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7c9b      	ldrb	r3, [r3, #18]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d108      	bne.n	800307a <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	495c      	ldr	r1, [pc, #368]	@ (80031e4 <HAL_FDCAN_Init+0x2c4>)
 8003074:	400a      	ands	r2, r1
 8003076:	619a      	str	r2, [r3, #24]
 8003078:	e008      	b.n	800308c <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2180      	movs	r1, #128	@ 0x80
 8003086:	0149      	lsls	r1, r1, #5
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4a55      	ldr	r2, [pc, #340]	@ (80031e8 <HAL_FDCAN_Init+0x2c8>)
 8003094:	4013      	ands	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	21a4      	movs	r1, #164	@ 0xa4
 80030b0:	438a      	bics	r2, r1
 80030b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2110      	movs	r1, #16
 80030c0:	438a      	bics	r2, r1
 80030c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d108      	bne.n	80030de <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2104      	movs	r1, #4
 80030d8:	430a      	orrs	r2, r1
 80030da:	619a      	str	r2, [r3, #24]
 80030dc:	e02c      	b.n	8003138 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d028      	beq.n	8003138 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d01c      	beq.n	8003128 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	430a      	orrs	r2, r1
 80030fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2110      	movs	r1, #16
 800310a:	430a      	orrs	r2, r1
 800310c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d110      	bne.n	8003138 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2120      	movs	r1, #32
 8003122:	430a      	orrs	r2, r1
 8003124:	619a      	str	r2, [r3, #24]
 8003126:	e007      	b.n	8003138 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2120      	movs	r1, #32
 8003134:	430a      	orrs	r2, r1
 8003136:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	3b01      	subs	r3, #1
 800313e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	3b01      	subs	r3, #1
 8003146:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003148:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003150:	431a      	orrs	r2, r3
 8003152:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	3b01      	subs	r3, #1
 800315a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003160:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003162:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	23c0      	movs	r3, #192	@ 0xc0
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	429a      	cmp	r2, r3
 800316e:	d115      	bne.n	800319c <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003174:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	3b01      	subs	r3, #1
 800317c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800317e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003184:	3b01      	subs	r3, #1
 8003186:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003188:	431a      	orrs	r2, r3
 800318a:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	3b01      	subs	r3, #1
 8003192:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003198:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800319a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	22c0      	movs	r2, #192	@ 0xc0
 80031a2:	5899      	ldr	r1, [r3, r2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	21c0      	movs	r1, #192	@ 0xc0
 80031b0:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 fbf3 	bl	80039a0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	225c      	movs	r2, #92	@ 0x5c
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b004      	add	sp, #16
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40006400 	.word	0x40006400
 80031dc:	40006500 	.word	0x40006500
 80031e0:	ffffbfff 	.word	0xffffbfff
 80031e4:	ffffefff 	.word	0xffffefff
 80031e8:	fffffcff 	.word	0xfffffcff

080031ec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	225c      	movs	r2, #92	@ 0x5c
 80031f8:	5c9b      	ldrb	r3, [r3, r2]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d110      	bne.n	8003222 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	225c      	movs	r2, #92	@ 0x5c
 8003204:	2102      	movs	r1, #2
 8003206:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2101      	movs	r1, #1
 8003214:	438a      	bics	r2, r1
 8003216:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e006      	b.n	8003230 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003226:	2204      	movs	r2, #4
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
  }
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	225c      	movs	r2, #92	@ 0x5c
 8003248:	5c9b      	ldrb	r3, [r3, r2]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d12d      	bne.n	80032ac <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	22c4      	movs	r2, #196	@ 0xc4
 8003256:	589a      	ldr	r2, [r3, r2]
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	039b      	lsls	r3, r3, #14
 800325c:	4013      	ands	r3, r2
 800325e:	d008      	beq.n	8003272 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003264:	2280      	movs	r2, #128	@ 0x80
 8003266:	0092      	lsls	r2, r2, #2
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e023      	b.n	80032ba <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	22c4      	movs	r2, #196	@ 0xc4
 8003278:	589b      	ldr	r3, [r3, r2]
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	2203      	movs	r2, #3
 800327e:	4013      	ands	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fbf5 	bl	8003a78 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2101      	movs	r1, #1
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4091      	lsls	r1, r2
 8003298:	000a      	movs	r2, r1
 800329a:	21cc      	movs	r1, #204	@ 0xcc
 800329c:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800329e:	2201      	movs	r2, #1
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e006      	b.n	80032ba <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b0:	2208      	movs	r2, #8
 80032b2:	431a      	orrs	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
  }
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	@ 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80032d6:	201b      	movs	r0, #27
 80032d8:	183b      	adds	r3, r7, r0
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	215c      	movs	r1, #92	@ 0x5c
 80032de:	5c52      	ldrb	r2, [r2, r1]
 80032e0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80032e2:	183b      	adds	r3, r7, r0
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d000      	beq.n	80032ec <HAL_FDCAN_GetRxMessage+0x28>
 80032ea:	e0ec      	b.n	80034c6 <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b40      	cmp	r3, #64	@ 0x40
 80032f0:	d137      	bne.n	8003362 <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2290      	movs	r2, #144	@ 0x90
 80032f8:	589b      	ldr	r3, [r3, r2]
 80032fa:	220f      	movs	r2, #15
 80032fc:	4013      	ands	r3, r2
 80032fe:	d108      	bne.n	8003312 <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003304:	2280      	movs	r2, #128	@ 0x80
 8003306:	0052      	lsls	r2, r2, #1
 8003308:	431a      	orrs	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0e0      	b.n	80034d4 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2290      	movs	r2, #144	@ 0x90
 8003318:	589b      	ldr	r3, [r3, r2]
 800331a:	0e1b      	lsrs	r3, r3, #24
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	2b01      	cmp	r3, #1
 8003322:	d10a      	bne.n	800333a <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2280      	movs	r2, #128	@ 0x80
 800332a:	589b      	ldr	r3, [r3, r2]
 800332c:	0a5b      	lsrs	r3, r3, #9
 800332e:	2201      	movs	r2, #1
 8003330:	4013      	ands	r3, r2
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003336:	2301      	movs	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2290      	movs	r2, #144	@ 0x90
 8003340:	589b      	ldr	r3, [r3, r2]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	2203      	movs	r2, #3
 8003346:	4013      	ands	r3, r2
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	18d3      	adds	r3, r2, r3
 800334c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	0013      	movs	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	189b      	adds	r3, r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	18cb      	adds	r3, r1, r3
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003360:	e036      	b.n	80033d0 <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2298      	movs	r2, #152	@ 0x98
 8003368:	589b      	ldr	r3, [r3, r2]
 800336a:	220f      	movs	r2, #15
 800336c:	4013      	ands	r3, r2
 800336e:	d108      	bne.n	8003382 <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003374:	2280      	movs	r2, #128	@ 0x80
 8003376:	0052      	lsls	r2, r2, #1
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0a8      	b.n	80034d4 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2298      	movs	r2, #152	@ 0x98
 8003388:	589b      	ldr	r3, [r3, r2]
 800338a:	0e1b      	lsrs	r3, r3, #24
 800338c:	2201      	movs	r2, #1
 800338e:	4013      	ands	r3, r2
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10a      	bne.n	80033aa <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2280      	movs	r2, #128	@ 0x80
 800339a:	589b      	ldr	r3, [r3, r2]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	2201      	movs	r2, #1
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80033a6:	2301      	movs	r3, #1
 80033a8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2298      	movs	r2, #152	@ 0x98
 80033b0:	589b      	ldr	r3, [r3, r2]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	2203      	movs	r2, #3
 80033b6:	4013      	ands	r3, r2
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	18d3      	adds	r3, r2, r3
 80033bc:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	0013      	movs	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	189b      	adds	r3, r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	18cb      	adds	r3, r1, r3
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2380      	movs	r3, #128	@ 0x80
 80033d6:	05db      	lsls	r3, r3, #23
 80033d8:	401a      	ands	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	0c9b      	lsrs	r3, r3, #18
 80033ec:	055b      	lsls	r3, r3, #21
 80033ee:	0d5a      	lsrs	r2, r3, #21
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e005      	b.n	8003402 <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	08da      	lsrs	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	@ 0x80
 8003408:	059b      	lsls	r3, r3, #22
 800340a:	401a      	ands	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0fdb      	lsrs	r3, r3, #31
 8003416:	07da      	lsls	r2, r3, #31
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	3304      	adds	r3, #4
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	0c1a      	lsrs	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	220f      	movs	r2, #15
 8003436:	401a      	ands	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	035b      	lsls	r3, r3, #13
 8003444:	401a      	ands	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	039b      	lsls	r3, r3, #14
 8003452:	401a      	ands	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	0e1b      	lsrs	r3, r3, #24
 800345e:	227f      	movs	r2, #127	@ 0x7f
 8003460:	401a      	ands	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0fda      	lsrs	r2, r3, #31
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	3304      	adds	r3, #4
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003478:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
 800347e:	e00a      	b.n	8003496 <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	18d2      	adds	r2, r2, r3
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	18cb      	adds	r3, r1, r3
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	3301      	adds	r3, #1
 8003494:	623b      	str	r3, [r7, #32]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	4a10      	ldr	r2, [pc, #64]	@ (80034dc <HAL_FDCAN_GetRxMessage+0x218>)
 800349c:	5cd3      	ldrb	r3, [r2, r3]
 800349e:	001a      	movs	r2, r3
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d3ec      	bcc.n	8003480 <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b40      	cmp	r3, #64	@ 0x40
 80034aa:	d105      	bne.n	80034b8 <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2194      	movs	r1, #148	@ 0x94
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	505a      	str	r2, [r3, r1]
 80034b6:	e004      	b.n	80034c2 <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	219c      	movs	r1, #156	@ 0x9c
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e006      	b.n	80034d4 <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ca:	2208      	movs	r2, #8
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
  }
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b00a      	add	sp, #40	@ 0x28
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	080080e0 	.word	0x080080e0

080034e0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80034ec:	2017      	movs	r0, #23
 80034ee:	183b      	adds	r3, r7, r0
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	215c      	movs	r1, #92	@ 0x5c
 80034f4:	5c52      	ldrb	r2, [r2, r1]
 80034f6:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80034f8:	0002      	movs	r2, r0
 80034fa:	18bb      	adds	r3, r7, r2
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d004      	beq.n	800350c <HAL_FDCAN_ActivateNotification+0x2c>
 8003502:	18bb      	adds	r3, r7, r2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d000      	beq.n	800350c <HAL_FDCAN_ActivateNotification+0x2c>
 800350a:	e0b4      	b.n	8003676 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003512:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2207      	movs	r2, #7
 8003518:	4013      	ands	r3, r2
 800351a:	d003      	beq.n	8003524 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2201      	movs	r2, #1
 8003520:	4013      	ands	r3, r2
 8003522:	d034      	beq.n	800358e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2238      	movs	r2, #56	@ 0x38
 8003528:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800352a:	d003      	beq.n	8003534 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2202      	movs	r2, #2
 8003530:	4013      	ands	r3, r2
 8003532:	d02c      	beq.n	800358e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	23e0      	movs	r3, #224	@ 0xe0
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800353c:	d003      	beq.n	8003546 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2204      	movs	r2, #4
 8003542:	4013      	ands	r3, r2
 8003544:	d023      	beq.n	800358e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	23f0      	movs	r3, #240	@ 0xf0
 800354a:	015b      	lsls	r3, r3, #5
 800354c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800354e:	d003      	beq.n	8003558 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2208      	movs	r2, #8
 8003554:	4013      	ands	r3, r2
 8003556:	d01a      	beq.n	800358e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	23e0      	movs	r3, #224	@ 0xe0
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003560:	d003      	beq.n	800356a <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2210      	movs	r2, #16
 8003566:	4013      	ands	r3, r2
 8003568:	d011      	beq.n	800358e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	23c0      	movs	r3, #192	@ 0xc0
 800356e:	029b      	lsls	r3, r3, #10
 8003570:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003572:	d003      	beq.n	800357c <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2220      	movs	r2, #32
 8003578:	4013      	ands	r3, r2
 800357a:	d008      	beq.n	800358e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	23fc      	movs	r3, #252	@ 0xfc
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003584:	d00b      	beq.n	800359e <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2240      	movs	r2, #64	@ 0x40
 800358a:	4013      	ands	r3, r2
 800358c:	d107      	bne.n	800359e <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	430a      	orrs	r2, r1
 800359c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2207      	movs	r2, #7
 80035a2:	4013      	ands	r3, r2
 80035a4:	d003      	beq.n	80035ae <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2201      	movs	r2, #1
 80035aa:	4013      	ands	r3, r2
 80035ac:	d134      	bne.n	8003618 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2238      	movs	r2, #56	@ 0x38
 80035b2:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80035b4:	d003      	beq.n	80035be <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2202      	movs	r2, #2
 80035ba:	4013      	ands	r3, r2
 80035bc:	d12c      	bne.n	8003618 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	23e0      	movs	r3, #224	@ 0xe0
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80035c6:	d003      	beq.n	80035d0 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2204      	movs	r2, #4
 80035cc:	4013      	ands	r3, r2
 80035ce:	d123      	bne.n	8003618 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	23f0      	movs	r3, #240	@ 0xf0
 80035d4:	015b      	lsls	r3, r3, #5
 80035d6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80035d8:	d003      	beq.n	80035e2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2208      	movs	r2, #8
 80035de:	4013      	ands	r3, r2
 80035e0:	d11a      	bne.n	8003618 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	23e0      	movs	r3, #224	@ 0xe0
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80035ea:	d003      	beq.n	80035f4 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2210      	movs	r2, #16
 80035f0:	4013      	ands	r3, r2
 80035f2:	d111      	bne.n	8003618 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	23c0      	movs	r3, #192	@ 0xc0
 80035f8:	029b      	lsls	r3, r3, #10
 80035fa:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80035fc:	d003      	beq.n	8003606 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2220      	movs	r2, #32
 8003602:	4013      	ands	r3, r2
 8003604:	d108      	bne.n	8003618 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	23fc      	movs	r3, #252	@ 0xfc
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800360e:	d00b      	beq.n	8003628 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2240      	movs	r2, #64	@ 0x40
 8003614:	4013      	ands	r3, r2
 8003616:	d007      	beq.n	8003628 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2102      	movs	r1, #2
 8003624:	430a      	orrs	r2, r1
 8003626:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2280      	movs	r2, #128	@ 0x80
 800362c:	4013      	ands	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	22dc      	movs	r2, #220	@ 0xdc
 8003636:	5899      	ldr	r1, [r3, r2]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	430a      	orrs	r2, r1
 8003640:	21dc      	movs	r1, #220	@ 0xdc
 8003642:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	2380      	movs	r3, #128	@ 0x80
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4013      	ands	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	22e0      	movs	r2, #224	@ 0xe0
 8003654:	5899      	ldr	r1, [r3, r2]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	430a      	orrs	r2, r1
 800365e:	21e0      	movs	r1, #224	@ 0xe0
 8003660:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	430a      	orrs	r2, r1
 8003670:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e006      	b.n	8003684 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367a:	2202      	movs	r2, #2
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
  }
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b006      	add	sp, #24
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08c      	sub	sp, #48	@ 0x30
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800369a:	23e0      	movs	r3, #224	@ 0xe0
 800369c:	015b      	lsls	r3, r3, #5
 800369e:	4013      	ands	r3, r2
 80036a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	4013      	ands	r3, r2
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b4:	2207      	movs	r2, #7
 80036b6:	4013      	ands	r3, r2
 80036b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	4013      	ands	r3, r2
 80036c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	2238      	movs	r2, #56	@ 0x38
 80036ce:	4013      	ands	r3, r2
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	4013      	ands	r3, r2
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036e4:	23f1      	movs	r3, #241	@ 0xf1
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	4013      	ands	r3, r2
 80036ea:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	4013      	ands	r3, r2
 80036f6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036fe:	23e0      	movs	r3, #224	@ 0xe0
 8003700:	031b      	lsls	r3, r3, #12
 8003702:	4013      	ands	r3, r2
 8003704:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4013      	ands	r3, r2
 8003710:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003718:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2240      	movs	r2, #64	@ 0x40
 8003726:	4013      	ands	r3, r2
 8003728:	d00b      	beq.n	8003742 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2240      	movs	r2, #64	@ 0x40
 800372e:	4013      	ands	r3, r2
 8003730:	d007      	beq.n	8003742 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2240      	movs	r2, #64	@ 0x40
 8003738:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f000 f916 	bl	800396e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4013      	ands	r3, r2
 800374a:	d01b      	beq.n	8003784 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	2380      	movs	r3, #128	@ 0x80
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4013      	ands	r3, r2
 8003754:	d016      	beq.n	8003784 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	22d8      	movs	r2, #216	@ 0xd8
 800375c:	589b      	ldr	r3, [r3, r2]
 800375e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	22e0      	movs	r2, #224	@ 0xe0
 8003766:	589a      	ldr	r2, [r3, r2]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2280      	movs	r2, #128	@ 0x80
 8003774:	0052      	lsls	r2, r2, #1
 8003776:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0011      	movs	r1, r2
 800377e:	0018      	movs	r0, r3
 8003780:	f000 f8dc 	bl	800393c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003790:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0011      	movs	r1, r2
 8003798:	0018      	movs	r0, r3
 800379a:	f000 f8ac 	bl	80038f6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80037ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0011      	movs	r1, r2
 80037b2:	0018      	movs	r0, r3
 80037b4:	f7fd ff74 	bl	80016a0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80037c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0011      	movs	r1, r2
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 f89b 	bl	8003908 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	d00d      	beq.n	80037f8 <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4013      	ands	r3, r2
 80037e4:	d008      	beq.n	80037f8 <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2280      	movs	r2, #128	@ 0x80
 80037ec:	0092      	lsls	r2, r2, #2
 80037ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f891 	bl	800391a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2280      	movs	r2, #128	@ 0x80
 80037fc:	4013      	ands	r3, r2
 80037fe:	d019      	beq.n	8003834 <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2280      	movs	r2, #128	@ 0x80
 8003804:	4013      	ands	r3, r2
 8003806:	d015      	beq.n	8003834 <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	22d4      	movs	r2, #212	@ 0xd4
 800380e:	589b      	ldr	r3, [r3, r2]
 8003810:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	22dc      	movs	r2, #220	@ 0xdc
 8003818:	589a      	ldr	r2, [r3, r2]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2280      	movs	r2, #128	@ 0x80
 8003826:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f87b 	bl	800392a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	2380      	movs	r3, #128	@ 0x80
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	4013      	ands	r3, r2
 800383c:	d00d      	beq.n	800385a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	019b      	lsls	r3, r3, #6
 8003844:	4013      	ands	r3, r2
 8003846:	d008      	beq.n	800385a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2280      	movs	r2, #128	@ 0x80
 800384e:	0192      	lsls	r2, r2, #6
 8003850:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	0018      	movs	r0, r3
 8003856:	f000 f87a 	bl	800394e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	2380      	movs	r3, #128	@ 0x80
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4013      	ands	r3, r2
 8003862:	d00d      	beq.n	8003880 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	4013      	ands	r3, r2
 800386c:	d008      	beq.n	8003880 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2280      	movs	r2, #128	@ 0x80
 8003874:	0212      	lsls	r2, r2, #8
 8003876:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	0018      	movs	r0, r3
 800387c:	f000 f86f 	bl	800395e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	2380      	movs	r3, #128	@ 0x80
 8003884:	01db      	lsls	r3, r3, #7
 8003886:	4013      	ands	r3, r2
 8003888:	d00f      	beq.n	80038aa <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	2380      	movs	r3, #128	@ 0x80
 800388e:	01db      	lsls	r3, r3, #7
 8003890:	4013      	ands	r3, r2
 8003892:	d00a      	beq.n	80038aa <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2280      	movs	r2, #128	@ 0x80
 800389a:	01d2      	lsls	r2, r2, #7
 800389c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	2280      	movs	r2, #128	@ 0x80
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	0011      	movs	r1, r2
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 f865 	bl	800398e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a3a      	ldr	r2, [r7, #32]
 80038d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 f848 	bl	800397e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b00c      	add	sp, #48	@ 0x30
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b002      	add	sp, #8
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b002      	add	sp, #8
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b002      	add	sp, #8
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b002      	add	sp, #8
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}

080039a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80039a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003a68 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 80039aa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a6c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d105      	bne.n	80039c2 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	22d4      	movs	r2, #212	@ 0xd4
 80039ba:	0092      	lsls	r2, r2, #2
 80039bc:	4694      	mov	ip, r2
 80039be:	4463      	add	r3, ip
 80039c0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2280      	movs	r2, #128	@ 0x80
 80039ce:	589b      	ldr	r3, [r3, r2]
 80039d0:	4a27      	ldr	r2, [pc, #156]	@ (8003a70 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039da:	041a      	lsls	r2, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	2180      	movs	r1, #128	@ 0x80
 80039e4:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3370      	adds	r3, #112	@ 0x70
 80039ea:	001a      	movs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2280      	movs	r2, #128	@ 0x80
 80039f6:	589b      	ldr	r3, [r3, r2]
 80039f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a74 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a02:	061a      	lsls	r2, r3, #24
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	2180      	movs	r1, #128	@ 0x80
 8003a0c:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	33b0      	adds	r3, #176	@ 0xb0
 8003a12:	001a      	movs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	3389      	adds	r3, #137	@ 0x89
 8003a1c:	33ff      	adds	r3, #255	@ 0xff
 8003a1e:	001a      	movs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2298      	movs	r2, #152	@ 0x98
 8003a28:	0092      	lsls	r2, r2, #2
 8003a2a:	189a      	adds	r2, r3, r2
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	229e      	movs	r2, #158	@ 0x9e
 8003a34:	0092      	lsls	r2, r2, #2
 8003a36:	189a      	adds	r2, r3, r2
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e005      	b.n	8003a4e <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	22d4      	movs	r2, #212	@ 0xd4
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	4694      	mov	ip, r2
 8003a56:	4463      	add	r3, ip
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3f1      	bcc.n	8003a42 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	46c0      	nop			@ (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b004      	add	sp, #16
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	4000b400 	.word	0x4000b400
 8003a6c:	40006800 	.word	0x40006800
 8003a70:	ffe0ffff 	.word	0xffe0ffff
 8003a74:	f0ffffff 	.word	0xf0ffffff

08003a78 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003a96:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e00b      	b.n	8003abc <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003aac:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003ab2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ab4:	2280      	movs	r2, #128	@ 0x80
 8003ab6:	05d2      	lsls	r2, r2, #23
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ac6:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003acc:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003ad2:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	0013      	movs	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	189b      	adds	r3, r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	18cb      	adds	r3, r1, r3
 8003aee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3304      	adds	r3, #4
 8003afa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	3304      	adds	r3, #4
 8003b06:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e020      	b.n	8003b50 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3303      	adds	r3, #3
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	18d3      	adds	r3, r2, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	18cb      	adds	r3, r1, r3
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003b26:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	18cb      	adds	r3, r1, r3
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003b34:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	188a      	adds	r2, r1, r2
 8003b3c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003b3e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	3304      	adds	r3, #4
 8003b48:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a05      	ldr	r2, [pc, #20]	@ (8003b6c <FDCAN_CopyMessageToRAM+0xf4>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	001a      	movs	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d3d6      	bcc.n	8003b0e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8003b60:	46c0      	nop			@ (mov r8, r8)
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b008      	add	sp, #32
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	080080e0 	.word	0x080080e0

08003b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7e:	e14d      	b.n	8003e1c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4091      	lsls	r1, r2
 8003b8a:	000a      	movs	r2, r1
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d100      	bne.n	8003b98 <HAL_GPIO_Init+0x28>
 8003b96:	e13e      	b.n	8003e16 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d005      	beq.n	8003bb0 <HAL_GPIO_Init+0x40>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2203      	movs	r2, #3
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d130      	bne.n	8003c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	0013      	movs	r3, r2
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003be6:	2201      	movs	r2, #1
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	409a      	lsls	r2, r3
 8003bec:	0013      	movs	r3, r2
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	401a      	ands	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	409a      	lsls	r2, r3
 8003c04:	0013      	movs	r3, r2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2203      	movs	r2, #3
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d017      	beq.n	8003c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	0013      	movs	r3, r2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d123      	bne.n	8003ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	08da      	lsrs	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3208      	adds	r2, #8
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	58d3      	ldr	r3, [r2, r3]
 8003c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2207      	movs	r2, #7
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	220f      	movs	r2, #15
 8003c72:	409a      	lsls	r2, r3
 8003c74:	0013      	movs	r3, r2
 8003c76:	43da      	mvns	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2107      	movs	r1, #7
 8003c86:	400b      	ands	r3, r1
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	0013      	movs	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	08da      	lsrs	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3208      	adds	r2, #8
 8003c9c:	0092      	lsls	r2, r2, #2
 8003c9e:	6939      	ldr	r1, [r7, #16]
 8003ca0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2203      	movs	r2, #3
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	0013      	movs	r3, r2
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	0013      	movs	r3, r2
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	23c0      	movs	r3, #192	@ 0xc0
 8003cdc:	029b      	lsls	r3, r3, #10
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d100      	bne.n	8003ce4 <HAL_GPIO_Init+0x174>
 8003ce2:	e098      	b.n	8003e16 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ce4:	4a53      	ldr	r2, [pc, #332]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3318      	adds	r3, #24
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	589b      	ldr	r3, [r3, r2]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	220f      	movs	r2, #15
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	0013      	movs	r3, r2
 8003d00:	43da      	mvns	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	23a0      	movs	r3, #160	@ 0xa0
 8003d0c:	05db      	lsls	r3, r3, #23
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d019      	beq.n	8003d46 <HAL_GPIO_Init+0x1d6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a48      	ldr	r2, [pc, #288]	@ (8003e38 <HAL_GPIO_Init+0x2c8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_GPIO_Init+0x1d2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a47      	ldr	r2, [pc, #284]	@ (8003e3c <HAL_GPIO_Init+0x2cc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00d      	beq.n	8003d3e <HAL_GPIO_Init+0x1ce>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a46      	ldr	r2, [pc, #280]	@ (8003e40 <HAL_GPIO_Init+0x2d0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <HAL_GPIO_Init+0x1ca>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a45      	ldr	r2, [pc, #276]	@ (8003e44 <HAL_GPIO_Init+0x2d4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_GPIO_Init+0x1c6>
 8003d32:	2304      	movs	r3, #4
 8003d34:	e008      	b.n	8003d48 <HAL_GPIO_Init+0x1d8>
 8003d36:	2305      	movs	r3, #5
 8003d38:	e006      	b.n	8003d48 <HAL_GPIO_Init+0x1d8>
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e004      	b.n	8003d48 <HAL_GPIO_Init+0x1d8>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e002      	b.n	8003d48 <HAL_GPIO_Init+0x1d8>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_GPIO_Init+0x1d8>
 8003d46:	2300      	movs	r3, #0
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	2103      	movs	r1, #3
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	00d2      	lsls	r2, r2, #3
 8003d50:	4093      	lsls	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d58:	4936      	ldr	r1, [pc, #216]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	3318      	adds	r3, #24
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d66:	4b33      	ldr	r3, [pc, #204]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	035b      	lsls	r3, r3, #13
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d90:	4b28      	ldr	r3, [pc, #160]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43da      	mvns	r2, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	2380      	movs	r3, #128	@ 0x80
 8003da6:	039b      	lsls	r3, r3, #14
 8003da8:	4013      	ands	r3, r2
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003db4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dba:	4a1e      	ldr	r2, [pc, #120]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003dbc:	2384      	movs	r3, #132	@ 0x84
 8003dbe:	58d3      	ldr	r3, [r2, r3]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	029b      	lsls	r3, r3, #10
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003de0:	4914      	ldr	r1, [pc, #80]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003de2:	2284      	movs	r2, #132	@ 0x84
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003de8:	4a12      	ldr	r2, [pc, #72]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003dea:	2380      	movs	r3, #128	@ 0x80
 8003dec:	58d3      	ldr	r3, [r2, r3]
 8003dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	43da      	mvns	r2, r3
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	025b      	lsls	r3, r3, #9
 8003e02:	4013      	ands	r3, r2
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e0e:	4909      	ldr	r1, [pc, #36]	@ (8003e34 <HAL_GPIO_Init+0x2c4>)
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	40da      	lsrs	r2, r3
 8003e24:	1e13      	subs	r3, r2, #0
 8003e26:	d000      	beq.n	8003e2a <HAL_GPIO_Init+0x2ba>
 8003e28:	e6aa      	b.n	8003b80 <HAL_GPIO_Init+0x10>
  }
}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	46c0      	nop			@ (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b006      	add	sp, #24
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021800 	.word	0x40021800
 8003e38:	50000400 	.word	0x50000400
 8003e3c:	50000800 	.word	0x50000800
 8003e40:	50000c00 	.word	0x50000c00
 8003e44:	50001000 	.word	0x50001000

08003e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	000a      	movs	r2, r1
 8003e52:	1cbb      	adds	r3, r7, #2
 8003e54:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	1cba      	adds	r2, r7, #2
 8003e5c:	8812      	ldrh	r2, [r2, #0]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003e62:	230f      	movs	r3, #15
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e003      	b.n	8003e74 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e6c:	230f      	movs	r3, #15
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003e74:	230f      	movs	r3, #15
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	781b      	ldrb	r3, [r3, #0]
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b004      	add	sp, #16
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	0008      	movs	r0, r1
 8003e8c:	0011      	movs	r1, r2
 8003e8e:	1cbb      	adds	r3, r7, #2
 8003e90:	1c02      	adds	r2, r0, #0
 8003e92:	801a      	strh	r2, [r3, #0]
 8003e94:	1c7b      	adds	r3, r7, #1
 8003e96:	1c0a      	adds	r2, r1, #0
 8003e98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e9a:	1c7b      	adds	r3, r7, #1
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ea2:	1cbb      	adds	r3, r7, #2
 8003ea4:	881a      	ldrh	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eaa:	e003      	b.n	8003eb4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eac:	1cbb      	adds	r3, r7, #2
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003eb4:	46c0      	nop			@ (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	000a      	movs	r2, r1
 8003ec6:	1cbb      	adds	r3, r7, #2
 8003ec8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ed0:	1cbb      	adds	r3, r7, #2
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	041a      	lsls	r2, r3, #16
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	1cb9      	adds	r1, r7, #2
 8003ee0:	8809      	ldrh	r1, [r1, #0]
 8003ee2:	400b      	ands	r3, r1
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	619a      	str	r2, [r3, #24]
}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b004      	add	sp, #16
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003efc:	4b19      	ldr	r3, [pc, #100]	@ (8003f64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a19      	ldr	r2, [pc, #100]	@ (8003f68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	4b17      	ldr	r3, [pc, #92]	@ (8003f64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	2380      	movs	r3, #128	@ 0x80
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d11f      	bne.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003f18:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	0013      	movs	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4912      	ldr	r1, [pc, #72]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fc f8f4 	bl	8000114 <__udivsi3>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	3301      	adds	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f32:	e008      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e001      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e009      	b.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f46:	4b07      	ldr	r3, [pc, #28]	@ (8003f64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	2380      	movs	r3, #128	@ 0x80
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	2380      	movs	r3, #128	@ 0x80
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d0ed      	beq.n	8003f34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	40007000 	.word	0x40007000
 8003f68:	fffff9ff 	.word	0xfffff9ff
 8003f6c:	20000004 	.word	0x20000004
 8003f70:	000f4240 	.word	0x000f4240

08003f74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	23e0      	movs	r3, #224	@ 0xe0
 8003f7e:	01db      	lsls	r3, r3, #7
 8003f80:	4013      	ands	r3, r2
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f000 fb50 	bl	8004640 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d100      	bne.n	8003fac <HAL_RCC_OscConfig+0x20>
 8003faa:	e07c      	b.n	80040a6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fac:	4bc3      	ldr	r3, [pc, #780]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2238      	movs	r2, #56	@ 0x38
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb6:	4bc1      	ldr	r3, [pc, #772]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d102      	bne.n	8003fcc <HAL_RCC_OscConfig+0x40>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d002      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	4bba      	ldr	r3, [pc, #744]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	029b      	lsls	r3, r3, #10
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d062      	beq.n	80040a4 <HAL_RCC_OscConfig+0x118>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d15e      	bne.n	80040a4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e32a      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	2380      	movs	r3, #128	@ 0x80
 8003ff0:	025b      	lsls	r3, r3, #9
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_OscConfig+0x7a>
 8003ff6:	4bb1      	ldr	r3, [pc, #708]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4bb0      	ldr	r3, [pc, #704]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8003ffc:	2180      	movs	r1, #128	@ 0x80
 8003ffe:	0249      	lsls	r1, r1, #9
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e020      	b.n	8004048 <HAL_RCC_OscConfig+0xbc>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	23a0      	movs	r3, #160	@ 0xa0
 800400c:	02db      	lsls	r3, r3, #11
 800400e:	429a      	cmp	r2, r3
 8004010:	d10e      	bne.n	8004030 <HAL_RCC_OscConfig+0xa4>
 8004012:	4baa      	ldr	r3, [pc, #680]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4ba9      	ldr	r3, [pc, #676]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004018:	2180      	movs	r1, #128	@ 0x80
 800401a:	02c9      	lsls	r1, r1, #11
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	4ba6      	ldr	r3, [pc, #664]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4ba5      	ldr	r3, [pc, #660]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004026:	2180      	movs	r1, #128	@ 0x80
 8004028:	0249      	lsls	r1, r1, #9
 800402a:	430a      	orrs	r2, r1
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e00b      	b.n	8004048 <HAL_RCC_OscConfig+0xbc>
 8004030:	4ba2      	ldr	r3, [pc, #648]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4ba1      	ldr	r3, [pc, #644]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004036:	49a2      	ldr	r1, [pc, #648]	@ (80042c0 <HAL_RCC_OscConfig+0x334>)
 8004038:	400a      	ands	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	4b9f      	ldr	r3, [pc, #636]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b9e      	ldr	r3, [pc, #632]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004042:	49a0      	ldr	r1, [pc, #640]	@ (80042c4 <HAL_RCC_OscConfig+0x338>)
 8004044:	400a      	ands	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d014      	beq.n	800407a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fda0 	bl	8002b94 <HAL_GetTick>
 8004054:	0003      	movs	r3, r0
 8004056:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800405a:	f7fe fd9b 	bl	8002b94 <HAL_GetTick>
 800405e:	0002      	movs	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b64      	cmp	r3, #100	@ 0x64
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e2e9      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406c:	4b93      	ldr	r3, [pc, #588]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	029b      	lsls	r3, r3, #10
 8004074:	4013      	ands	r3, r2
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0xce>
 8004078:	e015      	b.n	80040a6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fe fd8b 	bl	8002b94 <HAL_GetTick>
 800407e:	0003      	movs	r3, r0
 8004080:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004084:	f7fe fd86 	bl	8002b94 <HAL_GetTick>
 8004088:	0002      	movs	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	@ 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e2d4      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004096:	4b89      	ldr	r3, [pc, #548]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	029b      	lsls	r3, r3, #10
 800409e:	4013      	ands	r3, r2
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0xf8>
 80040a2:	e000      	b.n	80040a6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2202      	movs	r2, #2
 80040ac:	4013      	ands	r3, r2
 80040ae:	d100      	bne.n	80040b2 <HAL_RCC_OscConfig+0x126>
 80040b0:	e099      	b.n	80041e6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b2:	4b82      	ldr	r3, [pc, #520]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2238      	movs	r2, #56	@ 0x38
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040bc:	4b7f      	ldr	r3, [pc, #508]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2203      	movs	r2, #3
 80040c2:	4013      	ands	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d102      	bne.n	80040d2 <HAL_RCC_OscConfig+0x146>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d002      	beq.n	80040d8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d135      	bne.n	8004144 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d8:	4b78      	ldr	r3, [pc, #480]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	@ 0x80
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4013      	ands	r3, r2
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_OscConfig+0x164>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e2a7      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f0:	4b72      	ldr	r3, [pc, #456]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4a74      	ldr	r2, [pc, #464]	@ (80042c8 <HAL_RCC_OscConfig+0x33c>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	021a      	lsls	r2, r3, #8
 8004100:	4b6e      	ldr	r3, [pc, #440]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d112      	bne.n	8004132 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800410c:	4b6b      	ldr	r3, [pc, #428]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a6e      	ldr	r2, [pc, #440]	@ (80042cc <HAL_RCC_OscConfig+0x340>)
 8004112:	4013      	ands	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	4b68      	ldr	r3, [pc, #416]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004120:	4b66      	ldr	r3, [pc, #408]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0adb      	lsrs	r3, r3, #11
 8004126:	2207      	movs	r2, #7
 8004128:	4013      	ands	r3, r2
 800412a:	4a69      	ldr	r2, [pc, #420]	@ (80042d0 <HAL_RCC_OscConfig+0x344>)
 800412c:	40da      	lsrs	r2, r3
 800412e:	4b69      	ldr	r3, [pc, #420]	@ (80042d4 <HAL_RCC_OscConfig+0x348>)
 8004130:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004132:	4b69      	ldr	r3, [pc, #420]	@ (80042d8 <HAL_RCC_OscConfig+0x34c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	0018      	movs	r0, r3
 8004138:	f7fe fcd0 	bl	8002adc <HAL_InitTick>
 800413c:	1e03      	subs	r3, r0, #0
 800413e:	d051      	beq.n	80041e4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e27d      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d030      	beq.n	80041ae <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800414c:	4b5b      	ldr	r3, [pc, #364]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a5e      	ldr	r2, [pc, #376]	@ (80042cc <HAL_RCC_OscConfig+0x340>)
 8004152:	4013      	ands	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	4b58      	ldr	r3, [pc, #352]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004160:	4b56      	ldr	r3, [pc, #344]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b55      	ldr	r3, [pc, #340]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004166:	2180      	movs	r1, #128	@ 0x80
 8004168:	0049      	lsls	r1, r1, #1
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fe fd11 	bl	8002b94 <HAL_GetTick>
 8004172:	0003      	movs	r3, r0
 8004174:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004178:	f7fe fd0c 	bl	8002b94 <HAL_GetTick>
 800417c:	0002      	movs	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e25a      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418a:	4b4c      	ldr	r3, [pc, #304]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4013      	ands	r3, r2
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004196:	4b49      	ldr	r3, [pc, #292]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4a4b      	ldr	r2, [pc, #300]	@ (80042c8 <HAL_RCC_OscConfig+0x33c>)
 800419c:	4013      	ands	r3, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	021a      	lsls	r2, r3, #8
 80041a6:	4b45      	ldr	r3, [pc, #276]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
 80041ac:	e01b      	b.n	80041e6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80041ae:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b42      	ldr	r3, [pc, #264]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80041b4:	4949      	ldr	r1, [pc, #292]	@ (80042dc <HAL_RCC_OscConfig+0x350>)
 80041b6:	400a      	ands	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fe fceb 	bl	8002b94 <HAL_GetTick>
 80041be:	0003      	movs	r3, r0
 80041c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fe fce6 	bl	8002b94 <HAL_GetTick>
 80041c8:	0002      	movs	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e234      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d6:	4b39      	ldr	r3, [pc, #228]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	2380      	movs	r3, #128	@ 0x80
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4013      	ands	r3, r2
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x238>
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2208      	movs	r2, #8
 80041ec:	4013      	ands	r3, r2
 80041ee:	d047      	beq.n	8004280 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041f0:	4b32      	ldr	r3, [pc, #200]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2238      	movs	r2, #56	@ 0x38
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b18      	cmp	r3, #24
 80041fa:	d10a      	bne.n	8004212 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80041fc:	4b2f      	ldr	r3, [pc, #188]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80041fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004200:	2202      	movs	r2, #2
 8004202:	4013      	ands	r3, r2
 8004204:	d03c      	beq.n	8004280 <HAL_RCC_OscConfig+0x2f4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d138      	bne.n	8004280 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e216      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d019      	beq.n	800424e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800421a:	4b28      	ldr	r3, [pc, #160]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 800421c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800421e:	4b27      	ldr	r3, [pc, #156]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004220:	2101      	movs	r1, #1
 8004222:	430a      	orrs	r2, r1
 8004224:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fe fcb5 	bl	8002b94 <HAL_GetTick>
 800422a:	0003      	movs	r3, r0
 800422c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004230:	f7fe fcb0 	bl	8002b94 <HAL_GetTick>
 8004234:	0002      	movs	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1fe      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004242:	4b1e      	ldr	r3, [pc, #120]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004246:	2202      	movs	r2, #2
 8004248:	4013      	ands	r3, r2
 800424a:	d0f1      	beq.n	8004230 <HAL_RCC_OscConfig+0x2a4>
 800424c:	e018      	b.n	8004280 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800424e:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004250:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004252:	4b1a      	ldr	r3, [pc, #104]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004254:	2101      	movs	r1, #1
 8004256:	438a      	bics	r2, r1
 8004258:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425a:	f7fe fc9b 	bl	8002b94 <HAL_GetTick>
 800425e:	0003      	movs	r3, r0
 8004260:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004264:	f7fe fc96 	bl	8002b94 <HAL_GetTick>
 8004268:	0002      	movs	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e1e4      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004276:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427a:	2202      	movs	r2, #2
 800427c:	4013      	ands	r3, r2
 800427e:	d1f1      	bne.n	8004264 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2204      	movs	r2, #4
 8004286:	4013      	ands	r3, r2
 8004288:	d100      	bne.n	800428c <HAL_RCC_OscConfig+0x300>
 800428a:	e0c7      	b.n	800441c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428c:	231f      	movs	r3, #31
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004294:	4b09      	ldr	r3, [pc, #36]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2238      	movs	r2, #56	@ 0x38
 800429a:	4013      	ands	r3, r2
 800429c:	2b20      	cmp	r3, #32
 800429e:	d11f      	bne.n	80042e0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80042a0:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <HAL_RCC_OscConfig+0x330>)
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	2202      	movs	r2, #2
 80042a6:	4013      	ands	r3, r2
 80042a8:	d100      	bne.n	80042ac <HAL_RCC_OscConfig+0x320>
 80042aa:	e0b7      	b.n	800441c <HAL_RCC_OscConfig+0x490>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d000      	beq.n	80042b6 <HAL_RCC_OscConfig+0x32a>
 80042b4:	e0b2      	b.n	800441c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e1c2      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	40021000 	.word	0x40021000
 80042c0:	fffeffff 	.word	0xfffeffff
 80042c4:	fffbffff 	.word	0xfffbffff
 80042c8:	ffff80ff 	.word	0xffff80ff
 80042cc:	ffffc7ff 	.word	0xffffc7ff
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	20000004 	.word	0x20000004
 80042d8:	20000008 	.word	0x20000008
 80042dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042e0:	4bb5      	ldr	r3, [pc, #724]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80042e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	055b      	lsls	r3, r3, #21
 80042e8:	4013      	ands	r3, r2
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_OscConfig+0x364>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_RCC_OscConfig+0x366>
 80042f0:	2300      	movs	r3, #0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d011      	beq.n	800431a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	4bb0      	ldr	r3, [pc, #704]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80042f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042fa:	4baf      	ldr	r3, [pc, #700]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80042fc:	2180      	movs	r1, #128	@ 0x80
 80042fe:	0549      	lsls	r1, r1, #21
 8004300:	430a      	orrs	r2, r1
 8004302:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004304:	4bac      	ldr	r3, [pc, #688]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004308:	2380      	movs	r3, #128	@ 0x80
 800430a:	055b      	lsls	r3, r3, #21
 800430c:	4013      	ands	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004312:	231f      	movs	r3, #31
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431a:	4ba8      	ldr	r3, [pc, #672]	@ (80045bc <HAL_RCC_OscConfig+0x630>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	2380      	movs	r3, #128	@ 0x80
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4013      	ands	r3, r2
 8004324:	d11a      	bne.n	800435c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004326:	4ba5      	ldr	r3, [pc, #660]	@ (80045bc <HAL_RCC_OscConfig+0x630>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4ba4      	ldr	r3, [pc, #656]	@ (80045bc <HAL_RCC_OscConfig+0x630>)
 800432c:	2180      	movs	r1, #128	@ 0x80
 800432e:	0049      	lsls	r1, r1, #1
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004334:	f7fe fc2e 	bl	8002b94 <HAL_GetTick>
 8004338:	0003      	movs	r3, r0
 800433a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433e:	f7fe fc29 	bl	8002b94 <HAL_GetTick>
 8004342:	0002      	movs	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e177      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004350:	4b9a      	ldr	r3, [pc, #616]	@ (80045bc <HAL_RCC_OscConfig+0x630>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2380      	movs	r3, #128	@ 0x80
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4013      	ands	r3, r2
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x3e6>
 8004364:	4b94      	ldr	r3, [pc, #592]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004366:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004368:	4b93      	ldr	r3, [pc, #588]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800436a:	2101      	movs	r1, #1
 800436c:	430a      	orrs	r2, r1
 800436e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004370:	e01c      	b.n	80043ac <HAL_RCC_OscConfig+0x420>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b05      	cmp	r3, #5
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x408>
 800437a:	4b8f      	ldr	r3, [pc, #572]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800437c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800437e:	4b8e      	ldr	r3, [pc, #568]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004380:	2104      	movs	r1, #4
 8004382:	430a      	orrs	r2, r1
 8004384:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004386:	4b8c      	ldr	r3, [pc, #560]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004388:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800438a:	4b8b      	ldr	r3, [pc, #556]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800438c:	2101      	movs	r1, #1
 800438e:	430a      	orrs	r2, r1
 8004390:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0x420>
 8004394:	4b88      	ldr	r3, [pc, #544]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004396:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004398:	4b87      	ldr	r3, [pc, #540]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800439a:	2101      	movs	r1, #1
 800439c:	438a      	bics	r2, r1
 800439e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043a0:	4b85      	ldr	r3, [pc, #532]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80043a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043a4:	4b84      	ldr	r3, [pc, #528]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80043a6:	2104      	movs	r1, #4
 80043a8:	438a      	bics	r2, r1
 80043aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d014      	beq.n	80043de <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fe fbee 	bl	8002b94 <HAL_GetTick>
 80043b8:	0003      	movs	r3, r0
 80043ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043bc:	e009      	b.n	80043d2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fe fbe9 	bl	8002b94 <HAL_GetTick>
 80043c2:	0002      	movs	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	4a7d      	ldr	r2, [pc, #500]	@ (80045c0 <HAL_RCC_OscConfig+0x634>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e136      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d2:	4b79      	ldr	r3, [pc, #484]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80043d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d6:	2202      	movs	r2, #2
 80043d8:	4013      	ands	r3, r2
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x432>
 80043dc:	e013      	b.n	8004406 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fe fbd9 	bl	8002b94 <HAL_GetTick>
 80043e2:	0003      	movs	r3, r0
 80043e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043e6:	e009      	b.n	80043fc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fe fbd4 	bl	8002b94 <HAL_GetTick>
 80043ec:	0002      	movs	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	4a73      	ldr	r2, [pc, #460]	@ (80045c0 <HAL_RCC_OscConfig+0x634>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e121      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043fc:	4b6e      	ldr	r3, [pc, #440]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80043fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004400:	2202      	movs	r2, #2
 8004402:	4013      	ands	r3, r2
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004406:	231f      	movs	r3, #31
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004410:	4b69      	ldr	r3, [pc, #420]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004414:	4b68      	ldr	r3, [pc, #416]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004416:	496b      	ldr	r1, [pc, #428]	@ (80045c4 <HAL_RCC_OscConfig+0x638>)
 8004418:	400a      	ands	r2, r1
 800441a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2220      	movs	r2, #32
 8004422:	4013      	ands	r3, r2
 8004424:	d039      	beq.n	800449a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01b      	beq.n	8004466 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800442e:	4b62      	ldr	r3, [pc, #392]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b61      	ldr	r3, [pc, #388]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004434:	2180      	movs	r1, #128	@ 0x80
 8004436:	03c9      	lsls	r1, r1, #15
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fe fbaa 	bl	8002b94 <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004446:	f7fe fba5 	bl	8002b94 <HAL_GetTick>
 800444a:	0002      	movs	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0f3      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004458:	4b57      	ldr	r3, [pc, #348]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2380      	movs	r3, #128	@ 0x80
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	4013      	ands	r3, r2
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x4ba>
 8004464:	e019      	b.n	800449a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004466:	4b54      	ldr	r3, [pc, #336]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b53      	ldr	r3, [pc, #332]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800446c:	4956      	ldr	r1, [pc, #344]	@ (80045c8 <HAL_RCC_OscConfig+0x63c>)
 800446e:	400a      	ands	r2, r1
 8004470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fe fb8f 	bl	8002b94 <HAL_GetTick>
 8004476:	0003      	movs	r3, r0
 8004478:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800447c:	f7fe fb8a 	bl	8002b94 <HAL_GetTick>
 8004480:	0002      	movs	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e0d8      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800448e:	4b4a      	ldr	r3, [pc, #296]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	@ 0x80
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	4013      	ands	r3, r2
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d100      	bne.n	80044a4 <HAL_RCC_OscConfig+0x518>
 80044a2:	e0cc      	b.n	800463e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a4:	4b44      	ldr	r3, [pc, #272]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2238      	movs	r2, #56	@ 0x38
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d100      	bne.n	80044b2 <HAL_RCC_OscConfig+0x526>
 80044b0:	e07b      	b.n	80045aa <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d156      	bne.n	8004568 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b3f      	ldr	r3, [pc, #252]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b3e      	ldr	r3, [pc, #248]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80044c0:	4942      	ldr	r1, [pc, #264]	@ (80045cc <HAL_RCC_OscConfig+0x640>)
 80044c2:	400a      	ands	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fe fb65 	bl	8002b94 <HAL_GetTick>
 80044ca:	0003      	movs	r3, r0
 80044cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fe fb60 	bl	8002b94 <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0ae      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e2:	4b35      	ldr	r3, [pc, #212]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	2380      	movs	r3, #128	@ 0x80
 80044e8:	049b      	lsls	r3, r3, #18
 80044ea:	4013      	ands	r3, r2
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ee:	4b32      	ldr	r3, [pc, #200]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	4a37      	ldr	r2, [pc, #220]	@ (80045d0 <HAL_RCC_OscConfig+0x644>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451a:	431a      	orrs	r2, r3
 800451c:	4b26      	ldr	r3, [pc, #152]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800451e:	430a      	orrs	r2, r1
 8004520:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004522:	4b25      	ldr	r3, [pc, #148]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b24      	ldr	r3, [pc, #144]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004528:	2180      	movs	r1, #128	@ 0x80
 800452a:	0449      	lsls	r1, r1, #17
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004530:	4b21      	ldr	r3, [pc, #132]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	4b20      	ldr	r3, [pc, #128]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004536:	2180      	movs	r1, #128	@ 0x80
 8004538:	0549      	lsls	r1, r1, #21
 800453a:	430a      	orrs	r2, r1
 800453c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7fe fb29 	bl	8002b94 <HAL_GetTick>
 8004542:	0003      	movs	r3, r0
 8004544:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004548:	f7fe fb24 	bl	8002b94 <HAL_GetTick>
 800454c:	0002      	movs	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e072      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455a:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	2380      	movs	r3, #128	@ 0x80
 8004560:	049b      	lsls	r3, r3, #18
 8004562:	4013      	ands	r3, r2
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x5bc>
 8004566:	e06a      	b.n	800463e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004568:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800456e:	4917      	ldr	r1, [pc, #92]	@ (80045cc <HAL_RCC_OscConfig+0x640>)
 8004570:	400a      	ands	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fe fb0e 	bl	8002b94 <HAL_GetTick>
 8004578:	0003      	movs	r3, r0
 800457a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457e:	f7fe fb09 	bl	8002b94 <HAL_GetTick>
 8004582:	0002      	movs	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e057      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	2380      	movs	r3, #128	@ 0x80
 8004596:	049b      	lsls	r3, r3, #18
 8004598:	4013      	ands	r3, r2
 800459a:	d1f0      	bne.n	800457e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800459c:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_OscConfig+0x62c>)
 80045a2:	490c      	ldr	r1, [pc, #48]	@ (80045d4 <HAL_RCC_OscConfig+0x648>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	e049      	b.n	800463e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d112      	bne.n	80045d8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e044      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40007000 	.word	0x40007000
 80045c0:	00001388 	.word	0x00001388
 80045c4:	efffffff 	.word	0xefffffff
 80045c8:	ffbfffff 	.word	0xffbfffff
 80045cc:	feffffff 	.word	0xfeffffff
 80045d0:	11c1808c 	.word	0x11c1808c
 80045d4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <HAL_RCC_OscConfig+0x6bc>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2203      	movs	r2, #3
 80045e2:	401a      	ands	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d126      	bne.n	800463a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2270      	movs	r2, #112	@ 0x70
 80045f0:	401a      	ands	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d11f      	bne.n	800463a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	23fe      	movs	r3, #254	@ 0xfe
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	401a      	ands	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d116      	bne.n	800463a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	23f8      	movs	r3, #248	@ 0xf8
 8004610:	039b      	lsls	r3, r3, #14
 8004612:	401a      	ands	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d10e      	bne.n	800463a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	23e0      	movs	r3, #224	@ 0xe0
 8004620:	051b      	lsls	r3, r3, #20
 8004622:	401a      	ands	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d106      	bne.n	800463a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	0f5b      	lsrs	r3, r3, #29
 8004630:	075a      	lsls	r2, r3, #29
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d001      	beq.n	800463e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	0018      	movs	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	b008      	add	sp, #32
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000

0800464c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0e9      	b.n	8004834 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b76      	ldr	r3, [pc, #472]	@ (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2207      	movs	r2, #7
 8004666:	4013      	ands	r3, r2
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d91e      	bls.n	80046ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b73      	ldr	r3, [pc, #460]	@ (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2207      	movs	r2, #7
 8004674:	4393      	bics	r3, r2
 8004676:	0019      	movs	r1, r3
 8004678:	4b70      	ldr	r3, [pc, #448]	@ (800483c <HAL_RCC_ClockConfig+0x1f0>)
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004680:	f7fe fa88 	bl	8002b94 <HAL_GetTick>
 8004684:	0003      	movs	r3, r0
 8004686:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004688:	e009      	b.n	800469e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468a:	f7fe fa83 	bl	8002b94 <HAL_GetTick>
 800468e:	0002      	movs	r2, r0
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	4a6a      	ldr	r2, [pc, #424]	@ (8004840 <HAL_RCC_ClockConfig+0x1f4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0ca      	b.n	8004834 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800469e:	4b67      	ldr	r3, [pc, #412]	@ (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2207      	movs	r2, #7
 80046a4:	4013      	ands	r3, r2
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d1ee      	bne.n	800468a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2202      	movs	r2, #2
 80046b2:	4013      	ands	r3, r2
 80046b4:	d015      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2204      	movs	r2, #4
 80046bc:	4013      	ands	r3, r2
 80046be:	d006      	beq.n	80046ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046c0:	4b60      	ldr	r3, [pc, #384]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	4b5f      	ldr	r3, [pc, #380]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 80046c6:	21e0      	movs	r1, #224	@ 0xe0
 80046c8:	01c9      	lsls	r1, r1, #7
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004848 <HAL_RCC_ClockConfig+0x1fc>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	0019      	movs	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	4b59      	ldr	r3, [pc, #356]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 80046de:	430a      	orrs	r2, r1
 80046e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2201      	movs	r2, #1
 80046e8:	4013      	ands	r3, r2
 80046ea:	d057      	beq.n	800479c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f4:	4b53      	ldr	r3, [pc, #332]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2380      	movs	r3, #128	@ 0x80
 80046fa:	029b      	lsls	r3, r3, #10
 80046fc:	4013      	ands	r3, r2
 80046fe:	d12b      	bne.n	8004758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e097      	b.n	8004834 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d107      	bne.n	800471c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470c:	4b4d      	ldr	r3, [pc, #308]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2380      	movs	r3, #128	@ 0x80
 8004712:	049b      	lsls	r3, r3, #18
 8004714:	4013      	ands	r3, r2
 8004716:	d11f      	bne.n	8004758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e08b      	b.n	8004834 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004724:	4b47      	ldr	r3, [pc, #284]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4013      	ands	r3, r2
 800472e:	d113      	bne.n	8004758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e07f      	b.n	8004834 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d106      	bne.n	800474a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800473c:	4b41      	ldr	r3, [pc, #260]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 800473e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004740:	2202      	movs	r2, #2
 8004742:	4013      	ands	r3, r2
 8004744:	d108      	bne.n	8004758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e074      	b.n	8004834 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474a:	4b3e      	ldr	r3, [pc, #248]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 800474c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474e:	2202      	movs	r2, #2
 8004750:	4013      	ands	r3, r2
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e06d      	b.n	8004834 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004758:	4b3a      	ldr	r3, [pc, #232]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2207      	movs	r2, #7
 800475e:	4393      	bics	r3, r2
 8004760:	0019      	movs	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	4b37      	ldr	r3, [pc, #220]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 8004768:	430a      	orrs	r2, r1
 800476a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fe fa12 	bl	8002b94 <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004774:	e009      	b.n	800478a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004776:	f7fe fa0d 	bl	8002b94 <HAL_GetTick>
 800477a:	0002      	movs	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	4a2f      	ldr	r2, [pc, #188]	@ (8004840 <HAL_RCC_ClockConfig+0x1f4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e054      	b.n	8004834 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	4b2e      	ldr	r3, [pc, #184]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2238      	movs	r2, #56	@ 0x38
 8004790:	401a      	ands	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	429a      	cmp	r2, r3
 800479a:	d1ec      	bne.n	8004776 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800479c:	4b27      	ldr	r3, [pc, #156]	@ (800483c <HAL_RCC_ClockConfig+0x1f0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2207      	movs	r2, #7
 80047a2:	4013      	ands	r3, r2
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d21e      	bcs.n	80047e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b24      	ldr	r3, [pc, #144]	@ (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2207      	movs	r2, #7
 80047b0:	4393      	bics	r3, r2
 80047b2:	0019      	movs	r1, r3
 80047b4:	4b21      	ldr	r3, [pc, #132]	@ (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047bc:	f7fe f9ea 	bl	8002b94 <HAL_GetTick>
 80047c0:	0003      	movs	r3, r0
 80047c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047c4:	e009      	b.n	80047da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c6:	f7fe f9e5 	bl	8002b94 <HAL_GetTick>
 80047ca:	0002      	movs	r2, r0
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004840 <HAL_RCC_ClockConfig+0x1f4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e02c      	b.n	8004834 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047da:	4b18      	ldr	r3, [pc, #96]	@ (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2207      	movs	r2, #7
 80047e0:	4013      	ands	r3, r2
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1ee      	bne.n	80047c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2204      	movs	r2, #4
 80047ee:	4013      	ands	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047f2:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4a15      	ldr	r2, [pc, #84]	@ (800484c <HAL_RCC_ClockConfig+0x200>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	0019      	movs	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004806:	f000 f88d 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 800480a:	0001      	movs	r1, r0
 800480c:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	0a1b      	lsrs	r3, r3, #8
 8004812:	220f      	movs	r2, #15
 8004814:	401a      	ands	r2, r3
 8004816:	4b0e      	ldr	r3, [pc, #56]	@ (8004850 <HAL_RCC_ClockConfig+0x204>)
 8004818:	0092      	lsls	r2, r2, #2
 800481a:	58d3      	ldr	r3, [r2, r3]
 800481c:	221f      	movs	r2, #31
 800481e:	4013      	ands	r3, r2
 8004820:	000a      	movs	r2, r1
 8004822:	40da      	lsrs	r2, r3
 8004824:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <HAL_RCC_ClockConfig+0x208>)
 8004826:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCC_ClockConfig+0x20c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0018      	movs	r0, r3
 800482e:	f7fe f955 	bl	8002adc <HAL_InitTick>
 8004832:	0003      	movs	r3, r0
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b004      	add	sp, #16
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40022000 	.word	0x40022000
 8004840:	00001388 	.word	0x00001388
 8004844:	40021000 	.word	0x40021000
 8004848:	fffff0ff 	.word	0xfffff0ff
 800484c:	ffff8fff 	.word	0xffff8fff
 8004850:	08008080 	.word	0x08008080
 8004854:	20000004 	.word	0x20000004
 8004858:	20000008 	.word	0x20000008

0800485c <HAL_RCC_MCOConfig>:
  *
  * (*) Feature not available on all devices of the family
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08c      	sub	sp, #48	@ 0x30
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8004868:	2010      	movs	r0, #16
 800486a:	183b      	adds	r3, r7, r0
 800486c:	2202      	movs	r2, #2
 800486e:	605a      	str	r2, [r3, #4]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004870:	183b      	adds	r3, r7, r0
 8004872:	2203      	movs	r2, #3
 8004874:	60da      	str	r2, [r3, #12]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8004876:	183b      	adds	r3, r7, r0
 8004878:	2200      	movs	r2, #0
 800487a:	609a      	str	r2, [r3, #8]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	2380      	movs	r3, #128	@ 0x80
 8004880:	055b      	lsls	r3, r3, #21
 8004882:	4013      	ands	r3, r2
 8004884:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	220f      	movs	r2, #15
 800488c:	4013      	ands	r3, r2
 800488e:	22a0      	movs	r2, #160	@ 0xa0
 8004890:	0352      	lsls	r2, r2, #13
 8004892:	4694      	mov	ip, r2
 8004894:	4463      	add	r3, ip
 8004896:	029b      	lsls	r3, r3, #10
 8004898:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	220f      	movs	r2, #15
 80048a0:	4013      	ands	r3, r2
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->IOPENR, (1UL << mco_gpio_index ));
 80048a4:	4b1d      	ldr	r3, [pc, #116]	@ (800491c <HAL_RCC_MCOConfig+0xc0>)
 80048a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048a8:	2201      	movs	r2, #1
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	409a      	lsls	r2, r3
 80048ae:	4b1b      	ldr	r3, [pc, #108]	@ (800491c <HAL_RCC_MCOConfig+0xc0>)
 80048b0:	430a      	orrs	r2, r1
 80048b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	0c1a      	lsrs	r2, r3, #16
 80048ba:	183b      	adds	r3, r7, r0
 80048bc:	601a      	str	r2, [r3, #0]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	0d1b      	lsrs	r3, r3, #20
 80048c2:	22ff      	movs	r2, #255	@ 0xff
 80048c4:	401a      	ands	r2, r3
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80048ca:	183a      	adds	r2, r7, r0
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	0011      	movs	r1, r2
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7ff f94d 	bl	8003b70 <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 80048d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <HAL_RCC_MCOConfig+0x96>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80048dc:	4b0f      	ldr	r3, [pc, #60]	@ (800491c <HAL_RCC_MCOConfig+0xc0>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	0a19      	lsrs	r1, r3, #8
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <HAL_RCC_MCOConfig+0xc0>)
 80048ec:	430a      	orrs	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
#endif /* RCC_MCO2_SUPPORT */
  else
  {
    /* Nothing to do */
  }
}
 80048f0:	e00f      	b.n	8004912 <HAL_RCC_MCOConfig+0xb6>
  else if (mcoindex == RCC_MCO2_INDEX)
 80048f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048f4:	2380      	movs	r3, #128	@ 0x80
 80048f6:	055b      	lsls	r3, r3, #21
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d10a      	bne.n	8004912 <HAL_RCC_MCOConfig+0xb6>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2SEL | RCC_CFGR_MCO2PRE), (RCC_MCOSource | RCC_MCODiv));
 80048fc:	4b07      	ldr	r3, [pc, #28]	@ (800491c <HAL_RCC_MCOConfig+0xc0>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	4a07      	ldr	r2, [pc, #28]	@ (8004920 <HAL_RCC_MCOConfig+0xc4>)
 8004902:	4013      	ands	r3, r2
 8004904:	0019      	movs	r1, r3
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	431a      	orrs	r2, r3
 800490c:	4b03      	ldr	r3, [pc, #12]	@ (800491c <HAL_RCC_MCOConfig+0xc0>)
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	b00c      	add	sp, #48	@ 0x30
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	40021000 	.word	0x40021000
 8004920:	ff00ffff 	.word	0xff00ffff

08004924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800492a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2238      	movs	r2, #56	@ 0x38
 8004930:	4013      	ands	r3, r2
 8004932:	d10f      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004934:	4b39      	ldr	r3, [pc, #228]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	0adb      	lsrs	r3, r3, #11
 800493a:	2207      	movs	r2, #7
 800493c:	4013      	ands	r3, r2
 800493e:	2201      	movs	r2, #1
 8004940:	409a      	lsls	r2, r3
 8004942:	0013      	movs	r3, r2
 8004944:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	4835      	ldr	r0, [pc, #212]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xfc>)
 800494a:	f7fb fbe3 	bl	8000114 <__udivsi3>
 800494e:	0003      	movs	r3, r0
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	e05d      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004954:	4b31      	ldr	r3, [pc, #196]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2238      	movs	r2, #56	@ 0x38
 800495a:	4013      	ands	r3, r2
 800495c:	2b08      	cmp	r3, #8
 800495e:	d102      	bne.n	8004966 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004960:	4b30      	ldr	r3, [pc, #192]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x100>)
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e054      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004966:	4b2d      	ldr	r3, [pc, #180]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2238      	movs	r2, #56	@ 0x38
 800496c:	4013      	ands	r3, r2
 800496e:	2b10      	cmp	r3, #16
 8004970:	d138      	bne.n	80049e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004972:	4b2a      	ldr	r3, [pc, #168]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2203      	movs	r2, #3
 8004978:	4013      	ands	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800497c:	4b27      	ldr	r3, [pc, #156]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	2207      	movs	r2, #7
 8004984:	4013      	ands	r3, r2
 8004986:	3301      	adds	r3, #1
 8004988:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d10d      	bne.n	80049ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	4824      	ldr	r0, [pc, #144]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x100>)
 8004994:	f7fb fbbe 	bl	8000114 <__udivsi3>
 8004998:	0003      	movs	r3, r0
 800499a:	0019      	movs	r1, r3
 800499c:	4b1f      	ldr	r3, [pc, #124]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	227f      	movs	r2, #127	@ 0x7f
 80049a4:	4013      	ands	r3, r2
 80049a6:	434b      	muls	r3, r1
 80049a8:	617b      	str	r3, [r7, #20]
        break;
 80049aa:	e00d      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	481c      	ldr	r0, [pc, #112]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xfc>)
 80049b0:	f7fb fbb0 	bl	8000114 <__udivsi3>
 80049b4:	0003      	movs	r3, r0
 80049b6:	0019      	movs	r1, r3
 80049b8:	4b18      	ldr	r3, [pc, #96]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	227f      	movs	r2, #127	@ 0x7f
 80049c0:	4013      	ands	r3, r2
 80049c2:	434b      	muls	r3, r1
 80049c4:	617b      	str	r3, [r7, #20]
        break;
 80049c6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80049c8:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	0f5b      	lsrs	r3, r3, #29
 80049ce:	2207      	movs	r2, #7
 80049d0:	4013      	ands	r3, r2
 80049d2:	3301      	adds	r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	6978      	ldr	r0, [r7, #20]
 80049da:	f7fb fb9b 	bl	8000114 <__udivsi3>
 80049de:	0003      	movs	r3, r0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e015      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80049e4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2238      	movs	r2, #56	@ 0x38
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d103      	bne.n	80049f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	e00b      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80049f8:	4b08      	ldr	r3, [pc, #32]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2238      	movs	r2, #56	@ 0x38
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b18      	cmp	r3, #24
 8004a02:	d103      	bne.n	8004a0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004a04:	23fa      	movs	r3, #250	@ 0xfa
 8004a06:	01db      	lsls	r3, r3, #7
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e001      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a10:	693b      	ldr	r3, [r7, #16]
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b006      	add	sp, #24
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	007a1200 	.word	0x007a1200

08004a28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a2c:	4b02      	ldr	r3, [pc, #8]	@ (8004a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
}
 8004a30:	0018      	movs	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	20000004 	.word	0x20000004

08004a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a3c:	b5b0      	push	{r4, r5, r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004a40:	f7ff fff2 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a44:	0004      	movs	r4, r0
 8004a46:	f7ff fa95 	bl	8003f74 <LL_RCC_GetAPB1Prescaler>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	0b1a      	lsrs	r2, r3, #12
 8004a4e:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a50:	0092      	lsls	r2, r2, #2
 8004a52:	58d3      	ldr	r3, [r2, r3]
 8004a54:	221f      	movs	r2, #31
 8004a56:	4013      	ands	r3, r2
 8004a58:	40dc      	lsrs	r4, r3
 8004a5a:	0023      	movs	r3, r4
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bdb0      	pop	{r4, r5, r7, pc}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	080080c0 	.word	0x080080c0

08004a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004a70:	2313      	movs	r3, #19
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a78:	2312      	movs	r3, #18
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	2380      	movs	r3, #128	@ 0x80
 8004a86:	029b      	lsls	r3, r3, #10
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d100      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004a8c:	e0ad      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8e:	2011      	movs	r0, #17
 8004a90:	183b      	adds	r3, r7, r0
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a96:	4b47      	ldr	r3, [pc, #284]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a9a:	2380      	movs	r3, #128	@ 0x80
 8004a9c:	055b      	lsls	r3, r3, #21
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d110      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa2:	4b44      	ldr	r3, [pc, #272]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004aa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aa6:	4b43      	ldr	r3, [pc, #268]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004aa8:	2180      	movs	r1, #128	@ 0x80
 8004aaa:	0549      	lsls	r1, r1, #21
 8004aac:	430a      	orrs	r2, r1
 8004aae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ab0:	4b40      	ldr	r3, [pc, #256]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	055b      	lsls	r3, r3, #21
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004abe:	183b      	adds	r3, r7, r0
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004aca:	2180      	movs	r1, #128	@ 0x80
 8004acc:	0049      	lsls	r1, r1, #1
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad2:	f7fe f85f 	bl	8002b94 <HAL_GetTick>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ada:	e00b      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004adc:	f7fe f85a 	bl	8002b94 <HAL_GetTick>
 8004ae0:	0002      	movs	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d904      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004aea:	2313      	movs	r3, #19
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	2203      	movs	r2, #3
 8004af0:	701a      	strb	r2, [r3, #0]
        break;
 8004af2:	e005      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004af4:	4b30      	ldr	r3, [pc, #192]	@ (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	2380      	movs	r3, #128	@ 0x80
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4013      	ands	r3, r2
 8004afe:	d0ed      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004b00:	2313      	movs	r3, #19
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d15e      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b0e:	23c0      	movs	r3, #192	@ 0xc0
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4013      	ands	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d019      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d014      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b26:	4b23      	ldr	r3, [pc, #140]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	4a24      	ldr	r2, [pc, #144]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b30:	4b20      	ldr	r3, [pc, #128]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b34:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b36:	2180      	movs	r1, #128	@ 0x80
 8004b38:	0249      	lsls	r1, r1, #9
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b42:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b44:	491e      	ldr	r1, [pc, #120]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004b46:	400a      	ands	r2, r1
 8004b48:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2201      	movs	r2, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	d016      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fe f81c 	bl	8002b94 <HAL_GetTick>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b60:	e00c      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fe f817 	bl	8002b94 <HAL_GetTick>
 8004b66:	0002      	movs	r2, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	4a15      	ldr	r2, [pc, #84]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d904      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004b72:	2313      	movs	r3, #19
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	2203      	movs	r2, #3
 8004b78:	701a      	strb	r2, [r3, #0]
            break;
 8004b7a:	e004      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b80:	2202      	movs	r2, #2
 8004b82:	4013      	ands	r3, r2
 8004b84:	d0ed      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004b86:	2313      	movs	r3, #19
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b90:	4b08      	ldr	r3, [pc, #32]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b94:	4a09      	ldr	r2, [pc, #36]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b9e:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ba4:	e016      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ba6:	2312      	movs	r3, #18
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	2213      	movs	r2, #19
 8004bac:	18ba      	adds	r2, r7, r2
 8004bae:	7812      	ldrb	r2, [r2, #0]
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	e00f      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	40007000 	.word	0x40007000
 8004bbc:	fffffcff 	.word	0xfffffcff
 8004bc0:	fffeffff 	.word	0xfffeffff
 8004bc4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc8:	2312      	movs	r3, #18
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	2213      	movs	r2, #19
 8004bce:	18ba      	adds	r2, r7, r2
 8004bd0:	7812      	ldrb	r2, [r2, #0]
 8004bd2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bd4:	2311      	movs	r3, #17
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d105      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bde:	4bb6      	ldr	r3, [pc, #728]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be2:	4bb5      	ldr	r3, [pc, #724]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004be4:	49b5      	ldr	r1, [pc, #724]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004be6:	400a      	ands	r2, r1
 8004be8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d009      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf4:	4bb0      	ldr	r3, [pc, #704]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	4393      	bics	r3, r2
 8004bfc:	0019      	movs	r1, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4bad      	ldr	r3, [pc, #692]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c04:	430a      	orrs	r2, r1
 8004c06:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c12:	4ba9      	ldr	r3, [pc, #676]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c16:	220c      	movs	r2, #12
 8004c18:	4393      	bics	r3, r2
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	4ba5      	ldr	r3, [pc, #660]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c22:	430a      	orrs	r2, r1
 8004c24:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c30:	4ba1      	ldr	r3, [pc, #644]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c34:	2230      	movs	r2, #48	@ 0x30
 8004c36:	4393      	bics	r3, r2
 8004c38:	0019      	movs	r1, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	4b9e      	ldr	r3, [pc, #632]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c40:	430a      	orrs	r2, r1
 8004c42:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2210      	movs	r2, #16
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c4e:	4b9a      	ldr	r3, [pc, #616]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c52:	4a9b      	ldr	r2, [pc, #620]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	4b96      	ldr	r3, [pc, #600]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	2380      	movs	r3, #128	@ 0x80
 8004c68:	015b      	lsls	r3, r3, #5
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004c6e:	4b92      	ldr	r3, [pc, #584]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c72:	4a94      	ldr	r2, [pc, #592]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	2380      	movs	r3, #128	@ 0x80
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c8e:	4b8a      	ldr	r3, [pc, #552]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	4a8d      	ldr	r2, [pc, #564]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c9c:	4b86      	ldr	r3, [pc, #536]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4013      	ands	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cae:	4b82      	ldr	r3, [pc, #520]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	4a86      	ldr	r2, [pc, #536]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ccc:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	4a7f      	ldr	r2, [pc, #508]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	4b77      	ldr	r3, [pc, #476]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2240      	movs	r2, #64	@ 0x40
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d009      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cea:	4b73      	ldr	r3, [pc, #460]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cee:	4a79      	ldr	r2, [pc, #484]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	2380      	movs	r3, #128	@ 0x80
 8004d04:	01db      	lsls	r3, r3, #7
 8004d06:	4013      	ands	r3, r2
 8004d08:	d015      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d0a:	4b6b      	ldr	r3, [pc, #428]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	0899      	lsrs	r1, r3, #2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d16:	4b68      	ldr	r3, [pc, #416]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	05db      	lsls	r3, r3, #23
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d106      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d28:	4b63      	ldr	r3, [pc, #396]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	4b62      	ldr	r3, [pc, #392]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d2e:	2180      	movs	r1, #128	@ 0x80
 8004d30:	0249      	lsls	r1, r1, #9
 8004d32:	430a      	orrs	r2, r1
 8004d34:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	2380      	movs	r3, #128	@ 0x80
 8004d3c:	031b      	lsls	r3, r3, #12
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d42:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d46:	2240      	movs	r2, #64	@ 0x40
 8004d48:	4393      	bics	r3, r2
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d50:	4b59      	ldr	r3, [pc, #356]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d52:	430a      	orrs	r2, r1
 8004d54:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	039b      	lsls	r3, r3, #14
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d016      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d62:	4b55      	ldr	r3, [pc, #340]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	4a5c      	ldr	r2, [pc, #368]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d70:	4b51      	ldr	r3, [pc, #324]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d72:	430a      	orrs	r2, r1
 8004d74:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	03db      	lsls	r3, r3, #15
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d106      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004d82:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	4b4c      	ldr	r3, [pc, #304]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d88:	2180      	movs	r1, #128	@ 0x80
 8004d8a:	0449      	lsls	r1, r1, #17
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	03db      	lsls	r3, r3, #15
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d016      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004d9c:	4b46      	ldr	r3, [pc, #280]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da0:	4a4e      	ldr	r2, [pc, #312]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	0019      	movs	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004daa:	4b43      	ldr	r3, [pc, #268]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dac:	430a      	orrs	r2, r1
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	045b      	lsls	r3, r3, #17
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d106      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	4b3d      	ldr	r3, [pc, #244]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dc2:	2180      	movs	r1, #128	@ 0x80
 8004dc4:	0449      	lsls	r1, r1, #17
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	2380      	movs	r3, #128	@ 0x80
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d014      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004dd6:	4b38      	ldr	r3, [pc, #224]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dda:	2203      	movs	r2, #3
 8004ddc:	4393      	bics	r3, r2
 8004dde:	0019      	movs	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	4b34      	ldr	r3, [pc, #208]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004de6:	430a      	orrs	r2, r1
 8004de8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d106      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004df2:	4b31      	ldr	r3, [pc, #196]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	4b30      	ldr	r3, [pc, #192]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004df8:	2180      	movs	r1, #128	@ 0x80
 8004dfa:	0249      	lsls	r1, r1, #9
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	2380      	movs	r3, #128	@ 0x80
 8004e06:	019b      	lsls	r3, r3, #6
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d014      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e10:	220c      	movs	r2, #12
 8004e12:	4393      	bics	r3, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e1a:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d106      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e28:	4b23      	ldr	r3, [pc, #140]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	4b22      	ldr	r3, [pc, #136]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e2e:	2180      	movs	r1, #128	@ 0x80
 8004e30:	0249      	lsls	r1, r1, #9
 8004e32:	430a      	orrs	r2, r1
 8004e34:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	2380      	movs	r3, #128	@ 0x80
 8004e3c:	045b      	lsls	r3, r3, #17
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d016      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e42:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e46:	4a22      	ldr	r2, [pc, #136]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e50:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e52:	430a      	orrs	r2, r1
 8004e54:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e5a:	2380      	movs	r3, #128	@ 0x80
 8004e5c:	019b      	lsls	r3, r3, #6
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d106      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e62:	4b15      	ldr	r3, [pc, #84]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e68:	2180      	movs	r1, #128	@ 0x80
 8004e6a:	0449      	lsls	r1, r1, #17
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	2380      	movs	r3, #128	@ 0x80
 8004e76:	049b      	lsls	r3, r3, #18
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d016      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e80:	4a10      	ldr	r2, [pc, #64]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	0019      	movs	r1, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e94:	2380      	movs	r3, #128	@ 0x80
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e9c:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ea2:	2180      	movs	r1, #128	@ 0x80
 8004ea4:	0449      	lsls	r1, r1, #17
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004eaa:	2312      	movs	r3, #18
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	781b      	ldrb	r3, [r3, #0]
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b006      	add	sp, #24
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	efffffff 	.word	0xefffffff
 8004ec0:	fffff3ff 	.word	0xfffff3ff
 8004ec4:	fffffcff 	.word	0xfffffcff
 8004ec8:	fff3ffff 	.word	0xfff3ffff
 8004ecc:	ffcfffff 	.word	0xffcfffff
 8004ed0:	ffffcfff 	.word	0xffffcfff
 8004ed4:	ffff3fff 	.word	0xffff3fff
 8004ed8:	ffbfffff 	.word	0xffbfffff
 8004edc:	feffffff 	.word	0xfeffffff

08004ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e04a      	b.n	8004f88 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	223d      	movs	r2, #61	@ 0x3d
 8004ef6:	5c9b      	ldrb	r3, [r3, r2]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	223c      	movs	r2, #60	@ 0x3c
 8004f02:	2100      	movs	r1, #0
 8004f04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7fd fc3d 	bl	8002788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	223d      	movs	r2, #61	@ 0x3d
 8004f12:	2102      	movs	r1, #2
 8004f14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	0019      	movs	r1, r3
 8004f20:	0010      	movs	r0, r2
 8004f22:	f000 fa47 	bl	80053b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2248      	movs	r2, #72	@ 0x48
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	223e      	movs	r2, #62	@ 0x3e
 8004f32:	2101      	movs	r1, #1
 8004f34:	5499      	strb	r1, [r3, r2]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	223f      	movs	r2, #63	@ 0x3f
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	5499      	strb	r1, [r3, r2]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2240      	movs	r2, #64	@ 0x40
 8004f42:	2101      	movs	r1, #1
 8004f44:	5499      	strb	r1, [r3, r2]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2241      	movs	r2, #65	@ 0x41
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	5499      	strb	r1, [r3, r2]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2242      	movs	r2, #66	@ 0x42
 8004f52:	2101      	movs	r1, #1
 8004f54:	5499      	strb	r1, [r3, r2]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2243      	movs	r2, #67	@ 0x43
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2244      	movs	r2, #68	@ 0x44
 8004f62:	2101      	movs	r1, #1
 8004f64:	5499      	strb	r1, [r3, r2]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2245      	movs	r2, #69	@ 0x45
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	5499      	strb	r1, [r3, r2]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2246      	movs	r2, #70	@ 0x46
 8004f72:	2101      	movs	r1, #1
 8004f74:	5499      	strb	r1, [r3, r2]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2247      	movs	r2, #71	@ 0x47
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	223d      	movs	r2, #61	@ 0x3d
 8004f82:	2101      	movs	r1, #1
 8004f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	223d      	movs	r2, #61	@ 0x3d
 8004f9c:	5c9b      	ldrb	r3, [r3, r2]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d001      	beq.n	8004fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e03f      	b.n	8005028 <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	223d      	movs	r2, #61	@ 0x3d
 8004fac:	2102      	movs	r1, #2
 8004fae:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005030 <HAL_TIM_Base_Start+0xa0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d014      	beq.n	8004fe4 <HAL_TIM_Base_Start+0x54>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	2380      	movs	r3, #128	@ 0x80
 8004fc0:	05db      	lsls	r3, r3, #23
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d00e      	beq.n	8004fe4 <HAL_TIM_Base_Start+0x54>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1a      	ldr	r2, [pc, #104]	@ (8005034 <HAL_TIM_Base_Start+0xa4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <HAL_TIM_Base_Start+0x54>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a18      	ldr	r2, [pc, #96]	@ (8005038 <HAL_TIM_Base_Start+0xa8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_TIM_Base_Start+0x54>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a17      	ldr	r2, [pc, #92]	@ (800503c <HAL_TIM_Base_Start+0xac>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d116      	bne.n	8005012 <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	4a15      	ldr	r2, [pc, #84]	@ (8005040 <HAL_TIM_Base_Start+0xb0>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d016      	beq.n	8005024 <HAL_TIM_Base_Start+0x94>
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	2380      	movs	r3, #128	@ 0x80
 8004ffa:	025b      	lsls	r3, r3, #9
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d011      	beq.n	8005024 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2101      	movs	r1, #1
 800500c:	430a      	orrs	r2, r1
 800500e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005010:	e008      	b.n	8005024 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2101      	movs	r1, #1
 800501e:	430a      	orrs	r2, r1
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e000      	b.n	8005026 <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005024:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b004      	add	sp, #16
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40014000 	.word	0x40014000
 8005040:	00010007 	.word	0x00010007

08005044 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4a0d      	ldr	r2, [pc, #52]	@ (8005088 <HAL_TIM_Base_Stop+0x44>)
 8005054:	4013      	ands	r3, r2
 8005056:	d10d      	bne.n	8005074 <HAL_TIM_Base_Stop+0x30>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	4a0b      	ldr	r2, [pc, #44]	@ (800508c <HAL_TIM_Base_Stop+0x48>)
 8005060:	4013      	ands	r3, r2
 8005062:	d107      	bne.n	8005074 <HAL_TIM_Base_Stop+0x30>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2101      	movs	r1, #1
 8005070:	438a      	bics	r2, r1
 8005072:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	223d      	movs	r2, #61	@ 0x3d
 8005078:	2101      	movs	r1, #1
 800507a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	0018      	movs	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	b002      	add	sp, #8
 8005084:	bd80      	pop	{r7, pc}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	00001111 	.word	0x00001111
 800508c:	00000444 	.word	0x00000444

08005090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	223d      	movs	r2, #61	@ 0x3d
 800509c:	5c9b      	ldrb	r3, [r3, r2]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e047      	b.n	8005138 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	223d      	movs	r2, #61	@ 0x3d
 80050ac:	2102      	movs	r1, #2
 80050ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2101      	movs	r1, #1
 80050bc:	430a      	orrs	r2, r1
 80050be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005140 <HAL_TIM_Base_Start_IT+0xb0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d014      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x64>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	05db      	lsls	r3, r3, #23
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d00e      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x64>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1a      	ldr	r2, [pc, #104]	@ (8005144 <HAL_TIM_Base_Start_IT+0xb4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x64>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a18      	ldr	r2, [pc, #96]	@ (8005148 <HAL_TIM_Base_Start_IT+0xb8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x64>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a17      	ldr	r2, [pc, #92]	@ (800514c <HAL_TIM_Base_Start_IT+0xbc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d116      	bne.n	8005122 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	4a15      	ldr	r2, [pc, #84]	@ (8005150 <HAL_TIM_Base_Start_IT+0xc0>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b06      	cmp	r3, #6
 8005104:	d016      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0xa4>
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	2380      	movs	r3, #128	@ 0x80
 800510a:	025b      	lsls	r3, r3, #9
 800510c:	429a      	cmp	r2, r3
 800510e:	d011      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2101      	movs	r1, #1
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005120:	e008      	b.n	8005134 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2101      	movs	r1, #1
 800512e:	430a      	orrs	r2, r1
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	e000      	b.n	8005136 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	b004      	add	sp, #16
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800
 800514c:	40014000 	.word	0x40014000
 8005150:	00010007 	.word	0x00010007

08005154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2202      	movs	r2, #2
 8005170:	4013      	ands	r3, r2
 8005172:	d021      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2202      	movs	r2, #2
 8005178:	4013      	ands	r3, r2
 800517a:	d01d      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2203      	movs	r2, #3
 8005182:	4252      	negs	r2, r2
 8005184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2203      	movs	r2, #3
 8005194:	4013      	ands	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 f8f2 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e007      	b.n	80051b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 f8e5 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 f8f1 	bl	8005394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2204      	movs	r2, #4
 80051bc:	4013      	ands	r3, r2
 80051be:	d022      	beq.n	8005206 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2204      	movs	r2, #4
 80051c4:	4013      	ands	r3, r2
 80051c6:	d01e      	beq.n	8005206 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2205      	movs	r2, #5
 80051ce:	4252      	negs	r2, r2
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	23c0      	movs	r3, #192	@ 0xc0
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4013      	ands	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f000 f8cb 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 80051ee:	e007      	b.n	8005200 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	0018      	movs	r0, r3
 80051f4:	f000 f8be 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 f8ca 	bl	8005394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2208      	movs	r2, #8
 800520a:	4013      	ands	r3, r2
 800520c:	d021      	beq.n	8005252 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2208      	movs	r2, #8
 8005212:	4013      	ands	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2209      	movs	r2, #9
 800521c:	4252      	negs	r2, r2
 800521e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2204      	movs	r2, #4
 8005224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2203      	movs	r2, #3
 800522e:	4013      	ands	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	0018      	movs	r0, r3
 8005236:	f000 f8a5 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 800523a:	e007      	b.n	800524c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	0018      	movs	r0, r3
 8005240:	f000 f898 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	0018      	movs	r0, r3
 8005248:	f000 f8a4 	bl	8005394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2210      	movs	r2, #16
 8005256:	4013      	ands	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2210      	movs	r2, #16
 800525e:	4013      	ands	r3, r2
 8005260:	d01e      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2211      	movs	r2, #17
 8005268:	4252      	negs	r2, r2
 800526a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2208      	movs	r2, #8
 8005270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	23c0      	movs	r3, #192	@ 0xc0
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4013      	ands	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	0018      	movs	r0, r3
 8005284:	f000 f87e 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 8005288:	e007      	b.n	800529a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0018      	movs	r0, r3
 800528e:	f000 f871 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 f87d 	bl	8005394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4013      	ands	r3, r2
 80052a6:	d00c      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4013      	ands	r3, r2
 80052ae:	d008      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2202      	movs	r2, #2
 80052b6:	4252      	negs	r2, r2
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	0018      	movs	r0, r3
 80052be:	f000 f851 	bl	8005364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2280      	movs	r2, #128	@ 0x80
 80052c6:	4013      	ands	r3, r2
 80052c8:	d104      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	019b      	lsls	r3, r3, #6
 80052d0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052d2:	d00b      	beq.n	80052ec <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2280      	movs	r2, #128	@ 0x80
 80052d8:	4013      	ands	r3, r2
 80052da:	d007      	beq.n	80052ec <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	@ (800535c <HAL_TIM_IRQHandler+0x208>)
 80052e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	0018      	movs	r0, r3
 80052e8:	f000 f97a 	bl	80055e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	d00b      	beq.n	800530e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2280      	movs	r2, #128	@ 0x80
 80052fa:	4013      	ands	r3, r2
 80052fc:	d007      	beq.n	800530e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a17      	ldr	r2, [pc, #92]	@ (8005360 <HAL_TIM_IRQHandler+0x20c>)
 8005304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	0018      	movs	r0, r3
 800530a:	f000 f971 	bl	80055f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2240      	movs	r2, #64	@ 0x40
 8005312:	4013      	ands	r3, r2
 8005314:	d00c      	beq.n	8005330 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2240      	movs	r2, #64	@ 0x40
 800531a:	4013      	ands	r3, r2
 800531c:	d008      	beq.n	8005330 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2241      	movs	r2, #65	@ 0x41
 8005324:	4252      	negs	r2, r2
 8005326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 f83a 	bl	80053a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2220      	movs	r2, #32
 8005334:	4013      	ands	r3, r2
 8005336:	d00c      	beq.n	8005352 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	4013      	ands	r3, r2
 800533e:	d008      	beq.n	8005352 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2221      	movs	r2, #33	@ 0x21
 8005346:	4252      	negs	r2, r2
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	f000 f93f 	bl	80055d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	46bd      	mov	sp, r7
 8005356:	b004      	add	sp, #16
 8005358:	bd80      	pop	{r7, pc}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	ffffdf7f 	.word	0xffffdf7f
 8005360:	fffffeff 	.word	0xfffffeff

08005364 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800536c:	46c0      	nop			@ (mov r8, r8)
 800536e:	46bd      	mov	sp, r7
 8005370:	b002      	add	sp, #8
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537c:	46c0      	nop			@ (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	b002      	add	sp, #8
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800538c:	46c0      	nop			@ (mov r8, r8)
 800538e:	46bd      	mov	sp, r7
 8005390:	b002      	add	sp, #8
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800539c:	46c0      	nop			@ (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b002      	add	sp, #8
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ac:	46c0      	nop			@ (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b002      	add	sp, #8
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3f      	ldr	r2, [pc, #252]	@ (80054c4 <TIM_Base_SetConfig+0x110>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00c      	beq.n	80053e6 <TIM_Base_SetConfig+0x32>
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	05db      	lsls	r3, r3, #23
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d007      	beq.n	80053e6 <TIM_Base_SetConfig+0x32>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a3b      	ldr	r2, [pc, #236]	@ (80054c8 <TIM_Base_SetConfig+0x114>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_Base_SetConfig+0x32>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a3a      	ldr	r2, [pc, #232]	@ (80054cc <TIM_Base_SetConfig+0x118>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d108      	bne.n	80053f8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2270      	movs	r2, #112	@ 0x70
 80053ea:	4393      	bics	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a32      	ldr	r2, [pc, #200]	@ (80054c4 <TIM_Base_SetConfig+0x110>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d01c      	beq.n	800543a <TIM_Base_SetConfig+0x86>
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	2380      	movs	r3, #128	@ 0x80
 8005404:	05db      	lsls	r3, r3, #23
 8005406:	429a      	cmp	r2, r3
 8005408:	d017      	beq.n	800543a <TIM_Base_SetConfig+0x86>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a2e      	ldr	r2, [pc, #184]	@ (80054c8 <TIM_Base_SetConfig+0x114>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <TIM_Base_SetConfig+0x86>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2d      	ldr	r2, [pc, #180]	@ (80054cc <TIM_Base_SetConfig+0x118>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00f      	beq.n	800543a <TIM_Base_SetConfig+0x86>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2c      	ldr	r2, [pc, #176]	@ (80054d0 <TIM_Base_SetConfig+0x11c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00b      	beq.n	800543a <TIM_Base_SetConfig+0x86>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2b      	ldr	r2, [pc, #172]	@ (80054d4 <TIM_Base_SetConfig+0x120>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d007      	beq.n	800543a <TIM_Base_SetConfig+0x86>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2a      	ldr	r2, [pc, #168]	@ (80054d8 <TIM_Base_SetConfig+0x124>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d003      	beq.n	800543a <TIM_Base_SetConfig+0x86>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a29      	ldr	r2, [pc, #164]	@ (80054dc <TIM_Base_SetConfig+0x128>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d108      	bne.n	800544c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4a28      	ldr	r2, [pc, #160]	@ (80054e0 <TIM_Base_SetConfig+0x12c>)
 800543e:	4013      	ands	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2280      	movs	r2, #128	@ 0x80
 8005450:	4393      	bics	r3, r2
 8005452:	001a      	movs	r2, r3
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a13      	ldr	r2, [pc, #76]	@ (80054c4 <TIM_Base_SetConfig+0x110>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0xde>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <TIM_Base_SetConfig+0x120>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0xde>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a14      	ldr	r2, [pc, #80]	@ (80054d8 <TIM_Base_SetConfig+0x124>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0xde>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a13      	ldr	r2, [pc, #76]	@ (80054dc <TIM_Base_SetConfig+0x128>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d103      	bne.n	800549a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2201      	movs	r2, #1
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d106      	bne.n	80054ba <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2201      	movs	r2, #1
 80054b2:	4393      	bics	r3, r2
 80054b4:	001a      	movs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	611a      	str	r2, [r3, #16]
  }
}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b004      	add	sp, #16
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40002000 	.word	0x40002000
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800
 80054e0:	fffffcff 	.word	0xfffffcff

080054e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	223c      	movs	r2, #60	@ 0x3c
 80054f2:	5c9b      	ldrb	r3, [r3, r2]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e05a      	b.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	223c      	movs	r2, #60	@ 0x3c
 8005500:	2101      	movs	r1, #1
 8005502:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	223d      	movs	r2, #61	@ 0x3d
 8005508:	2102      	movs	r1, #2
 800550a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a26      	ldr	r2, [pc, #152]	@ (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a25      	ldr	r2, [pc, #148]	@ (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800552a:	4013      	ands	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2270      	movs	r2, #112	@ 0x70
 800553c:	4393      	bics	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a19      	ldr	r2, [pc, #100]	@ (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d014      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	2380      	movs	r3, #128	@ 0x80
 8005562:	05db      	lsls	r3, r3, #23
 8005564:	429a      	cmp	r2, r3
 8005566:	d00e      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a15      	ldr	r2, [pc, #84]	@ (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a14      	ldr	r2, [pc, #80]	@ (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a12      	ldr	r2, [pc, #72]	@ (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d10c      	bne.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2280      	movs	r2, #128	@ 0x80
 800558a:	4393      	bics	r3, r2
 800558c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	4313      	orrs	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	223d      	movs	r2, #61	@ 0x3d
 80055a4:	2101      	movs	r1, #1
 80055a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	223c      	movs	r2, #60	@ 0x3c
 80055ac:	2100      	movs	r1, #0
 80055ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	0018      	movs	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b004      	add	sp, #16
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	ff0fffff 	.word	0xff0fffff
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40014000 	.word	0x40014000

080055d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055d8:	46c0      	nop			@ (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055e8:	46c0      	nop			@ (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b002      	add	sp, #8
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055f8:	46c0      	nop			@ (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e046      	b.n	80056a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2288      	movs	r2, #136	@ 0x88
 8005616:	589b      	ldr	r3, [r3, r2]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d107      	bne.n	800562c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2284      	movs	r2, #132	@ 0x84
 8005620:	2100      	movs	r1, #0
 8005622:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0018      	movs	r0, r3
 8005628:	f7fd f906 	bl	8002838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2288      	movs	r2, #136	@ 0x88
 8005630:	2124      	movs	r1, #36	@ 0x24
 8005632:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2101      	movs	r1, #1
 8005640:	438a      	bics	r2, r1
 8005642:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	0018      	movs	r0, r3
 8005650:	f000 ffce 	bl	80065f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	0018      	movs	r0, r3
 8005658:	f000 fc74 	bl	8005f44 <UART_SetConfig>
 800565c:	0003      	movs	r3, r0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e01c      	b.n	80056a0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	490d      	ldr	r1, [pc, #52]	@ (80056a8 <HAL_UART_Init+0xa8>)
 8005672:	400a      	ands	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	212a      	movs	r1, #42	@ 0x2a
 8005682:	438a      	bics	r2, r1
 8005684:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2101      	movs	r1, #1
 8005692:	430a      	orrs	r2, r1
 8005694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0018      	movs	r0, r3
 800569a:	f001 f85d 	bl	8006758 <UART_CheckIdleState>
 800569e:	0003      	movs	r3, r0
}
 80056a0:	0018      	movs	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b002      	add	sp, #8
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	ffffb7ff 	.word	0xffffb7ff

080056ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	@ 0x28
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	1dbb      	adds	r3, r7, #6
 80056ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2288      	movs	r2, #136	@ 0x88
 80056c0:	589b      	ldr	r3, [r3, r2]
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d000      	beq.n	80056c8 <HAL_UART_Transmit+0x1c>
 80056c6:	e090      	b.n	80057ea <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_UART_Transmit+0x2a>
 80056ce:	1dbb      	adds	r3, r7, #6
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e088      	b.n	80057ec <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	2380      	movs	r3, #128	@ 0x80
 80056e0:	015b      	lsls	r3, r3, #5
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d109      	bne.n	80056fa <HAL_UART_Transmit+0x4e>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d105      	bne.n	80056fa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2201      	movs	r2, #1
 80056f2:	4013      	ands	r3, r2
 80056f4:	d001      	beq.n	80056fa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e078      	b.n	80057ec <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2290      	movs	r2, #144	@ 0x90
 80056fe:	2100      	movs	r1, #0
 8005700:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2288      	movs	r2, #136	@ 0x88
 8005706:	2121      	movs	r1, #33	@ 0x21
 8005708:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800570a:	f7fd fa43 	bl	8002b94 <HAL_GetTick>
 800570e:	0003      	movs	r3, r0
 8005710:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1dba      	adds	r2, r7, #6
 8005716:	2154      	movs	r1, #84	@ 0x54
 8005718:	8812      	ldrh	r2, [r2, #0]
 800571a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	1dba      	adds	r2, r7, #6
 8005720:	2156      	movs	r1, #86	@ 0x56
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	2380      	movs	r3, #128	@ 0x80
 800572c:	015b      	lsls	r3, r3, #5
 800572e:	429a      	cmp	r2, r3
 8005730:	d108      	bne.n	8005744 <HAL_UART_Transmit+0x98>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	e003      	b.n	800574c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800574c:	e030      	b.n	80057b0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	0013      	movs	r3, r2
 8005758:	2200      	movs	r2, #0
 800575a:	2180      	movs	r1, #128	@ 0x80
 800575c:	f001 f8a6 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8005760:	1e03      	subs	r3, r0, #0
 8005762:	d005      	beq.n	8005770 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2288      	movs	r2, #136	@ 0x88
 8005768:	2120      	movs	r1, #32
 800576a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e03d      	b.n	80057ec <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	001a      	movs	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	05d2      	lsls	r2, r2, #23
 8005782:	0dd2      	lsrs	r2, r2, #23
 8005784:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	3302      	adds	r3, #2
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e007      	b.n	800579e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2256      	movs	r2, #86	@ 0x56
 80057a2:	5a9b      	ldrh	r3, [r3, r2]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b299      	uxth	r1, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2256      	movs	r2, #86	@ 0x56
 80057ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2256      	movs	r2, #86	@ 0x56
 80057b4:	5a9b      	ldrh	r3, [r3, r2]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1c8      	bne.n	800574e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	0013      	movs	r3, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	2140      	movs	r1, #64	@ 0x40
 80057ca:	f001 f86f 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 80057ce:	1e03      	subs	r3, r0, #0
 80057d0:	d005      	beq.n	80057de <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2288      	movs	r2, #136	@ 0x88
 80057d6:	2120      	movs	r1, #32
 80057d8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e006      	b.n	80057ec <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2288      	movs	r2, #136	@ 0x88
 80057e2:	2120      	movs	r1, #32
 80057e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
  }
}
 80057ec:	0018      	movs	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b008      	add	sp, #32
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	1dbb      	adds	r3, r7, #6
 8005800:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	228c      	movs	r2, #140	@ 0x8c
 8005806:	589b      	ldr	r3, [r3, r2]
 8005808:	2b20      	cmp	r3, #32
 800580a:	d14f      	bne.n	80058ac <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_UART_Receive_IT+0x26>
 8005812:	1dbb      	adds	r3, r7, #6
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e047      	b.n	80058ae <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	2380      	movs	r3, #128	@ 0x80
 8005824:	015b      	lsls	r3, r3, #5
 8005826:	429a      	cmp	r2, r3
 8005828:	d109      	bne.n	800583e <HAL_UART_Receive_IT+0x4a>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d105      	bne.n	800583e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2201      	movs	r2, #1
 8005836:	4013      	ands	r3, r2
 8005838:	d001      	beq.n	800583e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e037      	b.n	80058ae <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1b      	ldr	r2, [pc, #108]	@ (80058b8 <HAL_UART_Receive_IT+0xc4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d025      	beq.n	800589a <HAL_UART_Receive_IT+0xa6>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1a      	ldr	r2, [pc, #104]	@ (80058bc <HAL_UART_Receive_IT+0xc8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d020      	beq.n	800589a <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	2380      	movs	r3, #128	@ 0x80
 8005860:	041b      	lsls	r3, r3, #16
 8005862:	4013      	ands	r3, r2
 8005864:	d019      	beq.n	800589a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005866:	f3ef 8310 	mrs	r3, PRIMASK
 800586a:	613b      	str	r3, [r7, #16]
  return(result);
 800586c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	2301      	movs	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f383 8810 	msr	PRIMASK, r3
}
 800587a:	46c0      	nop			@ (mov r8, r8)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2180      	movs	r1, #128	@ 0x80
 8005888:	04c9      	lsls	r1, r1, #19
 800588a:	430a      	orrs	r2, r1
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f383 8810 	msr	PRIMASK, r3
}
 8005898:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800589a:	1dbb      	adds	r3, r7, #6
 800589c:	881a      	ldrh	r2, [r3, #0]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	0018      	movs	r0, r3
 80058a4:	f001 f872 	bl	800698c <UART_Start_Receive_IT>
 80058a8:	0003      	movs	r3, r0
 80058aa:	e000      	b.n	80058ae <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80058ac:	2302      	movs	r3, #2
  }
}
 80058ae:	0018      	movs	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b008      	add	sp, #32
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	40008000 	.word	0x40008000
 80058bc:	40008400 	.word	0x40008400

080058c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c0:	b5b0      	push	{r4, r5, r7, lr}
 80058c2:	b0aa      	sub	sp, #168	@ 0xa8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	22a4      	movs	r2, #164	@ 0xa4
 80058d0:	18b9      	adds	r1, r7, r2
 80058d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	20a0      	movs	r0, #160	@ 0xa0
 80058dc:	1839      	adds	r1, r7, r0
 80058de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	249c      	movs	r4, #156	@ 0x9c
 80058e8:	1939      	adds	r1, r7, r4
 80058ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058ec:	0011      	movs	r1, r2
 80058ee:	18bb      	adds	r3, r7, r2
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4aa2      	ldr	r2, [pc, #648]	@ (8005b7c <HAL_UART_IRQHandler+0x2bc>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	2298      	movs	r2, #152	@ 0x98
 80058f8:	18bd      	adds	r5, r7, r2
 80058fa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80058fc:	18bb      	adds	r3, r7, r2
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d11a      	bne.n	800593a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005904:	187b      	adds	r3, r7, r1
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2220      	movs	r2, #32
 800590a:	4013      	ands	r3, r2
 800590c:	d015      	beq.n	800593a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800590e:	183b      	adds	r3, r7, r0
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2220      	movs	r2, #32
 8005914:	4013      	ands	r3, r2
 8005916:	d105      	bne.n	8005924 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005918:	193b      	adds	r3, r7, r4
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	2380      	movs	r3, #128	@ 0x80
 800591e:	055b      	lsls	r3, r3, #21
 8005920:	4013      	ands	r3, r2
 8005922:	d00a      	beq.n	800593a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005928:	2b00      	cmp	r3, #0
 800592a:	d100      	bne.n	800592e <HAL_UART_IRQHandler+0x6e>
 800592c:	e2dc      	b.n	8005ee8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	0010      	movs	r0, r2
 8005936:	4798      	blx	r3
      }
      return;
 8005938:	e2d6      	b.n	8005ee8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800593a:	2398      	movs	r3, #152	@ 0x98
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d100      	bne.n	8005946 <HAL_UART_IRQHandler+0x86>
 8005944:	e122      	b.n	8005b8c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005946:	239c      	movs	r3, #156	@ 0x9c
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a8c      	ldr	r2, [pc, #560]	@ (8005b80 <HAL_UART_IRQHandler+0x2c0>)
 800594e:	4013      	ands	r3, r2
 8005950:	d106      	bne.n	8005960 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005952:	23a0      	movs	r3, #160	@ 0xa0
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a8a      	ldr	r2, [pc, #552]	@ (8005b84 <HAL_UART_IRQHandler+0x2c4>)
 800595a:	4013      	ands	r3, r2
 800595c:	d100      	bne.n	8005960 <HAL_UART_IRQHandler+0xa0>
 800595e:	e115      	b.n	8005b8c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005960:	23a4      	movs	r3, #164	@ 0xa4
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2201      	movs	r2, #1
 8005968:	4013      	ands	r3, r2
 800596a:	d012      	beq.n	8005992 <HAL_UART_IRQHandler+0xd2>
 800596c:	23a0      	movs	r3, #160	@ 0xa0
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	2380      	movs	r3, #128	@ 0x80
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4013      	ands	r3, r2
 8005978:	d00b      	beq.n	8005992 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2290      	movs	r2, #144	@ 0x90
 8005986:	589b      	ldr	r3, [r3, r2]
 8005988:	2201      	movs	r2, #1
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2190      	movs	r1, #144	@ 0x90
 8005990:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005992:	23a4      	movs	r3, #164	@ 0xa4
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2202      	movs	r2, #2
 800599a:	4013      	ands	r3, r2
 800599c:	d011      	beq.n	80059c2 <HAL_UART_IRQHandler+0x102>
 800599e:	239c      	movs	r3, #156	@ 0x9c
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	4013      	ands	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2202      	movs	r2, #2
 80059b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2290      	movs	r2, #144	@ 0x90
 80059b6:	589b      	ldr	r3, [r3, r2]
 80059b8:	2204      	movs	r2, #4
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2190      	movs	r1, #144	@ 0x90
 80059c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059c2:	23a4      	movs	r3, #164	@ 0xa4
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2204      	movs	r2, #4
 80059ca:	4013      	ands	r3, r2
 80059cc:	d011      	beq.n	80059f2 <HAL_UART_IRQHandler+0x132>
 80059ce:	239c      	movs	r3, #156	@ 0x9c
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2201      	movs	r2, #1
 80059d6:	4013      	ands	r3, r2
 80059d8:	d00b      	beq.n	80059f2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2204      	movs	r2, #4
 80059e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2290      	movs	r2, #144	@ 0x90
 80059e6:	589b      	ldr	r3, [r3, r2]
 80059e8:	2202      	movs	r2, #2
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2190      	movs	r1, #144	@ 0x90
 80059f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059f2:	23a4      	movs	r3, #164	@ 0xa4
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2208      	movs	r2, #8
 80059fa:	4013      	ands	r3, r2
 80059fc:	d017      	beq.n	8005a2e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059fe:	23a0      	movs	r3, #160	@ 0xa0
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2220      	movs	r2, #32
 8005a06:	4013      	ands	r3, r2
 8005a08:	d105      	bne.n	8005a16 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a0a:	239c      	movs	r3, #156	@ 0x9c
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a5b      	ldr	r2, [pc, #364]	@ (8005b80 <HAL_UART_IRQHandler+0x2c0>)
 8005a12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a14:	d00b      	beq.n	8005a2e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2208      	movs	r2, #8
 8005a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2290      	movs	r2, #144	@ 0x90
 8005a22:	589b      	ldr	r3, [r3, r2]
 8005a24:	2208      	movs	r2, #8
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2190      	movs	r1, #144	@ 0x90
 8005a2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a2e:	23a4      	movs	r3, #164	@ 0xa4
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	2380      	movs	r3, #128	@ 0x80
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <HAL_UART_IRQHandler+0x1a4>
 8005a3c:	23a0      	movs	r3, #160	@ 0xa0
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	2380      	movs	r3, #128	@ 0x80
 8005a44:	04db      	lsls	r3, r3, #19
 8005a46:	4013      	ands	r3, r2
 8005a48:	d00c      	beq.n	8005a64 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2280      	movs	r2, #128	@ 0x80
 8005a50:	0112      	lsls	r2, r2, #4
 8005a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2290      	movs	r2, #144	@ 0x90
 8005a58:	589b      	ldr	r3, [r3, r2]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2190      	movs	r1, #144	@ 0x90
 8005a62:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2290      	movs	r2, #144	@ 0x90
 8005a68:	589b      	ldr	r3, [r3, r2]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d100      	bne.n	8005a70 <HAL_UART_IRQHandler+0x1b0>
 8005a6e:	e23d      	b.n	8005eec <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a70:	23a4      	movs	r3, #164	@ 0xa4
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2220      	movs	r2, #32
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d015      	beq.n	8005aa8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a7c:	23a0      	movs	r3, #160	@ 0xa0
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2220      	movs	r2, #32
 8005a84:	4013      	ands	r3, r2
 8005a86:	d106      	bne.n	8005a96 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a88:	239c      	movs	r3, #156	@ 0x9c
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	2380      	movs	r3, #128	@ 0x80
 8005a90:	055b      	lsls	r3, r3, #21
 8005a92:	4013      	ands	r3, r2
 8005a94:	d008      	beq.n	8005aa8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	0010      	movs	r0, r2
 8005aa6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2290      	movs	r2, #144	@ 0x90
 8005aac:	589b      	ldr	r3, [r3, r2]
 8005aae:	2194      	movs	r1, #148	@ 0x94
 8005ab0:	187a      	adds	r2, r7, r1
 8005ab2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2240      	movs	r2, #64	@ 0x40
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b40      	cmp	r3, #64	@ 0x40
 8005ac0:	d004      	beq.n	8005acc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ac2:	187b      	adds	r3, r7, r1
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2228      	movs	r2, #40	@ 0x28
 8005ac8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aca:	d04c      	beq.n	8005b66 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f001 f880 	bl	8006bd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2240      	movs	r2, #64	@ 0x40
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d13c      	bne.n	8005b5c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aea:	2090      	movs	r0, #144	@ 0x90
 8005aec:	183a      	adds	r2, r7, r0
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	2301      	movs	r3, #1
 8005af2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005af6:	f383 8810 	msr	PRIMASK, r3
}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2140      	movs	r1, #64	@ 0x40
 8005b08:	438a      	bics	r2, r1
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	183b      	adds	r3, r7, r0
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b14:	f383 8810 	msr	PRIMASK, r3
}
 8005b18:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2280      	movs	r2, #128	@ 0x80
 8005b1e:	589b      	ldr	r3, [r3, r2]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d016      	beq.n	8005b52 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2280      	movs	r2, #128	@ 0x80
 8005b28:	589b      	ldr	r3, [r3, r2]
 8005b2a:	4a17      	ldr	r2, [pc, #92]	@ (8005b88 <HAL_UART_IRQHandler+0x2c8>)
 8005b2c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2280      	movs	r2, #128	@ 0x80
 8005b32:	589b      	ldr	r3, [r3, r2]
 8005b34:	0018      	movs	r0, r3
 8005b36:	f7fd f98b 	bl	8002e50 <HAL_DMA_Abort_IT>
 8005b3a:	1e03      	subs	r3, r0, #0
 8005b3c:	d01c      	beq.n	8005b78 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2280      	movs	r2, #128	@ 0x80
 8005b42:	589b      	ldr	r3, [r3, r2]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	2180      	movs	r1, #128	@ 0x80
 8005b4a:	5852      	ldr	r2, [r2, r1]
 8005b4c:	0010      	movs	r0, r2
 8005b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e012      	b.n	8005b78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	0018      	movs	r0, r3
 8005b56:	f000 f9e1 	bl	8005f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5a:	e00d      	b.n	8005b78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f000 f9dc 	bl	8005f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e008      	b.n	8005b78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 f9d7 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2290      	movs	r2, #144	@ 0x90
 8005b72:	2100      	movs	r1, #0
 8005b74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b76:	e1b9      	b.n	8005eec <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	46c0      	nop			@ (mov r8, r8)
    return;
 8005b7a:	e1b7      	b.n	8005eec <HAL_UART_IRQHandler+0x62c>
 8005b7c:	0000080f 	.word	0x0000080f
 8005b80:	10000001 	.word	0x10000001
 8005b84:	04000120 	.word	0x04000120
 8005b88:	08006ca1 	.word	0x08006ca1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d000      	beq.n	8005b96 <HAL_UART_IRQHandler+0x2d6>
 8005b94:	e13e      	b.n	8005e14 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b96:	23a4      	movs	r3, #164	@ 0xa4
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d100      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x2e4>
 8005ba2:	e137      	b.n	8005e14 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ba4:	23a0      	movs	r3, #160	@ 0xa0
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2210      	movs	r2, #16
 8005bac:	4013      	ands	r3, r2
 8005bae:	d100      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x2f2>
 8005bb0:	e130      	b.n	8005e14 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2240      	movs	r2, #64	@ 0x40
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b40      	cmp	r3, #64	@ 0x40
 8005bc6:	d000      	beq.n	8005bca <HAL_UART_IRQHandler+0x30a>
 8005bc8:	e0a4      	b.n	8005d14 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2280      	movs	r2, #128	@ 0x80
 8005bce:	589b      	ldr	r3, [r3, r2]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	217e      	movs	r1, #126	@ 0x7e
 8005bd6:	187b      	adds	r3, r7, r1
 8005bd8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005bda:	187b      	adds	r3, r7, r1
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d100      	bne.n	8005be4 <HAL_UART_IRQHandler+0x324>
 8005be2:	e185      	b.n	8005ef0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	225c      	movs	r2, #92	@ 0x5c
 8005be8:	5a9b      	ldrh	r3, [r3, r2]
 8005bea:	187a      	adds	r2, r7, r1
 8005bec:	8812      	ldrh	r2, [r2, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d300      	bcc.n	8005bf4 <HAL_UART_IRQHandler+0x334>
 8005bf2:	e17d      	b.n	8005ef0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	187a      	adds	r2, r7, r1
 8005bf8:	215e      	movs	r1, #94	@ 0x5e
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2280      	movs	r2, #128	@ 0x80
 8005c02:	589b      	ldr	r3, [r3, r2]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d170      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c12:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c18:	2301      	movs	r3, #1
 8005c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1e:	f383 8810 	msr	PRIMASK, r3
}
 8005c22:	46c0      	nop			@ (mov r8, r8)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	49b4      	ldr	r1, [pc, #720]	@ (8005f00 <HAL_UART_IRQHandler+0x640>)
 8005c30:	400a      	ands	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c40:	f3ef 8310 	mrs	r3, PRIMASK
 8005c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c50:	f383 8810 	msr	PRIMASK, r3
}
 8005c54:	46c0      	nop			@ (mov r8, r8)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2101      	movs	r1, #1
 8005c62:	438a      	bics	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]
 8005c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c68:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c6c:	f383 8810 	msr	PRIMASK, r3
}
 8005c70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c72:	f3ef 8310 	mrs	r3, PRIMASK
 8005c76:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c82:	f383 8810 	msr	PRIMASK, r3
}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2140      	movs	r1, #64	@ 0x40
 8005c94:	438a      	bics	r2, r1
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c9a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ca2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	228c      	movs	r2, #140	@ 0x8c
 8005ca8:	2120      	movs	r1, #32
 8005caa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2110      	movs	r1, #16
 8005cd4:	438a      	bics	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2280      	movs	r2, #128	@ 0x80
 8005ce8:	589b      	ldr	r3, [r3, r2]
 8005cea:	0018      	movs	r0, r3
 8005cec:	f7fd f850 	bl	8002d90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	225c      	movs	r2, #92	@ 0x5c
 8005cfa:	5a9a      	ldrh	r2, [r3, r2]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	215e      	movs	r1, #94	@ 0x5e
 8005d00:	5a5b      	ldrh	r3, [r3, r1]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	0011      	movs	r1, r2
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f000 f90d 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d12:	e0ed      	b.n	8005ef0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	225c      	movs	r2, #92	@ 0x5c
 8005d18:	5a99      	ldrh	r1, [r3, r2]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	225e      	movs	r2, #94	@ 0x5e
 8005d1e:	5a9b      	ldrh	r3, [r3, r2]
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	208e      	movs	r0, #142	@ 0x8e
 8005d24:	183b      	adds	r3, r7, r0
 8005d26:	1a8a      	subs	r2, r1, r2
 8005d28:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	225e      	movs	r2, #94	@ 0x5e
 8005d2e:	5a9b      	ldrh	r3, [r3, r2]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d100      	bne.n	8005d38 <HAL_UART_IRQHandler+0x478>
 8005d36:	e0dd      	b.n	8005ef4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005d38:	183b      	adds	r3, r7, r0
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d100      	bne.n	8005d42 <HAL_UART_IRQHandler+0x482>
 8005d40:	e0d8      	b.n	8005ef4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d42:	f3ef 8310 	mrs	r3, PRIMASK
 8005d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d48:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d4a:	2488      	movs	r4, #136	@ 0x88
 8005d4c:	193a      	adds	r2, r7, r4
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	2301      	movs	r3, #1
 8005d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f383 8810 	msr	PRIMASK, r3
}
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4967      	ldr	r1, [pc, #412]	@ (8005f04 <HAL_UART_IRQHandler+0x644>)
 8005d68:	400a      	ands	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	193b      	adds	r3, r7, r4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f383 8810 	msr	PRIMASK, r3
}
 8005d78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d80:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d82:	2484      	movs	r4, #132	@ 0x84
 8005d84:	193a      	adds	r2, r7, r4
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	2301      	movs	r3, #1
 8005d8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f383 8810 	msr	PRIMASK, r3
}
 8005d92:	46c0      	nop			@ (mov r8, r8)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	495a      	ldr	r1, [pc, #360]	@ (8005f08 <HAL_UART_IRQHandler+0x648>)
 8005da0:	400a      	ands	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	193b      	adds	r3, r7, r4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	f383 8810 	msr	PRIMASK, r3
}
 8005db0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	228c      	movs	r2, #140	@ 0x8c
 8005db6:	2120      	movs	r1, #32
 8005db8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dca:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dce:	2480      	movs	r4, #128	@ 0x80
 8005dd0:	193a      	adds	r2, r7, r4
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dda:	f383 8810 	msr	PRIMASK, r3
}
 8005dde:	46c0      	nop			@ (mov r8, r8)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2110      	movs	r1, #16
 8005dec:	438a      	bics	r2, r1
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	193b      	adds	r3, r7, r4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df8:	f383 8810 	msr	PRIMASK, r3
}
 8005dfc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e04:	183b      	adds	r3, r7, r0
 8005e06:	881a      	ldrh	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0011      	movs	r1, r2
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 f88d 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e12:	e06f      	b.n	8005ef4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e14:	23a4      	movs	r3, #164	@ 0xa4
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	2380      	movs	r3, #128	@ 0x80
 8005e1c:	035b      	lsls	r3, r3, #13
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d010      	beq.n	8005e44 <HAL_UART_IRQHandler+0x584>
 8005e22:	239c      	movs	r3, #156	@ 0x9c
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	2380      	movs	r3, #128	@ 0x80
 8005e2a:	03db      	lsls	r3, r3, #15
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2280      	movs	r2, #128	@ 0x80
 8005e36:	0352      	lsls	r2, r2, #13
 8005e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f001 fc9f 	bl	8007780 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e42:	e05a      	b.n	8005efa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e44:	23a4      	movs	r3, #164	@ 0xa4
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2280      	movs	r2, #128	@ 0x80
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d016      	beq.n	8005e7e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e50:	23a0      	movs	r3, #160	@ 0xa0
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2280      	movs	r2, #128	@ 0x80
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d106      	bne.n	8005e6a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e5c:	239c      	movs	r3, #156	@ 0x9c
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	2380      	movs	r3, #128	@ 0x80
 8005e64:	041b      	lsls	r3, r3, #16
 8005e66:	4013      	ands	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d042      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	0010      	movs	r0, r2
 8005e7a:	4798      	blx	r3
    }
    return;
 8005e7c:	e03c      	b.n	8005ef8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e7e:	23a4      	movs	r3, #164	@ 0xa4
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2240      	movs	r2, #64	@ 0x40
 8005e86:	4013      	ands	r3, r2
 8005e88:	d00a      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x5e0>
 8005e8a:	23a0      	movs	r3, #160	@ 0xa0
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2240      	movs	r2, #64	@ 0x40
 8005e92:	4013      	ands	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f000 ff18 	bl	8006cce <UART_EndTransmit_IT>
    return;
 8005e9e:	e02c      	b.n	8005efa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ea0:	23a4      	movs	r3, #164	@ 0xa4
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	2380      	movs	r3, #128	@ 0x80
 8005ea8:	041b      	lsls	r3, r3, #16
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d00b      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x606>
 8005eae:	23a0      	movs	r3, #160	@ 0xa0
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	2380      	movs	r3, #128	@ 0x80
 8005eb6:	05db      	lsls	r3, r3, #23
 8005eb8:	4013      	ands	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f001 fc6e 	bl	80077a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ec4:	e019      	b.n	8005efa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ec6:	23a4      	movs	r3, #164	@ 0xa4
 8005ec8:	18fb      	adds	r3, r7, r3
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	2380      	movs	r3, #128	@ 0x80
 8005ece:	045b      	lsls	r3, r3, #17
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d012      	beq.n	8005efa <HAL_UART_IRQHandler+0x63a>
 8005ed4:	23a0      	movs	r3, #160	@ 0xa0
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	da0d      	bge.n	8005efa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f001 fc55 	bl	8007790 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ee6:	e008      	b.n	8005efa <HAL_UART_IRQHandler+0x63a>
      return;
 8005ee8:	46c0      	nop			@ (mov r8, r8)
 8005eea:	e006      	b.n	8005efa <HAL_UART_IRQHandler+0x63a>
    return;
 8005eec:	46c0      	nop			@ (mov r8, r8)
 8005eee:	e004      	b.n	8005efa <HAL_UART_IRQHandler+0x63a>
      return;
 8005ef0:	46c0      	nop			@ (mov r8, r8)
 8005ef2:	e002      	b.n	8005efa <HAL_UART_IRQHandler+0x63a>
      return;
 8005ef4:	46c0      	nop			@ (mov r8, r8)
 8005ef6:	e000      	b.n	8005efa <HAL_UART_IRQHandler+0x63a>
    return;
 8005ef8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b02a      	add	sp, #168	@ 0xa8
 8005efe:	bdb0      	pop	{r4, r5, r7, pc}
 8005f00:	fffffeff 	.word	0xfffffeff
 8005f04:	fffffedf 	.word	0xfffffedf
 8005f08:	effffffe 	.word	0xeffffffe

08005f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f14:	46c0      	nop			@ (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b002      	add	sp, #8
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f24:	46c0      	nop			@ (mov r8, r8)
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b002      	add	sp, #8
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	000a      	movs	r2, r1
 8005f36:	1cbb      	adds	r3, r7, #2
 8005f38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b002      	add	sp, #8
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f44:	b5b0      	push	{r4, r5, r7, lr}
 8005f46:	b090      	sub	sp, #64	@ 0x40
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4c:	231a      	movs	r3, #26
 8005f4e:	2220      	movs	r2, #32
 8005f50:	189b      	adds	r3, r3, r2
 8005f52:	19db      	adds	r3, r3, r7
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	431a      	orrs	r2, r3
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4ac1      	ldr	r2, [pc, #772]	@ (800627c <UART_SetConfig+0x338>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f82:	430b      	orrs	r3, r1
 8005f84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4abc      	ldr	r2, [pc, #752]	@ (8006280 <UART_SetConfig+0x33c>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	0018      	movs	r0, r3
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	68d9      	ldr	r1, [r3, #12]
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	0003      	movs	r3, r0
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4ab6      	ldr	r2, [pc, #728]	@ (8006284 <UART_SetConfig+0x340>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <UART_SetConfig+0x80>
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4ab4      	ldr	r2, [pc, #720]	@ (8006288 <UART_SetConfig+0x344>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	4ab0      	ldr	r2, [pc, #704]	@ (800628c <UART_SetConfig+0x348>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	0019      	movs	r1, r3
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	220f      	movs	r2, #15
 8005fe2:	4393      	bics	r3, r2
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	0003      	movs	r3, r0
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4aa5      	ldr	r2, [pc, #660]	@ (8006290 <UART_SetConfig+0x34c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d131      	bne.n	8006062 <UART_SetConfig+0x11e>
 8005ffe:	4ba5      	ldr	r3, [pc, #660]	@ (8006294 <UART_SetConfig+0x350>)
 8006000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006002:	2203      	movs	r2, #3
 8006004:	4013      	ands	r3, r2
 8006006:	2b03      	cmp	r3, #3
 8006008:	d01d      	beq.n	8006046 <UART_SetConfig+0x102>
 800600a:	d823      	bhi.n	8006054 <UART_SetConfig+0x110>
 800600c:	2b02      	cmp	r3, #2
 800600e:	d00c      	beq.n	800602a <UART_SetConfig+0xe6>
 8006010:	d820      	bhi.n	8006054 <UART_SetConfig+0x110>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <UART_SetConfig+0xd8>
 8006016:	2b01      	cmp	r3, #1
 8006018:	d00e      	beq.n	8006038 <UART_SetConfig+0xf4>
 800601a:	e01b      	b.n	8006054 <UART_SetConfig+0x110>
 800601c:	231b      	movs	r3, #27
 800601e:	2220      	movs	r2, #32
 8006020:	189b      	adds	r3, r3, r2
 8006022:	19db      	adds	r3, r3, r7
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e154      	b.n	80062d4 <UART_SetConfig+0x390>
 800602a:	231b      	movs	r3, #27
 800602c:	2220      	movs	r2, #32
 800602e:	189b      	adds	r3, r3, r2
 8006030:	19db      	adds	r3, r3, r7
 8006032:	2202      	movs	r2, #2
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e14d      	b.n	80062d4 <UART_SetConfig+0x390>
 8006038:	231b      	movs	r3, #27
 800603a:	2220      	movs	r2, #32
 800603c:	189b      	adds	r3, r3, r2
 800603e:	19db      	adds	r3, r3, r7
 8006040:	2204      	movs	r2, #4
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e146      	b.n	80062d4 <UART_SetConfig+0x390>
 8006046:	231b      	movs	r3, #27
 8006048:	2220      	movs	r2, #32
 800604a:	189b      	adds	r3, r3, r2
 800604c:	19db      	adds	r3, r3, r7
 800604e:	2208      	movs	r2, #8
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	e13f      	b.n	80062d4 <UART_SetConfig+0x390>
 8006054:	231b      	movs	r3, #27
 8006056:	2220      	movs	r2, #32
 8006058:	189b      	adds	r3, r3, r2
 800605a:	19db      	adds	r3, r3, r7
 800605c:	2210      	movs	r2, #16
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	e138      	b.n	80062d4 <UART_SetConfig+0x390>
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a8c      	ldr	r2, [pc, #560]	@ (8006298 <UART_SetConfig+0x354>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d131      	bne.n	80060d0 <UART_SetConfig+0x18c>
 800606c:	4b89      	ldr	r3, [pc, #548]	@ (8006294 <UART_SetConfig+0x350>)
 800606e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006070:	220c      	movs	r2, #12
 8006072:	4013      	ands	r3, r2
 8006074:	2b0c      	cmp	r3, #12
 8006076:	d01d      	beq.n	80060b4 <UART_SetConfig+0x170>
 8006078:	d823      	bhi.n	80060c2 <UART_SetConfig+0x17e>
 800607a:	2b08      	cmp	r3, #8
 800607c:	d00c      	beq.n	8006098 <UART_SetConfig+0x154>
 800607e:	d820      	bhi.n	80060c2 <UART_SetConfig+0x17e>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <UART_SetConfig+0x146>
 8006084:	2b04      	cmp	r3, #4
 8006086:	d00e      	beq.n	80060a6 <UART_SetConfig+0x162>
 8006088:	e01b      	b.n	80060c2 <UART_SetConfig+0x17e>
 800608a:	231b      	movs	r3, #27
 800608c:	2220      	movs	r2, #32
 800608e:	189b      	adds	r3, r3, r2
 8006090:	19db      	adds	r3, r3, r7
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e11d      	b.n	80062d4 <UART_SetConfig+0x390>
 8006098:	231b      	movs	r3, #27
 800609a:	2220      	movs	r2, #32
 800609c:	189b      	adds	r3, r3, r2
 800609e:	19db      	adds	r3, r3, r7
 80060a0:	2202      	movs	r2, #2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	e116      	b.n	80062d4 <UART_SetConfig+0x390>
 80060a6:	231b      	movs	r3, #27
 80060a8:	2220      	movs	r2, #32
 80060aa:	189b      	adds	r3, r3, r2
 80060ac:	19db      	adds	r3, r3, r7
 80060ae:	2204      	movs	r2, #4
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e10f      	b.n	80062d4 <UART_SetConfig+0x390>
 80060b4:	231b      	movs	r3, #27
 80060b6:	2220      	movs	r2, #32
 80060b8:	189b      	adds	r3, r3, r2
 80060ba:	19db      	adds	r3, r3, r7
 80060bc:	2208      	movs	r2, #8
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e108      	b.n	80062d4 <UART_SetConfig+0x390>
 80060c2:	231b      	movs	r3, #27
 80060c4:	2220      	movs	r2, #32
 80060c6:	189b      	adds	r3, r3, r2
 80060c8:	19db      	adds	r3, r3, r7
 80060ca:	2210      	movs	r2, #16
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	e101      	b.n	80062d4 <UART_SetConfig+0x390>
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a71      	ldr	r2, [pc, #452]	@ (800629c <UART_SetConfig+0x358>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d131      	bne.n	800613e <UART_SetConfig+0x1fa>
 80060da:	4b6e      	ldr	r3, [pc, #440]	@ (8006294 <UART_SetConfig+0x350>)
 80060dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060de:	2230      	movs	r2, #48	@ 0x30
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b30      	cmp	r3, #48	@ 0x30
 80060e4:	d01d      	beq.n	8006122 <UART_SetConfig+0x1de>
 80060e6:	d823      	bhi.n	8006130 <UART_SetConfig+0x1ec>
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d00c      	beq.n	8006106 <UART_SetConfig+0x1c2>
 80060ec:	d820      	bhi.n	8006130 <UART_SetConfig+0x1ec>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <UART_SetConfig+0x1b4>
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d00e      	beq.n	8006114 <UART_SetConfig+0x1d0>
 80060f6:	e01b      	b.n	8006130 <UART_SetConfig+0x1ec>
 80060f8:	231b      	movs	r3, #27
 80060fa:	2220      	movs	r2, #32
 80060fc:	189b      	adds	r3, r3, r2
 80060fe:	19db      	adds	r3, r3, r7
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	e0e6      	b.n	80062d4 <UART_SetConfig+0x390>
 8006106:	231b      	movs	r3, #27
 8006108:	2220      	movs	r2, #32
 800610a:	189b      	adds	r3, r3, r2
 800610c:	19db      	adds	r3, r3, r7
 800610e:	2202      	movs	r2, #2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e0df      	b.n	80062d4 <UART_SetConfig+0x390>
 8006114:	231b      	movs	r3, #27
 8006116:	2220      	movs	r2, #32
 8006118:	189b      	adds	r3, r3, r2
 800611a:	19db      	adds	r3, r3, r7
 800611c:	2204      	movs	r2, #4
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e0d8      	b.n	80062d4 <UART_SetConfig+0x390>
 8006122:	231b      	movs	r3, #27
 8006124:	2220      	movs	r2, #32
 8006126:	189b      	adds	r3, r3, r2
 8006128:	19db      	adds	r3, r3, r7
 800612a:	2208      	movs	r2, #8
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	e0d1      	b.n	80062d4 <UART_SetConfig+0x390>
 8006130:	231b      	movs	r3, #27
 8006132:	2220      	movs	r2, #32
 8006134:	189b      	adds	r3, r3, r2
 8006136:	19db      	adds	r3, r3, r7
 8006138:	2210      	movs	r2, #16
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e0ca      	b.n	80062d4 <UART_SetConfig+0x390>
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a57      	ldr	r2, [pc, #348]	@ (80062a0 <UART_SetConfig+0x35c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d106      	bne.n	8006156 <UART_SetConfig+0x212>
 8006148:	231b      	movs	r3, #27
 800614a:	2220      	movs	r2, #32
 800614c:	189b      	adds	r3, r3, r2
 800614e:	19db      	adds	r3, r3, r7
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e0be      	b.n	80062d4 <UART_SetConfig+0x390>
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a52      	ldr	r2, [pc, #328]	@ (80062a4 <UART_SetConfig+0x360>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d106      	bne.n	800616e <UART_SetConfig+0x22a>
 8006160:	231b      	movs	r3, #27
 8006162:	2220      	movs	r2, #32
 8006164:	189b      	adds	r3, r3, r2
 8006166:	19db      	adds	r3, r3, r7
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e0b2      	b.n	80062d4 <UART_SetConfig+0x390>
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a4d      	ldr	r2, [pc, #308]	@ (80062a8 <UART_SetConfig+0x364>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d106      	bne.n	8006186 <UART_SetConfig+0x242>
 8006178:	231b      	movs	r3, #27
 800617a:	2220      	movs	r2, #32
 800617c:	189b      	adds	r3, r3, r2
 800617e:	19db      	adds	r3, r3, r7
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	e0a6      	b.n	80062d4 <UART_SetConfig+0x390>
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a3e      	ldr	r2, [pc, #248]	@ (8006284 <UART_SetConfig+0x340>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d13e      	bne.n	800620e <UART_SetConfig+0x2ca>
 8006190:	4b40      	ldr	r3, [pc, #256]	@ (8006294 <UART_SetConfig+0x350>)
 8006192:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006194:	23c0      	movs	r3, #192	@ 0xc0
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	4013      	ands	r3, r2
 800619a:	22c0      	movs	r2, #192	@ 0xc0
 800619c:	0112      	lsls	r2, r2, #4
 800619e:	4293      	cmp	r3, r2
 80061a0:	d027      	beq.n	80061f2 <UART_SetConfig+0x2ae>
 80061a2:	22c0      	movs	r2, #192	@ 0xc0
 80061a4:	0112      	lsls	r2, r2, #4
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d82a      	bhi.n	8006200 <UART_SetConfig+0x2bc>
 80061aa:	2280      	movs	r2, #128	@ 0x80
 80061ac:	0112      	lsls	r2, r2, #4
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d011      	beq.n	80061d6 <UART_SetConfig+0x292>
 80061b2:	2280      	movs	r2, #128	@ 0x80
 80061b4:	0112      	lsls	r2, r2, #4
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d822      	bhi.n	8006200 <UART_SetConfig+0x2bc>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <UART_SetConfig+0x284>
 80061be:	2280      	movs	r2, #128	@ 0x80
 80061c0:	00d2      	lsls	r2, r2, #3
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00e      	beq.n	80061e4 <UART_SetConfig+0x2a0>
 80061c6:	e01b      	b.n	8006200 <UART_SetConfig+0x2bc>
 80061c8:	231b      	movs	r3, #27
 80061ca:	2220      	movs	r2, #32
 80061cc:	189b      	adds	r3, r3, r2
 80061ce:	19db      	adds	r3, r3, r7
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e07e      	b.n	80062d4 <UART_SetConfig+0x390>
 80061d6:	231b      	movs	r3, #27
 80061d8:	2220      	movs	r2, #32
 80061da:	189b      	adds	r3, r3, r2
 80061dc:	19db      	adds	r3, r3, r7
 80061de:	2202      	movs	r2, #2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e077      	b.n	80062d4 <UART_SetConfig+0x390>
 80061e4:	231b      	movs	r3, #27
 80061e6:	2220      	movs	r2, #32
 80061e8:	189b      	adds	r3, r3, r2
 80061ea:	19db      	adds	r3, r3, r7
 80061ec:	2204      	movs	r2, #4
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	e070      	b.n	80062d4 <UART_SetConfig+0x390>
 80061f2:	231b      	movs	r3, #27
 80061f4:	2220      	movs	r2, #32
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	19db      	adds	r3, r3, r7
 80061fa:	2208      	movs	r2, #8
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e069      	b.n	80062d4 <UART_SetConfig+0x390>
 8006200:	231b      	movs	r3, #27
 8006202:	2220      	movs	r2, #32
 8006204:	189b      	adds	r3, r3, r2
 8006206:	19db      	adds	r3, r3, r7
 8006208:	2210      	movs	r2, #16
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	e062      	b.n	80062d4 <UART_SetConfig+0x390>
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1d      	ldr	r2, [pc, #116]	@ (8006288 <UART_SetConfig+0x344>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d157      	bne.n	80062c8 <UART_SetConfig+0x384>
 8006218:	4b1e      	ldr	r3, [pc, #120]	@ (8006294 <UART_SetConfig+0x350>)
 800621a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800621c:	23c0      	movs	r3, #192	@ 0xc0
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4013      	ands	r3, r2
 8006222:	22c0      	movs	r2, #192	@ 0xc0
 8006224:	0092      	lsls	r2, r2, #2
 8006226:	4293      	cmp	r3, r2
 8006228:	d040      	beq.n	80062ac <UART_SetConfig+0x368>
 800622a:	22c0      	movs	r2, #192	@ 0xc0
 800622c:	0092      	lsls	r2, r2, #2
 800622e:	4293      	cmp	r3, r2
 8006230:	d843      	bhi.n	80062ba <UART_SetConfig+0x376>
 8006232:	2280      	movs	r2, #128	@ 0x80
 8006234:	0092      	lsls	r2, r2, #2
 8006236:	4293      	cmp	r3, r2
 8006238:	d011      	beq.n	800625e <UART_SetConfig+0x31a>
 800623a:	2280      	movs	r2, #128	@ 0x80
 800623c:	0092      	lsls	r2, r2, #2
 800623e:	4293      	cmp	r3, r2
 8006240:	d83b      	bhi.n	80062ba <UART_SetConfig+0x376>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <UART_SetConfig+0x30c>
 8006246:	2280      	movs	r2, #128	@ 0x80
 8006248:	0052      	lsls	r2, r2, #1
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <UART_SetConfig+0x328>
 800624e:	e034      	b.n	80062ba <UART_SetConfig+0x376>
 8006250:	231b      	movs	r3, #27
 8006252:	2220      	movs	r2, #32
 8006254:	189b      	adds	r3, r3, r2
 8006256:	19db      	adds	r3, r3, r7
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e03a      	b.n	80062d4 <UART_SetConfig+0x390>
 800625e:	231b      	movs	r3, #27
 8006260:	2220      	movs	r2, #32
 8006262:	189b      	adds	r3, r3, r2
 8006264:	19db      	adds	r3, r3, r7
 8006266:	2202      	movs	r2, #2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e033      	b.n	80062d4 <UART_SetConfig+0x390>
 800626c:	231b      	movs	r3, #27
 800626e:	2220      	movs	r2, #32
 8006270:	189b      	adds	r3, r3, r2
 8006272:	19db      	adds	r3, r3, r7
 8006274:	2204      	movs	r2, #4
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	e02c      	b.n	80062d4 <UART_SetConfig+0x390>
 800627a:	46c0      	nop			@ (mov r8, r8)
 800627c:	cfff69f3 	.word	0xcfff69f3
 8006280:	ffffcfff 	.word	0xffffcfff
 8006284:	40008000 	.word	0x40008000
 8006288:	40008400 	.word	0x40008400
 800628c:	11fff4ff 	.word	0x11fff4ff
 8006290:	40013800 	.word	0x40013800
 8006294:	40021000 	.word	0x40021000
 8006298:	40004400 	.word	0x40004400
 800629c:	40004800 	.word	0x40004800
 80062a0:	40004c00 	.word	0x40004c00
 80062a4:	40005000 	.word	0x40005000
 80062a8:	40013c00 	.word	0x40013c00
 80062ac:	231b      	movs	r3, #27
 80062ae:	2220      	movs	r2, #32
 80062b0:	189b      	adds	r3, r3, r2
 80062b2:	19db      	adds	r3, r3, r7
 80062b4:	2208      	movs	r2, #8
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	e00c      	b.n	80062d4 <UART_SetConfig+0x390>
 80062ba:	231b      	movs	r3, #27
 80062bc:	2220      	movs	r2, #32
 80062be:	189b      	adds	r3, r3, r2
 80062c0:	19db      	adds	r3, r3, r7
 80062c2:	2210      	movs	r2, #16
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e005      	b.n	80062d4 <UART_SetConfig+0x390>
 80062c8:	231b      	movs	r3, #27
 80062ca:	2220      	movs	r2, #32
 80062cc:	189b      	adds	r3, r3, r2
 80062ce:	19db      	adds	r3, r3, r7
 80062d0:	2210      	movs	r2, #16
 80062d2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4ac1      	ldr	r2, [pc, #772]	@ (80065e0 <UART_SetConfig+0x69c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d005      	beq.n	80062ea <UART_SetConfig+0x3a6>
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4ac0      	ldr	r2, [pc, #768]	@ (80065e4 <UART_SetConfig+0x6a0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d000      	beq.n	80062ea <UART_SetConfig+0x3a6>
 80062e8:	e093      	b.n	8006412 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062ea:	231b      	movs	r3, #27
 80062ec:	2220      	movs	r2, #32
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	19db      	adds	r3, r3, r7
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d015      	beq.n	8006324 <UART_SetConfig+0x3e0>
 80062f8:	dc18      	bgt.n	800632c <UART_SetConfig+0x3e8>
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d00d      	beq.n	800631a <UART_SetConfig+0x3d6>
 80062fe:	dc15      	bgt.n	800632c <UART_SetConfig+0x3e8>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <UART_SetConfig+0x3c6>
 8006304:	2b02      	cmp	r3, #2
 8006306:	d005      	beq.n	8006314 <UART_SetConfig+0x3d0>
 8006308:	e010      	b.n	800632c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800630a:	f7fe fb97 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 800630e:	0003      	movs	r3, r0
 8006310:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006312:	e014      	b.n	800633e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006314:	4bb4      	ldr	r3, [pc, #720]	@ (80065e8 <UART_SetConfig+0x6a4>)
 8006316:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006318:	e011      	b.n	800633e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631a:	f7fe fb03 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 800631e:	0003      	movs	r3, r0
 8006320:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006322:	e00c      	b.n	800633e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006324:	2380      	movs	r3, #128	@ 0x80
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800632a:	e008      	b.n	800633e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006330:	231a      	movs	r3, #26
 8006332:	2220      	movs	r2, #32
 8006334:	189b      	adds	r3, r3, r2
 8006336:	19db      	adds	r3, r3, r7
 8006338:	2201      	movs	r2, #1
 800633a:	701a      	strb	r2, [r3, #0]
        break;
 800633c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800633e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006340:	2b00      	cmp	r3, #0
 8006342:	d100      	bne.n	8006346 <UART_SetConfig+0x402>
 8006344:	e135      	b.n	80065b2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800634a:	4ba8      	ldr	r3, [pc, #672]	@ (80065ec <UART_SetConfig+0x6a8>)
 800634c:	0052      	lsls	r2, r2, #1
 800634e:	5ad3      	ldrh	r3, [r2, r3]
 8006350:	0019      	movs	r1, r3
 8006352:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006354:	f7f9 fede 	bl	8000114 <__udivsi3>
 8006358:	0003      	movs	r3, r0
 800635a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	0013      	movs	r3, r2
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	189b      	adds	r3, r3, r2
 8006366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006368:	429a      	cmp	r2, r3
 800636a:	d305      	bcc.n	8006378 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006374:	429a      	cmp	r2, r3
 8006376:	d906      	bls.n	8006386 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006378:	231a      	movs	r3, #26
 800637a:	2220      	movs	r2, #32
 800637c:	189b      	adds	r3, r3, r2
 800637e:	19db      	adds	r3, r3, r7
 8006380:	2201      	movs	r2, #1
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e044      	b.n	8006410 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006392:	4b96      	ldr	r3, [pc, #600]	@ (80065ec <UART_SetConfig+0x6a8>)
 8006394:	0052      	lsls	r2, r2, #1
 8006396:	5ad3      	ldrh	r3, [r2, r3]
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	69b8      	ldr	r0, [r7, #24]
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	f7fa f82b 	bl	8000400 <__aeabi_uldivmod>
 80063aa:	0002      	movs	r2, r0
 80063ac:	000b      	movs	r3, r1
 80063ae:	0e11      	lsrs	r1, r2, #24
 80063b0:	021d      	lsls	r5, r3, #8
 80063b2:	430d      	orrs	r5, r1
 80063b4:	0214      	lsls	r4, r2, #8
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	68b8      	ldr	r0, [r7, #8]
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	1900      	adds	r0, r0, r4
 80063c8:	4169      	adcs	r1, r5
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	2300      	movs	r3, #0
 80063d2:	607b      	str	r3, [r7, #4]
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f7fa f812 	bl	8000400 <__aeabi_uldivmod>
 80063dc:	0002      	movs	r2, r0
 80063de:	000b      	movs	r3, r1
 80063e0:	0013      	movs	r3, r2
 80063e2:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e6:	23c0      	movs	r3, #192	@ 0xc0
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d309      	bcc.n	8006402 <UART_SetConfig+0x4be>
 80063ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f0:	2380      	movs	r3, #128	@ 0x80
 80063f2:	035b      	lsls	r3, r3, #13
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d204      	bcs.n	8006402 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063fe:	60da      	str	r2, [r3, #12]
 8006400:	e006      	b.n	8006410 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006402:	231a      	movs	r3, #26
 8006404:	2220      	movs	r2, #32
 8006406:	189b      	adds	r3, r3, r2
 8006408:	19db      	adds	r3, r3, r7
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800640e:	e0d0      	b.n	80065b2 <UART_SetConfig+0x66e>
 8006410:	e0cf      	b.n	80065b2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	69da      	ldr	r2, [r3, #28]
 8006416:	2380      	movs	r3, #128	@ 0x80
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	429a      	cmp	r2, r3
 800641c:	d000      	beq.n	8006420 <UART_SetConfig+0x4dc>
 800641e:	e070      	b.n	8006502 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006420:	231b      	movs	r3, #27
 8006422:	2220      	movs	r2, #32
 8006424:	189b      	adds	r3, r3, r2
 8006426:	19db      	adds	r3, r3, r7
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b08      	cmp	r3, #8
 800642c:	d015      	beq.n	800645a <UART_SetConfig+0x516>
 800642e:	dc18      	bgt.n	8006462 <UART_SetConfig+0x51e>
 8006430:	2b04      	cmp	r3, #4
 8006432:	d00d      	beq.n	8006450 <UART_SetConfig+0x50c>
 8006434:	dc15      	bgt.n	8006462 <UART_SetConfig+0x51e>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <UART_SetConfig+0x4fc>
 800643a:	2b02      	cmp	r3, #2
 800643c:	d005      	beq.n	800644a <UART_SetConfig+0x506>
 800643e:	e010      	b.n	8006462 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006440:	f7fe fafc 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 8006444:	0003      	movs	r3, r0
 8006446:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006448:	e014      	b.n	8006474 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800644a:	4b67      	ldr	r3, [pc, #412]	@ (80065e8 <UART_SetConfig+0x6a4>)
 800644c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800644e:	e011      	b.n	8006474 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006450:	f7fe fa68 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 8006454:	0003      	movs	r3, r0
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006458:	e00c      	b.n	8006474 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645a:	2380      	movs	r3, #128	@ 0x80
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006460:	e008      	b.n	8006474 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006466:	231a      	movs	r3, #26
 8006468:	2220      	movs	r2, #32
 800646a:	189b      	adds	r3, r3, r2
 800646c:	19db      	adds	r3, r3, r7
 800646e:	2201      	movs	r2, #1
 8006470:	701a      	strb	r2, [r3, #0]
        break;
 8006472:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d100      	bne.n	800647c <UART_SetConfig+0x538>
 800647a:	e09a      	b.n	80065b2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006480:	4b5a      	ldr	r3, [pc, #360]	@ (80065ec <UART_SetConfig+0x6a8>)
 8006482:	0052      	lsls	r2, r2, #1
 8006484:	5ad3      	ldrh	r3, [r2, r3]
 8006486:	0019      	movs	r1, r3
 8006488:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800648a:	f7f9 fe43 	bl	8000114 <__udivsi3>
 800648e:	0003      	movs	r3, r0
 8006490:	005a      	lsls	r2, r3, #1
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	18d2      	adds	r2, r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	0019      	movs	r1, r3
 80064a0:	0010      	movs	r0, r2
 80064a2:	f7f9 fe37 	bl	8000114 <__udivsi3>
 80064a6:	0003      	movs	r3, r0
 80064a8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	d921      	bls.n	80064f4 <UART_SetConfig+0x5b0>
 80064b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b2:	2380      	movs	r3, #128	@ 0x80
 80064b4:	025b      	lsls	r3, r3, #9
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d21c      	bcs.n	80064f4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	b29a      	uxth	r2, r3
 80064be:	200e      	movs	r0, #14
 80064c0:	2420      	movs	r4, #32
 80064c2:	1903      	adds	r3, r0, r4
 80064c4:	19db      	adds	r3, r3, r7
 80064c6:	210f      	movs	r1, #15
 80064c8:	438a      	bics	r2, r1
 80064ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2207      	movs	r2, #7
 80064d4:	4013      	ands	r3, r2
 80064d6:	b299      	uxth	r1, r3
 80064d8:	1903      	adds	r3, r0, r4
 80064da:	19db      	adds	r3, r3, r7
 80064dc:	1902      	adds	r2, r0, r4
 80064de:	19d2      	adds	r2, r2, r7
 80064e0:	8812      	ldrh	r2, [r2, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	1902      	adds	r2, r0, r4
 80064ec:	19d2      	adds	r2, r2, r7
 80064ee:	8812      	ldrh	r2, [r2, #0]
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	e05e      	b.n	80065b2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80064f4:	231a      	movs	r3, #26
 80064f6:	2220      	movs	r2, #32
 80064f8:	189b      	adds	r3, r3, r2
 80064fa:	19db      	adds	r3, r3, r7
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e057      	b.n	80065b2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006502:	231b      	movs	r3, #27
 8006504:	2220      	movs	r2, #32
 8006506:	189b      	adds	r3, r3, r2
 8006508:	19db      	adds	r3, r3, r7
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d015      	beq.n	800653c <UART_SetConfig+0x5f8>
 8006510:	dc18      	bgt.n	8006544 <UART_SetConfig+0x600>
 8006512:	2b04      	cmp	r3, #4
 8006514:	d00d      	beq.n	8006532 <UART_SetConfig+0x5ee>
 8006516:	dc15      	bgt.n	8006544 <UART_SetConfig+0x600>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <UART_SetConfig+0x5de>
 800651c:	2b02      	cmp	r3, #2
 800651e:	d005      	beq.n	800652c <UART_SetConfig+0x5e8>
 8006520:	e010      	b.n	8006544 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006522:	f7fe fa8b 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 8006526:	0003      	movs	r3, r0
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800652a:	e014      	b.n	8006556 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800652c:	4b2e      	ldr	r3, [pc, #184]	@ (80065e8 <UART_SetConfig+0x6a4>)
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006530:	e011      	b.n	8006556 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006532:	f7fe f9f7 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 8006536:	0003      	movs	r3, r0
 8006538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800653a:	e00c      	b.n	8006556 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800653c:	2380      	movs	r3, #128	@ 0x80
 800653e:	021b      	lsls	r3, r3, #8
 8006540:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006542:	e008      	b.n	8006556 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006548:	231a      	movs	r3, #26
 800654a:	2220      	movs	r2, #32
 800654c:	189b      	adds	r3, r3, r2
 800654e:	19db      	adds	r3, r3, r7
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
        break;
 8006554:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006558:	2b00      	cmp	r3, #0
 800655a:	d02a      	beq.n	80065b2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006560:	4b22      	ldr	r3, [pc, #136]	@ (80065ec <UART_SetConfig+0x6a8>)
 8006562:	0052      	lsls	r2, r2, #1
 8006564:	5ad3      	ldrh	r3, [r2, r3]
 8006566:	0019      	movs	r1, r3
 8006568:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800656a:	f7f9 fdd3 	bl	8000114 <__udivsi3>
 800656e:	0003      	movs	r3, r0
 8006570:	001a      	movs	r2, r3
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	085b      	lsrs	r3, r3, #1
 8006578:	18d2      	adds	r2, r2, r3
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	0019      	movs	r1, r3
 8006580:	0010      	movs	r0, r2
 8006582:	f7f9 fdc7 	bl	8000114 <__udivsi3>
 8006586:	0003      	movs	r3, r0
 8006588:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	2b0f      	cmp	r3, #15
 800658e:	d90a      	bls.n	80065a6 <UART_SetConfig+0x662>
 8006590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006592:	2380      	movs	r3, #128	@ 0x80
 8006594:	025b      	lsls	r3, r3, #9
 8006596:	429a      	cmp	r2, r3
 8006598:	d205      	bcs.n	80065a6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	b29a      	uxth	r2, r3
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60da      	str	r2, [r3, #12]
 80065a4:	e005      	b.n	80065b2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80065a6:	231a      	movs	r3, #26
 80065a8:	2220      	movs	r2, #32
 80065aa:	189b      	adds	r3, r3, r2
 80065ac:	19db      	adds	r3, r3, r7
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	226a      	movs	r2, #106	@ 0x6a
 80065b6:	2101      	movs	r1, #1
 80065b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	2268      	movs	r2, #104	@ 0x68
 80065be:	2101      	movs	r1, #1
 80065c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	2200      	movs	r2, #0
 80065c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	2200      	movs	r2, #0
 80065cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065ce:	231a      	movs	r3, #26
 80065d0:	2220      	movs	r2, #32
 80065d2:	189b      	adds	r3, r3, r2
 80065d4:	19db      	adds	r3, r3, r7
 80065d6:	781b      	ldrb	r3, [r3, #0]
}
 80065d8:	0018      	movs	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	b010      	add	sp, #64	@ 0x40
 80065de:	bdb0      	pop	{r4, r5, r7, pc}
 80065e0:	40008000 	.word	0x40008000
 80065e4:	40008400 	.word	0x40008400
 80065e8:	00f42400 	.word	0x00f42400
 80065ec:	080080f0 	.word	0x080080f0

080065f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fc:	2208      	movs	r2, #8
 80065fe:	4013      	ands	r3, r2
 8006600:	d00b      	beq.n	800661a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	4a4a      	ldr	r2, [pc, #296]	@ (8006734 <UART_AdvFeatureConfig+0x144>)
 800660a:	4013      	ands	r3, r2
 800660c:	0019      	movs	r1, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661e:	2201      	movs	r2, #1
 8006620:	4013      	ands	r3, r2
 8006622:	d00b      	beq.n	800663c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	4a43      	ldr	r2, [pc, #268]	@ (8006738 <UART_AdvFeatureConfig+0x148>)
 800662c:	4013      	ands	r3, r2
 800662e:	0019      	movs	r1, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006640:	2202      	movs	r2, #2
 8006642:	4013      	ands	r3, r2
 8006644:	d00b      	beq.n	800665e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4a3b      	ldr	r2, [pc, #236]	@ (800673c <UART_AdvFeatureConfig+0x14c>)
 800664e:	4013      	ands	r3, r2
 8006650:	0019      	movs	r1, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006662:	2204      	movs	r2, #4
 8006664:	4013      	ands	r3, r2
 8006666:	d00b      	beq.n	8006680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4a34      	ldr	r2, [pc, #208]	@ (8006740 <UART_AdvFeatureConfig+0x150>)
 8006670:	4013      	ands	r3, r2
 8006672:	0019      	movs	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006684:	2210      	movs	r2, #16
 8006686:	4013      	ands	r3, r2
 8006688:	d00b      	beq.n	80066a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	4a2c      	ldr	r2, [pc, #176]	@ (8006744 <UART_AdvFeatureConfig+0x154>)
 8006692:	4013      	ands	r3, r2
 8006694:	0019      	movs	r1, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a6:	2220      	movs	r2, #32
 80066a8:	4013      	ands	r3, r2
 80066aa:	d00b      	beq.n	80066c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	4a25      	ldr	r2, [pc, #148]	@ (8006748 <UART_AdvFeatureConfig+0x158>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	0019      	movs	r1, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	2240      	movs	r2, #64	@ 0x40
 80066ca:	4013      	ands	r3, r2
 80066cc:	d01d      	beq.n	800670a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4a1d      	ldr	r2, [pc, #116]	@ (800674c <UART_AdvFeatureConfig+0x15c>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	0019      	movs	r1, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ea:	2380      	movs	r3, #128	@ 0x80
 80066ec:	035b      	lsls	r3, r3, #13
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d10b      	bne.n	800670a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4a15      	ldr	r2, [pc, #84]	@ (8006750 <UART_AdvFeatureConfig+0x160>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	0019      	movs	r1, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670e:	2280      	movs	r2, #128	@ 0x80
 8006710:	4013      	ands	r3, r2
 8006712:	d00b      	beq.n	800672c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	4a0e      	ldr	r2, [pc, #56]	@ (8006754 <UART_AdvFeatureConfig+0x164>)
 800671c:	4013      	ands	r3, r2
 800671e:	0019      	movs	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }
}
 800672c:	46c0      	nop			@ (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}
 8006734:	ffff7fff 	.word	0xffff7fff
 8006738:	fffdffff 	.word	0xfffdffff
 800673c:	fffeffff 	.word	0xfffeffff
 8006740:	fffbffff 	.word	0xfffbffff
 8006744:	ffffefff 	.word	0xffffefff
 8006748:	ffffdfff 	.word	0xffffdfff
 800674c:	ffefffff 	.word	0xffefffff
 8006750:	ff9fffff 	.word	0xff9fffff
 8006754:	fff7ffff 	.word	0xfff7ffff

08006758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b092      	sub	sp, #72	@ 0x48
 800675c:	af02      	add	r7, sp, #8
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2290      	movs	r2, #144	@ 0x90
 8006764:	2100      	movs	r1, #0
 8006766:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006768:	f7fc fa14 	bl	8002b94 <HAL_GetTick>
 800676c:	0003      	movs	r3, r0
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2208      	movs	r2, #8
 8006778:	4013      	ands	r3, r2
 800677a:	2b08      	cmp	r3, #8
 800677c:	d12d      	bne.n	80067da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800677e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006780:	2280      	movs	r2, #128	@ 0x80
 8006782:	0391      	lsls	r1, r2, #14
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4a47      	ldr	r2, [pc, #284]	@ (80068a4 <UART_CheckIdleState+0x14c>)
 8006788:	9200      	str	r2, [sp, #0]
 800678a:	2200      	movs	r2, #0
 800678c:	f000 f88e 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8006790:	1e03      	subs	r3, r0, #0
 8006792:	d022      	beq.n	80067da <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006794:	f3ef 8310 	mrs	r3, PRIMASK
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800679c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800679e:	2301      	movs	r3, #1
 80067a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a4:	f383 8810 	msr	PRIMASK, r3
}
 80067a8:	46c0      	nop			@ (mov r8, r8)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2180      	movs	r1, #128	@ 0x80
 80067b6:	438a      	bics	r2, r1
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c0:	f383 8810 	msr	PRIMASK, r3
}
 80067c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2288      	movs	r2, #136	@ 0x88
 80067ca:	2120      	movs	r1, #32
 80067cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2284      	movs	r2, #132	@ 0x84
 80067d2:	2100      	movs	r1, #0
 80067d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e060      	b.n	800689c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2204      	movs	r2, #4
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d146      	bne.n	8006876 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ea:	2280      	movs	r2, #128	@ 0x80
 80067ec:	03d1      	lsls	r1, r2, #15
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4a2c      	ldr	r2, [pc, #176]	@ (80068a4 <UART_CheckIdleState+0x14c>)
 80067f2:	9200      	str	r2, [sp, #0]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f000 f859 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 80067fa:	1e03      	subs	r3, r0, #0
 80067fc:	d03b      	beq.n	8006876 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006802:	60fb      	str	r3, [r7, #12]
  return(result);
 8006804:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006806:	637b      	str	r3, [r7, #52]	@ 0x34
 8006808:	2301      	movs	r3, #1
 800680a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f383 8810 	msr	PRIMASK, r3
}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4922      	ldr	r1, [pc, #136]	@ (80068a8 <UART_CheckIdleState+0x150>)
 8006820:	400a      	ands	r2, r1
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006826:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f383 8810 	msr	PRIMASK, r3
}
 800682e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006830:	f3ef 8310 	mrs	r3, PRIMASK
 8006834:	61bb      	str	r3, [r7, #24]
  return(result);
 8006836:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006838:	633b      	str	r3, [r7, #48]	@ 0x30
 800683a:	2301      	movs	r3, #1
 800683c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	f383 8810 	msr	PRIMASK, r3
}
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2101      	movs	r1, #1
 8006852:	438a      	bics	r2, r1
 8006854:	609a      	str	r2, [r3, #8]
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	f383 8810 	msr	PRIMASK, r3
}
 8006860:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	228c      	movs	r2, #140	@ 0x8c
 8006866:	2120      	movs	r1, #32
 8006868:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2284      	movs	r2, #132	@ 0x84
 800686e:	2100      	movs	r1, #0
 8006870:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e012      	b.n	800689c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2288      	movs	r2, #136	@ 0x88
 800687a:	2120      	movs	r1, #32
 800687c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	228c      	movs	r2, #140	@ 0x8c
 8006882:	2120      	movs	r1, #32
 8006884:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2284      	movs	r2, #132	@ 0x84
 8006896:	2100      	movs	r1, #0
 8006898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	0018      	movs	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	b010      	add	sp, #64	@ 0x40
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	01ffffff 	.word	0x01ffffff
 80068a8:	fffffedf 	.word	0xfffffedf

080068ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	1dfb      	adds	r3, r7, #7
 80068ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068bc:	e051      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	3301      	adds	r3, #1
 80068c2:	d04e      	beq.n	8006962 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c4:	f7fc f966 	bl	8002b94 <HAL_GetTick>
 80068c8:	0002      	movs	r2, r0
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d302      	bcc.n	80068da <UART_WaitOnFlagUntilTimeout+0x2e>
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e051      	b.n	8006982 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2204      	movs	r2, #4
 80068e6:	4013      	ands	r3, r2
 80068e8:	d03b      	beq.n	8006962 <UART_WaitOnFlagUntilTimeout+0xb6>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b80      	cmp	r3, #128	@ 0x80
 80068ee:	d038      	beq.n	8006962 <UART_WaitOnFlagUntilTimeout+0xb6>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b40      	cmp	r3, #64	@ 0x40
 80068f4:	d035      	beq.n	8006962 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	2208      	movs	r2, #8
 80068fe:	4013      	ands	r3, r2
 8006900:	2b08      	cmp	r3, #8
 8006902:	d111      	bne.n	8006928 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2208      	movs	r2, #8
 800690a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	0018      	movs	r0, r3
 8006910:	f000 f960 	bl	8006bd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2290      	movs	r2, #144	@ 0x90
 8006918:	2108      	movs	r1, #8
 800691a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2284      	movs	r2, #132	@ 0x84
 8006920:	2100      	movs	r1, #0
 8006922:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e02c      	b.n	8006982 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69da      	ldr	r2, [r3, #28]
 800692e:	2380      	movs	r3, #128	@ 0x80
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	401a      	ands	r2, r3
 8006934:	2380      	movs	r3, #128	@ 0x80
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	429a      	cmp	r2, r3
 800693a:	d112      	bne.n	8006962 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2280      	movs	r2, #128	@ 0x80
 8006942:	0112      	lsls	r2, r2, #4
 8006944:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	0018      	movs	r0, r3
 800694a:	f000 f943 	bl	8006bd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2290      	movs	r2, #144	@ 0x90
 8006952:	2120      	movs	r1, #32
 8006954:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2284      	movs	r2, #132	@ 0x84
 800695a:	2100      	movs	r1, #0
 800695c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e00f      	b.n	8006982 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	4013      	ands	r3, r2
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	425a      	negs	r2, r3
 8006972:	4153      	adcs	r3, r2
 8006974:	b2db      	uxtb	r3, r3
 8006976:	001a      	movs	r2, r3
 8006978:	1dfb      	adds	r3, r7, #7
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d09e      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b004      	add	sp, #16
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b098      	sub	sp, #96	@ 0x60
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	1dbb      	adds	r3, r7, #6
 8006998:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1dba      	adds	r2, r7, #6
 80069a4:	215c      	movs	r1, #92	@ 0x5c
 80069a6:	8812      	ldrh	r2, [r2, #0]
 80069a8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	1dba      	adds	r2, r7, #6
 80069ae:	215e      	movs	r1, #94	@ 0x5e
 80069b0:	8812      	ldrh	r2, [r2, #0]
 80069b2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	2380      	movs	r3, #128	@ 0x80
 80069c0:	015b      	lsls	r3, r3, #5
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d10d      	bne.n	80069e2 <UART_Start_Receive_IT+0x56>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <UART_Start_Receive_IT+0x4c>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2260      	movs	r2, #96	@ 0x60
 80069d2:	497b      	ldr	r1, [pc, #492]	@ (8006bc0 <UART_Start_Receive_IT+0x234>)
 80069d4:	5299      	strh	r1, [r3, r2]
 80069d6:	e02e      	b.n	8006a36 <UART_Start_Receive_IT+0xaa>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2260      	movs	r2, #96	@ 0x60
 80069dc:	21ff      	movs	r1, #255	@ 0xff
 80069de:	5299      	strh	r1, [r3, r2]
 80069e0:	e029      	b.n	8006a36 <UART_Start_Receive_IT+0xaa>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <UART_Start_Receive_IT+0x7a>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <UART_Start_Receive_IT+0x70>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2260      	movs	r2, #96	@ 0x60
 80069f6:	21ff      	movs	r1, #255	@ 0xff
 80069f8:	5299      	strh	r1, [r3, r2]
 80069fa:	e01c      	b.n	8006a36 <UART_Start_Receive_IT+0xaa>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2260      	movs	r2, #96	@ 0x60
 8006a00:	217f      	movs	r1, #127	@ 0x7f
 8006a02:	5299      	strh	r1, [r3, r2]
 8006a04:	e017      	b.n	8006a36 <UART_Start_Receive_IT+0xaa>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	2380      	movs	r3, #128	@ 0x80
 8006a0c:	055b      	lsls	r3, r3, #21
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d10d      	bne.n	8006a2e <UART_Start_Receive_IT+0xa2>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <UART_Start_Receive_IT+0x98>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2260      	movs	r2, #96	@ 0x60
 8006a1e:	217f      	movs	r1, #127	@ 0x7f
 8006a20:	5299      	strh	r1, [r3, r2]
 8006a22:	e008      	b.n	8006a36 <UART_Start_Receive_IT+0xaa>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2260      	movs	r2, #96	@ 0x60
 8006a28:	213f      	movs	r1, #63	@ 0x3f
 8006a2a:	5299      	strh	r1, [r3, r2]
 8006a2c:	e003      	b.n	8006a36 <UART_Start_Receive_IT+0xaa>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2260      	movs	r2, #96	@ 0x60
 8006a32:	2100      	movs	r1, #0
 8006a34:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2290      	movs	r2, #144	@ 0x90
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	228c      	movs	r2, #140	@ 0x8c
 8006a42:	2122      	movs	r1, #34	@ 0x22
 8006a44:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a46:	f3ef 8310 	mrs	r3, PRIMASK
 8006a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8006a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a50:	2301      	movs	r3, #1
 8006a52:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a56:	f383 8810 	msr	PRIMASK, r3
}
 8006a5a:	46c0      	nop			@ (mov r8, r8)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2101      	movs	r1, #1
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a72:	f383 8810 	msr	PRIMASK, r3
}
 8006a76:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006a7c:	2380      	movs	r3, #128	@ 0x80
 8006a7e:	059b      	lsls	r3, r3, #22
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d150      	bne.n	8006b26 <UART_Start_Receive_IT+0x19a>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2268      	movs	r2, #104	@ 0x68
 8006a88:	5a9b      	ldrh	r3, [r3, r2]
 8006a8a:	1dba      	adds	r2, r7, #6
 8006a8c:	8812      	ldrh	r2, [r2, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d349      	bcc.n	8006b26 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	2380      	movs	r3, #128	@ 0x80
 8006a98:	015b      	lsls	r3, r3, #5
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d107      	bne.n	8006aae <UART_Start_Receive_IT+0x122>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a46      	ldr	r2, [pc, #280]	@ (8006bc4 <UART_Start_Receive_IT+0x238>)
 8006aaa:	675a      	str	r2, [r3, #116]	@ 0x74
 8006aac:	e002      	b.n	8006ab4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4a45      	ldr	r2, [pc, #276]	@ (8006bc8 <UART_Start_Receive_IT+0x23c>)
 8006ab2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d019      	beq.n	8006af0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006abc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	f383 8810 	msr	PRIMASK, r3
}
 8006ad0:	46c0      	nop			@ (mov r8, r8)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2180      	movs	r1, #128	@ 0x80
 8006ade:	0049      	lsls	r1, r1, #1
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aea:	f383 8810 	msr	PRIMASK, r3
}
 8006aee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af0:	f3ef 8310 	mrs	r3, PRIMASK
 8006af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006af8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006afa:	2301      	movs	r3, #1
 8006afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	f383 8810 	msr	PRIMASK, r3
}
 8006b04:	46c0      	nop			@ (mov r8, r8)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2180      	movs	r1, #128	@ 0x80
 8006b12:	0549      	lsls	r1, r1, #21
 8006b14:	430a      	orrs	r2, r1
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	f383 8810 	msr	PRIMASK, r3
}
 8006b22:	46c0      	nop			@ (mov r8, r8)
 8006b24:	e047      	b.n	8006bb6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	2380      	movs	r3, #128	@ 0x80
 8006b2c:	015b      	lsls	r3, r3, #5
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d107      	bne.n	8006b42 <UART_Start_Receive_IT+0x1b6>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a23      	ldr	r2, [pc, #140]	@ (8006bcc <UART_Start_Receive_IT+0x240>)
 8006b3e:	675a      	str	r2, [r3, #116]	@ 0x74
 8006b40:	e002      	b.n	8006b48 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a22      	ldr	r2, [pc, #136]	@ (8006bd0 <UART_Start_Receive_IT+0x244>)
 8006b46:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d019      	beq.n	8006b84 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b50:	f3ef 8310 	mrs	r3, PRIMASK
 8006b54:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b56:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f383 8810 	msr	PRIMASK, r3
}
 8006b64:	46c0      	nop			@ (mov r8, r8)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2190      	movs	r1, #144	@ 0x90
 8006b72:	0049      	lsls	r1, r1, #1
 8006b74:	430a      	orrs	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	f383 8810 	msr	PRIMASK, r3
}
 8006b82:	e018      	b.n	8006bb6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b84:	f3ef 8310 	mrs	r3, PRIMASK
 8006b88:	613b      	str	r3, [r7, #16]
  return(result);
 8006b8a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b8e:	2301      	movs	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f383 8810 	msr	PRIMASK, r3
}
 8006b98:	46c0      	nop			@ (mov r8, r8)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2120      	movs	r1, #32
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f383 8810 	msr	PRIMASK, r3
}
 8006bb4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	0018      	movs	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b018      	add	sp, #96	@ 0x60
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	000001ff 	.word	0x000001ff
 8006bc4:	0800741d 	.word	0x0800741d
 8006bc8:	080070d1 	.word	0x080070d1
 8006bcc:	08006efd 	.word	0x08006efd
 8006bd0:	08006d29 	.word	0x08006d29

08006bd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08e      	sub	sp, #56	@ 0x38
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006be0:	617b      	str	r3, [r7, #20]
  return(result);
 8006be2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be6:	2301      	movs	r3, #1
 8006be8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	f383 8810 	msr	PRIMASK, r3
}
 8006bf0:	46c0      	nop			@ (mov r8, r8)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4926      	ldr	r1, [pc, #152]	@ (8006c98 <UART_EndRxTransfer+0xc4>)
 8006bfe:	400a      	ands	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f383 8810 	msr	PRIMASK, r3
}
 8006c0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c12:	623b      	str	r3, [r7, #32]
  return(result);
 8006c14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c16:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c18:	2301      	movs	r3, #1
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	f383 8810 	msr	PRIMASK, r3
}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	491b      	ldr	r1, [pc, #108]	@ (8006c9c <UART_EndRxTransfer+0xc8>)
 8006c30:	400a      	ands	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	f383 8810 	msr	PRIMASK, r3
}
 8006c3e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d118      	bne.n	8006c7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c48:	f3ef 8310 	mrs	r3, PRIMASK
 8006c4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c52:	2301      	movs	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f383 8810 	msr	PRIMASK, r3
}
 8006c5c:	46c0      	nop			@ (mov r8, r8)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2110      	movs	r1, #16
 8006c6a:	438a      	bics	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f383 8810 	msr	PRIMASK, r3
}
 8006c78:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	228c      	movs	r2, #140	@ 0x8c
 8006c7e:	2120      	movs	r1, #32
 8006c80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c8e:	46c0      	nop			@ (mov r8, r8)
 8006c90:	46bd      	mov	sp, r7
 8006c92:	b00e      	add	sp, #56	@ 0x38
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	46c0      	nop			@ (mov r8, r8)
 8006c98:	fffffedf 	.word	0xfffffedf
 8006c9c:	effffffe 	.word	0xeffffffe

08006ca0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	225e      	movs	r2, #94	@ 0x5e
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2256      	movs	r2, #86	@ 0x56
 8006cba:	2100      	movs	r1, #0
 8006cbc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7ff f92b 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc6:	46c0      	nop			@ (mov r8, r8)
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	b004      	add	sp, #16
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cda:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f383 8810 	msr	PRIMASK, r3
}
 8006cea:	46c0      	nop			@ (mov r8, r8)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2140      	movs	r1, #64	@ 0x40
 8006cf8:	438a      	bics	r2, r1
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f383 8810 	msr	PRIMASK, r3
}
 8006d06:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2288      	movs	r2, #136	@ 0x88
 8006d0c:	2120      	movs	r1, #32
 8006d0e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7ff f8f7 	bl	8005f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1e:	46c0      	nop			@ (mov r8, r8)
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b006      	add	sp, #24
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b094      	sub	sp, #80	@ 0x50
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d30:	204e      	movs	r0, #78	@ 0x4e
 8006d32:	183b      	adds	r3, r7, r0
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	2160      	movs	r1, #96	@ 0x60
 8006d38:	5a52      	ldrh	r2, [r2, r1]
 8006d3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	228c      	movs	r2, #140	@ 0x8c
 8006d40:	589b      	ldr	r3, [r3, r2]
 8006d42:	2b22      	cmp	r3, #34	@ 0x22
 8006d44:	d000      	beq.n	8006d48 <UART_RxISR_8BIT+0x20>
 8006d46:	e0c4      	b.n	8006ed2 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d4e:	214c      	movs	r1, #76	@ 0x4c
 8006d50:	187b      	adds	r3, r7, r1
 8006d52:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d54:	187b      	adds	r3, r7, r1
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	183b      	adds	r3, r7, r0
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b2d9      	uxtb	r1, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d64:	400a      	ands	r2, r1
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	225e      	movs	r2, #94	@ 0x5e
 8006d78:	5a9b      	ldrh	r3, [r3, r2]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b299      	uxth	r1, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	225e      	movs	r2, #94	@ 0x5e
 8006d84:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	225e      	movs	r2, #94	@ 0x5e
 8006d8a:	5a9b      	ldrh	r3, [r3, r2]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d000      	beq.n	8006d94 <UART_RxISR_8BIT+0x6c>
 8006d92:	e0a6      	b.n	8006ee2 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d94:	f3ef 8310 	mrs	r3, PRIMASK
 8006d98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d9e:	2301      	movs	r3, #1
 8006da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da4:	f383 8810 	msr	PRIMASK, r3
}
 8006da8:	46c0      	nop			@ (mov r8, r8)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	494d      	ldr	r1, [pc, #308]	@ (8006eec <UART_RxISR_8BIT+0x1c4>)
 8006db6:	400a      	ands	r2, r1
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc0:	f383 8810 	msr	PRIMASK, r3
}
 8006dc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd6:	f383 8810 	msr	PRIMASK, r3
}
 8006dda:	46c0      	nop			@ (mov r8, r8)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2101      	movs	r1, #1
 8006de8:	438a      	bics	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df2:	f383 8810 	msr	PRIMASK, r3
}
 8006df6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	228c      	movs	r2, #140	@ 0x8c
 8006dfc:	2120      	movs	r1, #32
 8006dfe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a37      	ldr	r2, [pc, #220]	@ (8006ef0 <UART_RxISR_8BIT+0x1c8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d024      	beq.n	8006e60 <UART_RxISR_8BIT+0x138>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a36      	ldr	r2, [pc, #216]	@ (8006ef4 <UART_RxISR_8BIT+0x1cc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d01f      	beq.n	8006e60 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	2380      	movs	r3, #128	@ 0x80
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d018      	beq.n	8006e60 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e32:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e34:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e36:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e38:	2301      	movs	r3, #1
 8006e3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f383 8810 	msr	PRIMASK, r3
}
 8006e42:	46c0      	nop			@ (mov r8, r8)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	492a      	ldr	r1, [pc, #168]	@ (8006ef8 <UART_RxISR_8BIT+0x1d0>)
 8006e50:	400a      	ands	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	f383 8810 	msr	PRIMASK, r3
}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d12f      	bne.n	8006ec8 <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e72:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e74:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e78:	2301      	movs	r3, #1
 8006e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f383 8810 	msr	PRIMASK, r3
}
 8006e82:	46c0      	nop			@ (mov r8, r8)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2110      	movs	r1, #16
 8006e90:	438a      	bics	r2, r1
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f383 8810 	msr	PRIMASK, r3
}
 8006e9e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2210      	movs	r2, #16
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b10      	cmp	r3, #16
 8006eac:	d103      	bne.n	8006eb6 <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	225c      	movs	r2, #92	@ 0x5c
 8006eba:	5a9a      	ldrh	r2, [r3, r2]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	0011      	movs	r1, r2
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f7ff f833 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ec6:	e00c      	b.n	8006ee2 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f7fa ffd0 	bl	8001e70 <HAL_UART_RxCpltCallback>
}
 8006ed0:	e007      	b.n	8006ee2 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2108      	movs	r1, #8
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	619a      	str	r2, [r3, #24]
}
 8006ee2:	46c0      	nop			@ (mov r8, r8)
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	b014      	add	sp, #80	@ 0x50
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	46c0      	nop			@ (mov r8, r8)
 8006eec:	fffffedf 	.word	0xfffffedf
 8006ef0:	40008000 	.word	0x40008000
 8006ef4:	40008400 	.word	0x40008400
 8006ef8:	fbffffff 	.word	0xfbffffff

08006efc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b094      	sub	sp, #80	@ 0x50
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f04:	204e      	movs	r0, #78	@ 0x4e
 8006f06:	183b      	adds	r3, r7, r0
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	2160      	movs	r1, #96	@ 0x60
 8006f0c:	5a52      	ldrh	r2, [r2, r1]
 8006f0e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	228c      	movs	r2, #140	@ 0x8c
 8006f14:	589b      	ldr	r3, [r3, r2]
 8006f16:	2b22      	cmp	r3, #34	@ 0x22
 8006f18:	d000      	beq.n	8006f1c <UART_RxISR_16BIT+0x20>
 8006f1a:	e0c4      	b.n	80070a6 <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f22:	214c      	movs	r1, #76	@ 0x4c
 8006f24:	187b      	adds	r3, r7, r1
 8006f26:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f2e:	187b      	adds	r3, r7, r1
 8006f30:	183a      	adds	r2, r7, r0
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	8812      	ldrh	r2, [r2, #0]
 8006f36:	4013      	ands	r3, r2
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f42:	1c9a      	adds	r2, r3, #2
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	225e      	movs	r2, #94	@ 0x5e
 8006f4c:	5a9b      	ldrh	r3, [r3, r2]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b299      	uxth	r1, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	225e      	movs	r2, #94	@ 0x5e
 8006f58:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	225e      	movs	r2, #94	@ 0x5e
 8006f5e:	5a9b      	ldrh	r3, [r3, r2]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d000      	beq.n	8006f68 <UART_RxISR_16BIT+0x6c>
 8006f66:	e0a6      	b.n	80070b6 <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f68:	f3ef 8310 	mrs	r3, PRIMASK
 8006f6c:	623b      	str	r3, [r7, #32]
  return(result);
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f72:	2301      	movs	r3, #1
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	f383 8810 	msr	PRIMASK, r3
}
 8006f7c:	46c0      	nop			@ (mov r8, r8)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	494d      	ldr	r1, [pc, #308]	@ (80070c0 <UART_RxISR_16BIT+0x1c4>)
 8006f8a:	400a      	ands	r2, r1
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	f383 8810 	msr	PRIMASK, r3
}
 8006f98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006faa:	f383 8810 	msr	PRIMASK, r3
}
 8006fae:	46c0      	nop			@ (mov r8, r8)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2101      	movs	r1, #1
 8006fbc:	438a      	bics	r2, r1
 8006fbe:	609a      	str	r2, [r3, #8]
 8006fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc6:	f383 8810 	msr	PRIMASK, r3
}
 8006fca:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	228c      	movs	r2, #140	@ 0x8c
 8006fd0:	2120      	movs	r1, #32
 8006fd2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a37      	ldr	r2, [pc, #220]	@ (80070c4 <UART_RxISR_16BIT+0x1c8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d024      	beq.n	8007034 <UART_RxISR_16BIT+0x138>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a36      	ldr	r2, [pc, #216]	@ (80070c8 <UART_RxISR_16BIT+0x1cc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d01f      	beq.n	8007034 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	2380      	movs	r3, #128	@ 0x80
 8006ffc:	041b      	lsls	r3, r3, #16
 8006ffe:	4013      	ands	r3, r2
 8007000:	d018      	beq.n	8007034 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007002:	f3ef 8310 	mrs	r3, PRIMASK
 8007006:	617b      	str	r3, [r7, #20]
  return(result);
 8007008:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800700a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800700c:	2301      	movs	r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	f383 8810 	msr	PRIMASK, r3
}
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	492a      	ldr	r1, [pc, #168]	@ (80070cc <UART_RxISR_16BIT+0x1d0>)
 8007024:	400a      	ands	r2, r1
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800702a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f383 8810 	msr	PRIMASK, r3
}
 8007032:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007038:	2b01      	cmp	r3, #1
 800703a:	d12f      	bne.n	800709c <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007042:	f3ef 8310 	mrs	r3, PRIMASK
 8007046:	60bb      	str	r3, [r7, #8]
  return(result);
 8007048:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800704c:	2301      	movs	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f383 8810 	msr	PRIMASK, r3
}
 8007056:	46c0      	nop			@ (mov r8, r8)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2110      	movs	r1, #16
 8007064:	438a      	bics	r2, r1
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f383 8810 	msr	PRIMASK, r3
}
 8007072:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	2210      	movs	r2, #16
 800707c:	4013      	ands	r3, r2
 800707e:	2b10      	cmp	r3, #16
 8007080:	d103      	bne.n	800708a <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2210      	movs	r2, #16
 8007088:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	225c      	movs	r2, #92	@ 0x5c
 800708e:	5a9a      	ldrh	r2, [r3, r2]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	0011      	movs	r1, r2
 8007094:	0018      	movs	r0, r3
 8007096:	f7fe ff49 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800709a:	e00c      	b.n	80070b6 <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	0018      	movs	r0, r3
 80070a0:	f7fa fee6 	bl	8001e70 <HAL_UART_RxCpltCallback>
}
 80070a4:	e007      	b.n	80070b6 <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2108      	movs	r1, #8
 80070b2:	430a      	orrs	r2, r1
 80070b4:	619a      	str	r2, [r3, #24]
}
 80070b6:	46c0      	nop			@ (mov r8, r8)
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b014      	add	sp, #80	@ 0x50
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	46c0      	nop			@ (mov r8, r8)
 80070c0:	fffffedf 	.word	0xfffffedf
 80070c4:	40008000 	.word	0x40008000
 80070c8:	40008400 	.word	0x40008400
 80070cc:	fbffffff 	.word	0xfbffffff

080070d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b0a0      	sub	sp, #128	@ 0x80
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80070d8:	237a      	movs	r3, #122	@ 0x7a
 80070da:	18fb      	adds	r3, r7, r3
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	2160      	movs	r1, #96	@ 0x60
 80070e0:	5a52      	ldrh	r2, [r2, r1]
 80070e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	228c      	movs	r2, #140	@ 0x8c
 8007100:	589b      	ldr	r3, [r3, r2]
 8007102:	2b22      	cmp	r3, #34	@ 0x22
 8007104:	d000      	beq.n	8007108 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007106:	e16f      	b.n	80073e8 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007108:	236e      	movs	r3, #110	@ 0x6e
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	2168      	movs	r1, #104	@ 0x68
 8007110:	5a52      	ldrh	r2, [r2, r1]
 8007112:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007114:	e116      	b.n	8007344 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800711c:	216c      	movs	r1, #108	@ 0x6c
 800711e:	187b      	adds	r3, r7, r1
 8007120:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007122:	187b      	adds	r3, r7, r1
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b2da      	uxtb	r2, r3
 8007128:	237a      	movs	r3, #122	@ 0x7a
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b2d9      	uxtb	r1, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007134:	400a      	ands	r2, r1
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	225e      	movs	r2, #94	@ 0x5e
 8007148:	5a9b      	ldrh	r3, [r3, r2]
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b299      	uxth	r1, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	225e      	movs	r2, #94	@ 0x5e
 8007154:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800715e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007160:	2207      	movs	r2, #7
 8007162:	4013      	ands	r3, r2
 8007164:	d049      	beq.n	80071fa <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007166:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007168:	2201      	movs	r2, #1
 800716a:	4013      	ands	r3, r2
 800716c:	d010      	beq.n	8007190 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800716e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007170:	2380      	movs	r3, #128	@ 0x80
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	4013      	ands	r3, r2
 8007176:	d00b      	beq.n	8007190 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2201      	movs	r2, #1
 800717e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2290      	movs	r2, #144	@ 0x90
 8007184:	589b      	ldr	r3, [r3, r2]
 8007186:	2201      	movs	r2, #1
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2190      	movs	r1, #144	@ 0x90
 800718e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007190:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007192:	2202      	movs	r2, #2
 8007194:	4013      	ands	r3, r2
 8007196:	d00f      	beq.n	80071b8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007198:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800719a:	2201      	movs	r2, #1
 800719c:	4013      	ands	r3, r2
 800719e:	d00b      	beq.n	80071b8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2202      	movs	r2, #2
 80071a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2290      	movs	r2, #144	@ 0x90
 80071ac:	589b      	ldr	r3, [r3, r2]
 80071ae:	2204      	movs	r2, #4
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2190      	movs	r1, #144	@ 0x90
 80071b6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071ba:	2204      	movs	r2, #4
 80071bc:	4013      	ands	r3, r2
 80071be:	d00f      	beq.n	80071e0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80071c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071c2:	2201      	movs	r2, #1
 80071c4:	4013      	ands	r3, r2
 80071c6:	d00b      	beq.n	80071e0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2204      	movs	r2, #4
 80071ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2290      	movs	r2, #144	@ 0x90
 80071d4:	589b      	ldr	r3, [r3, r2]
 80071d6:	2202      	movs	r2, #2
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2190      	movs	r1, #144	@ 0x90
 80071de:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2290      	movs	r2, #144	@ 0x90
 80071e4:	589b      	ldr	r3, [r3, r2]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d007      	beq.n	80071fa <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	0018      	movs	r0, r3
 80071ee:	f7fe fe95 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2290      	movs	r2, #144	@ 0x90
 80071f6:	2100      	movs	r1, #0
 80071f8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	225e      	movs	r2, #94	@ 0x5e
 80071fe:	5a9b      	ldrh	r3, [r3, r2]
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d000      	beq.n	8007208 <UART_RxISR_8BIT_FIFOEN+0x138>
 8007206:	e09d      	b.n	8007344 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007208:	f3ef 8310 	mrs	r3, PRIMASK
 800720c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007210:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007212:	2301      	movs	r3, #1
 8007214:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007218:	f383 8810 	msr	PRIMASK, r3
}
 800721c:	46c0      	nop			@ (mov r8, r8)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4975      	ldr	r1, [pc, #468]	@ (8007400 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800722a:	400a      	ands	r2, r1
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007230:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007234:	f383 8810 	msr	PRIMASK, r3
}
 8007238:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800723a:	f3ef 8310 	mrs	r3, PRIMASK
 800723e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8007240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007242:	667b      	str	r3, [r7, #100]	@ 0x64
 8007244:	2301      	movs	r3, #1
 8007246:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800724a:	f383 8810 	msr	PRIMASK, r3
}
 800724e:	46c0      	nop			@ (mov r8, r8)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	496a      	ldr	r1, [pc, #424]	@ (8007404 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800725c:	400a      	ands	r2, r1
 800725e:	609a      	str	r2, [r3, #8]
 8007260:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007266:	f383 8810 	msr	PRIMASK, r3
}
 800726a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	228c      	movs	r2, #140	@ 0x8c
 8007270:	2120      	movs	r1, #32
 8007272:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a60      	ldr	r2, [pc, #384]	@ (8007408 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d024      	beq.n	80072d4 <UART_RxISR_8BIT_FIFOEN+0x204>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a5f      	ldr	r2, [pc, #380]	@ (800740c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d01f      	beq.n	80072d4 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	2380      	movs	r3, #128	@ 0x80
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	4013      	ands	r3, r2
 80072a0:	d018      	beq.n	80072d4 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072a2:	f3ef 8310 	mrs	r3, PRIMASK
 80072a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80072a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80072ac:	2301      	movs	r3, #1
 80072ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	f383 8810 	msr	PRIMASK, r3
}
 80072b6:	46c0      	nop			@ (mov r8, r8)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4953      	ldr	r1, [pc, #332]	@ (8007410 <UART_RxISR_8BIT_FIFOEN+0x340>)
 80072c4:	400a      	ands	r2, r1
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ce:	f383 8810 	msr	PRIMASK, r3
}
 80072d2:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d12f      	bne.n	800733c <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e2:	f3ef 8310 	mrs	r3, PRIMASK
 80072e6:	623b      	str	r3, [r7, #32]
  return(result);
 80072e8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072ec:	2301      	movs	r3, #1
 80072ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	f383 8810 	msr	PRIMASK, r3
}
 80072f6:	46c0      	nop			@ (mov r8, r8)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2110      	movs	r1, #16
 8007304:	438a      	bics	r2, r1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800730a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730e:	f383 8810 	msr	PRIMASK, r3
}
 8007312:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	2210      	movs	r2, #16
 800731c:	4013      	ands	r3, r2
 800731e:	2b10      	cmp	r3, #16
 8007320:	d103      	bne.n	800732a <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2210      	movs	r2, #16
 8007328:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	225c      	movs	r2, #92	@ 0x5c
 800732e:	5a9a      	ldrh	r2, [r3, r2]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	0011      	movs	r1, r2
 8007334:	0018      	movs	r0, r3
 8007336:	f7fe fdf9 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
 800733a:	e003      	b.n	8007344 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	0018      	movs	r0, r3
 8007340:	f7fa fd96 	bl	8001e70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007344:	236e      	movs	r3, #110	@ 0x6e
 8007346:	18fb      	adds	r3, r7, r3
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d004      	beq.n	8007358 <UART_RxISR_8BIT_FIFOEN+0x288>
 800734e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007350:	2220      	movs	r2, #32
 8007352:	4013      	ands	r3, r2
 8007354:	d000      	beq.n	8007358 <UART_RxISR_8BIT_FIFOEN+0x288>
 8007356:	e6de      	b.n	8007116 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007358:	205a      	movs	r0, #90	@ 0x5a
 800735a:	183b      	adds	r3, r7, r0
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	215e      	movs	r1, #94	@ 0x5e
 8007360:	5a52      	ldrh	r2, [r2, r1]
 8007362:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007364:	0001      	movs	r1, r0
 8007366:	187b      	adds	r3, r7, r1
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d044      	beq.n	80073f8 <UART_RxISR_8BIT_FIFOEN+0x328>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2268      	movs	r2, #104	@ 0x68
 8007372:	5a9b      	ldrh	r3, [r3, r2]
 8007374:	187a      	adds	r2, r7, r1
 8007376:	8812      	ldrh	r2, [r2, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d23d      	bcs.n	80073f8 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800737c:	f3ef 8310 	mrs	r3, PRIMASK
 8007380:	60bb      	str	r3, [r7, #8]
  return(result);
 8007382:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007384:	657b      	str	r3, [r7, #84]	@ 0x54
 8007386:	2301      	movs	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f383 8810 	msr	PRIMASK, r3
}
 8007390:	46c0      	nop			@ (mov r8, r8)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	491d      	ldr	r1, [pc, #116]	@ (8007414 <UART_RxISR_8BIT_FIFOEN+0x344>)
 800739e:	400a      	ands	r2, r1
 80073a0:	609a      	str	r2, [r3, #8]
 80073a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f383 8810 	msr	PRIMASK, r3
}
 80073ac:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a19      	ldr	r2, [pc, #100]	@ (8007418 <UART_RxISR_8BIT_FIFOEN+0x348>)
 80073b2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b4:	f3ef 8310 	mrs	r3, PRIMASK
 80073b8:	617b      	str	r3, [r7, #20]
  return(result);
 80073ba:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80073be:	2301      	movs	r3, #1
 80073c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f383 8810 	msr	PRIMASK, r3
}
 80073c8:	46c0      	nop			@ (mov r8, r8)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2120      	movs	r1, #32
 80073d6:	430a      	orrs	r2, r1
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073e6:	e007      	b.n	80073f8 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699a      	ldr	r2, [r3, #24]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2108      	movs	r1, #8
 80073f4:	430a      	orrs	r2, r1
 80073f6:	619a      	str	r2, [r3, #24]
}
 80073f8:	46c0      	nop			@ (mov r8, r8)
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b020      	add	sp, #128	@ 0x80
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	fffffeff 	.word	0xfffffeff
 8007404:	effffffe 	.word	0xeffffffe
 8007408:	40008000 	.word	0x40008000
 800740c:	40008400 	.word	0x40008400
 8007410:	fbffffff 	.word	0xfbffffff
 8007414:	efffffff 	.word	0xefffffff
 8007418:	08006d29 	.word	0x08006d29

0800741c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b0a2      	sub	sp, #136	@ 0x88
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007424:	2382      	movs	r3, #130	@ 0x82
 8007426:	18fb      	adds	r3, r7, r3
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	2160      	movs	r1, #96	@ 0x60
 800742c:	5a52      	ldrh	r2, [r2, r1]
 800742e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	2284      	movs	r2, #132	@ 0x84
 8007438:	18ba      	adds	r2, r7, r2
 800743a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	228c      	movs	r2, #140	@ 0x8c
 8007450:	589b      	ldr	r3, [r3, r2]
 8007452:	2b22      	cmp	r3, #34	@ 0x22
 8007454:	d000      	beq.n	8007458 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8007456:	e179      	b.n	800774c <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007458:	2376      	movs	r3, #118	@ 0x76
 800745a:	18fb      	adds	r3, r7, r3
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	2168      	movs	r1, #104	@ 0x68
 8007460:	5a52      	ldrh	r2, [r2, r1]
 8007462:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007464:	e11e      	b.n	80076a4 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800746c:	2174      	movs	r1, #116	@ 0x74
 800746e:	187b      	adds	r3, r7, r1
 8007470:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007476:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8007478:	187b      	adds	r3, r7, r1
 800747a:	2282      	movs	r2, #130	@ 0x82
 800747c:	18ba      	adds	r2, r7, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	8812      	ldrh	r2, [r2, #0]
 8007482:	4013      	ands	r3, r2
 8007484:	b29a      	uxth	r2, r3
 8007486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007488:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748e:	1c9a      	adds	r2, r3, #2
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	225e      	movs	r2, #94	@ 0x5e
 8007498:	5a9b      	ldrh	r3, [r3, r2]
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b299      	uxth	r1, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	225e      	movs	r2, #94	@ 0x5e
 80074a4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	2184      	movs	r1, #132	@ 0x84
 80074ae:	187a      	adds	r2, r7, r1
 80074b0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80074b2:	187b      	adds	r3, r7, r1
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2207      	movs	r2, #7
 80074b8:	4013      	ands	r3, r2
 80074ba:	d04e      	beq.n	800755a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074bc:	187b      	adds	r3, r7, r1
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2201      	movs	r2, #1
 80074c2:	4013      	ands	r3, r2
 80074c4:	d010      	beq.n	80074e8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80074c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80074c8:	2380      	movs	r3, #128	@ 0x80
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	4013      	ands	r3, r2
 80074ce:	d00b      	beq.n	80074e8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2201      	movs	r2, #1
 80074d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2290      	movs	r2, #144	@ 0x90
 80074dc:	589b      	ldr	r3, [r3, r2]
 80074de:	2201      	movs	r2, #1
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2190      	movs	r1, #144	@ 0x90
 80074e6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e8:	2384      	movs	r3, #132	@ 0x84
 80074ea:	18fb      	adds	r3, r7, r3
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2202      	movs	r2, #2
 80074f0:	4013      	ands	r3, r2
 80074f2:	d00f      	beq.n	8007514 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80074f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074f6:	2201      	movs	r2, #1
 80074f8:	4013      	ands	r3, r2
 80074fa:	d00b      	beq.n	8007514 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2202      	movs	r2, #2
 8007502:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2290      	movs	r2, #144	@ 0x90
 8007508:	589b      	ldr	r3, [r3, r2]
 800750a:	2204      	movs	r2, #4
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2190      	movs	r1, #144	@ 0x90
 8007512:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007514:	2384      	movs	r3, #132	@ 0x84
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2204      	movs	r2, #4
 800751c:	4013      	ands	r3, r2
 800751e:	d00f      	beq.n	8007540 <UART_RxISR_16BIT_FIFOEN+0x124>
 8007520:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007522:	2201      	movs	r2, #1
 8007524:	4013      	ands	r3, r2
 8007526:	d00b      	beq.n	8007540 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2204      	movs	r2, #4
 800752e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2290      	movs	r2, #144	@ 0x90
 8007534:	589b      	ldr	r3, [r3, r2]
 8007536:	2202      	movs	r2, #2
 8007538:	431a      	orrs	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2190      	movs	r1, #144	@ 0x90
 800753e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2290      	movs	r2, #144	@ 0x90
 8007544:	589b      	ldr	r3, [r3, r2]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	0018      	movs	r0, r3
 800754e:	f7fe fce5 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2290      	movs	r2, #144	@ 0x90
 8007556:	2100      	movs	r1, #0
 8007558:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	225e      	movs	r2, #94	@ 0x5e
 800755e:	5a9b      	ldrh	r3, [r3, r2]
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d000      	beq.n	8007568 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8007566:	e09d      	b.n	80076a4 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007568:	f3ef 8310 	mrs	r3, PRIMASK
 800756c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800756e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007570:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007572:	2301      	movs	r3, #1
 8007574:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007578:	f383 8810 	msr	PRIMASK, r3
}
 800757c:	46c0      	nop			@ (mov r8, r8)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4976      	ldr	r1, [pc, #472]	@ (8007764 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800758a:	400a      	ands	r2, r1
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007590:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007594:	f383 8810 	msr	PRIMASK, r3
}
 8007598:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800759a:	f3ef 8310 	mrs	r3, PRIMASK
 800759e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80075a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075a4:	2301      	movs	r3, #1
 80075a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075aa:	f383 8810 	msr	PRIMASK, r3
}
 80075ae:	46c0      	nop			@ (mov r8, r8)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	496b      	ldr	r1, [pc, #428]	@ (8007768 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80075bc:	400a      	ands	r2, r1
 80075be:	609a      	str	r2, [r3, #8]
 80075c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075c2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c6:	f383 8810 	msr	PRIMASK, r3
}
 80075ca:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	228c      	movs	r2, #140	@ 0x8c
 80075d0:	2120      	movs	r1, #32
 80075d2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a61      	ldr	r2, [pc, #388]	@ (800776c <UART_RxISR_16BIT_FIFOEN+0x350>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d024      	beq.n	8007634 <UART_RxISR_16BIT_FIFOEN+0x218>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a60      	ldr	r2, [pc, #384]	@ (8007770 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d01f      	beq.n	8007634 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	2380      	movs	r3, #128	@ 0x80
 80075fc:	041b      	lsls	r3, r3, #16
 80075fe:	4013      	ands	r3, r2
 8007600:	d018      	beq.n	8007634 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007602:	f3ef 8310 	mrs	r3, PRIMASK
 8007606:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800760a:	667b      	str	r3, [r7, #100]	@ 0x64
 800760c:	2301      	movs	r3, #1
 800760e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007612:	f383 8810 	msr	PRIMASK, r3
}
 8007616:	46c0      	nop			@ (mov r8, r8)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4954      	ldr	r1, [pc, #336]	@ (8007774 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8007624:	400a      	ands	r2, r1
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800762a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762e:	f383 8810 	msr	PRIMASK, r3
}
 8007632:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007638:	2b01      	cmp	r3, #1
 800763a:	d12f      	bne.n	800769c <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007642:	f3ef 8310 	mrs	r3, PRIMASK
 8007646:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	663b      	str	r3, [r7, #96]	@ 0x60
 800764c:	2301      	movs	r3, #1
 800764e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007652:	f383 8810 	msr	PRIMASK, r3
}
 8007656:	46c0      	nop			@ (mov r8, r8)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2110      	movs	r1, #16
 8007664:	438a      	bics	r2, r1
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800766a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766e:	f383 8810 	msr	PRIMASK, r3
}
 8007672:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	2210      	movs	r2, #16
 800767c:	4013      	ands	r3, r2
 800767e:	2b10      	cmp	r3, #16
 8007680:	d103      	bne.n	800768a <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2210      	movs	r2, #16
 8007688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	225c      	movs	r2, #92	@ 0x5c
 800768e:	5a9a      	ldrh	r2, [r3, r2]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	0011      	movs	r1, r2
 8007694:	0018      	movs	r0, r3
 8007696:	f7fe fc49 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
 800769a:	e003      	b.n	80076a4 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	0018      	movs	r0, r3
 80076a0:	f7fa fbe6 	bl	8001e70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076a4:	2376      	movs	r3, #118	@ 0x76
 80076a6:	18fb      	adds	r3, r7, r3
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d006      	beq.n	80076bc <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80076ae:	2384      	movs	r3, #132	@ 0x84
 80076b0:	18fb      	adds	r3, r7, r3
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2220      	movs	r2, #32
 80076b6:	4013      	ands	r3, r2
 80076b8:	d000      	beq.n	80076bc <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80076ba:	e6d4      	b.n	8007466 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80076bc:	205e      	movs	r0, #94	@ 0x5e
 80076be:	183b      	adds	r3, r7, r0
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	215e      	movs	r1, #94	@ 0x5e
 80076c4:	5a52      	ldrh	r2, [r2, r1]
 80076c6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076c8:	0001      	movs	r1, r0
 80076ca:	187b      	adds	r3, r7, r1
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d044      	beq.n	800775c <UART_RxISR_16BIT_FIFOEN+0x340>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2268      	movs	r2, #104	@ 0x68
 80076d6:	5a9b      	ldrh	r3, [r3, r2]
 80076d8:	187a      	adds	r2, r7, r1
 80076da:	8812      	ldrh	r2, [r2, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d23d      	bcs.n	800775c <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e0:	f3ef 8310 	mrs	r3, PRIMASK
 80076e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80076e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076ea:	2301      	movs	r3, #1
 80076ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f383 8810 	msr	PRIMASK, r3
}
 80076f4:	46c0      	nop			@ (mov r8, r8)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	491d      	ldr	r1, [pc, #116]	@ (8007778 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007702:	400a      	ands	r2, r1
 8007704:	609a      	str	r2, [r3, #8]
 8007706:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f383 8810 	msr	PRIMASK, r3
}
 8007710:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a19      	ldr	r2, [pc, #100]	@ (800777c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007716:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007718:	f3ef 8310 	mrs	r3, PRIMASK
 800771c:	61bb      	str	r3, [r7, #24]
  return(result);
 800771e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007720:	657b      	str	r3, [r7, #84]	@ 0x54
 8007722:	2301      	movs	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	f383 8810 	msr	PRIMASK, r3
}
 800772c:	46c0      	nop			@ (mov r8, r8)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2120      	movs	r1, #32
 800773a:	430a      	orrs	r2, r1
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007740:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	f383 8810 	msr	PRIMASK, r3
}
 8007748:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800774a:	e007      	b.n	800775c <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2108      	movs	r1, #8
 8007758:	430a      	orrs	r2, r1
 800775a:	619a      	str	r2, [r3, #24]
}
 800775c:	46c0      	nop			@ (mov r8, r8)
 800775e:	46bd      	mov	sp, r7
 8007760:	b022      	add	sp, #136	@ 0x88
 8007762:	bd80      	pop	{r7, pc}
 8007764:	fffffeff 	.word	0xfffffeff
 8007768:	effffffe 	.word	0xeffffffe
 800776c:	40008000 	.word	0x40008000
 8007770:	40008400 	.word	0x40008400
 8007774:	fbffffff 	.word	0xfbffffff
 8007778:	efffffff 	.word	0xefffffff
 800777c:	08006efd 	.word	0x08006efd

08007780 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007788:	46c0      	nop			@ (mov r8, r8)
 800778a:	46bd      	mov	sp, r7
 800778c:	b002      	add	sp, #8
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007798:	46c0      	nop			@ (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	b002      	add	sp, #8
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80077a8:	46c0      	nop			@ (mov r8, r8)
 80077aa:	46bd      	mov	sp, r7
 80077ac:	b002      	add	sp, #8
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2284      	movs	r2, #132	@ 0x84
 80077bc:	5c9b      	ldrb	r3, [r3, r2]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e027      	b.n	8007816 <HAL_UARTEx_DisableFifoMode+0x66>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2284      	movs	r2, #132	@ 0x84
 80077ca:	2101      	movs	r1, #1
 80077cc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2288      	movs	r2, #136	@ 0x88
 80077d2:	2124      	movs	r1, #36	@ 0x24
 80077d4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2101      	movs	r1, #1
 80077ea:	438a      	bics	r2, r1
 80077ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007820 <HAL_UARTEx_DisableFifoMode+0x70>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2288      	movs	r2, #136	@ 0x88
 8007808:	2120      	movs	r1, #32
 800780a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2284      	movs	r2, #132	@ 0x84
 8007810:	2100      	movs	r1, #0
 8007812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	0018      	movs	r0, r3
 8007818:	46bd      	mov	sp, r7
 800781a:	b004      	add	sp, #16
 800781c:	bd80      	pop	{r7, pc}
 800781e:	46c0      	nop			@ (mov r8, r8)
 8007820:	dfffffff 	.word	0xdfffffff

08007824 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2284      	movs	r2, #132	@ 0x84
 8007832:	5c9b      	ldrb	r3, [r3, r2]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007838:	2302      	movs	r3, #2
 800783a:	e02e      	b.n	800789a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2284      	movs	r2, #132	@ 0x84
 8007840:	2101      	movs	r1, #1
 8007842:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2288      	movs	r2, #136	@ 0x88
 8007848:	2124      	movs	r1, #36	@ 0x24
 800784a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2101      	movs	r1, #1
 8007860:	438a      	bics	r2, r1
 8007862:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	08d9      	lsrs	r1, r3, #3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	0018      	movs	r0, r3
 800787c:	f000 f854 	bl	8007928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2288      	movs	r2, #136	@ 0x88
 800788c:	2120      	movs	r1, #32
 800788e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2284      	movs	r2, #132	@ 0x84
 8007894:	2100      	movs	r1, #0
 8007896:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	0018      	movs	r0, r3
 800789c:	46bd      	mov	sp, r7
 800789e:	b004      	add	sp, #16
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2284      	movs	r2, #132	@ 0x84
 80078b2:	5c9b      	ldrb	r3, [r3, r2]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e02f      	b.n	800791c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2284      	movs	r2, #132	@ 0x84
 80078c0:	2101      	movs	r1, #1
 80078c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2288      	movs	r2, #136	@ 0x88
 80078c8:	2124      	movs	r1, #36	@ 0x24
 80078ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2101      	movs	r1, #1
 80078e0:	438a      	bics	r2, r1
 80078e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007924 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	0019      	movs	r1, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	0018      	movs	r0, r3
 80078fe:	f000 f813 	bl	8007928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2288      	movs	r2, #136	@ 0x88
 800790e:	2120      	movs	r1, #32
 8007910:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2284      	movs	r2, #132	@ 0x84
 8007916:	2100      	movs	r1, #0
 8007918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	0018      	movs	r0, r3
 800791e:	46bd      	mov	sp, r7
 8007920:	b004      	add	sp, #16
 8007922:	bd80      	pop	{r7, pc}
 8007924:	f1ffffff 	.word	0xf1ffffff

08007928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007934:	2b00      	cmp	r3, #0
 8007936:	d108      	bne.n	800794a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	226a      	movs	r2, #106	@ 0x6a
 800793c:	2101      	movs	r1, #1
 800793e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2268      	movs	r2, #104	@ 0x68
 8007944:	2101      	movs	r1, #1
 8007946:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007948:	e043      	b.n	80079d2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800794a:	260f      	movs	r6, #15
 800794c:	19bb      	adds	r3, r7, r6
 800794e:	2208      	movs	r2, #8
 8007950:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007952:	200e      	movs	r0, #14
 8007954:	183b      	adds	r3, r7, r0
 8007956:	2208      	movs	r2, #8
 8007958:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	0e5b      	lsrs	r3, r3, #25
 8007962:	b2da      	uxtb	r2, r3
 8007964:	240d      	movs	r4, #13
 8007966:	193b      	adds	r3, r7, r4
 8007968:	2107      	movs	r1, #7
 800796a:	400a      	ands	r2, r1
 800796c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	0f5b      	lsrs	r3, r3, #29
 8007976:	b2da      	uxtb	r2, r3
 8007978:	250c      	movs	r5, #12
 800797a:	197b      	adds	r3, r7, r5
 800797c:	2107      	movs	r1, #7
 800797e:	400a      	ands	r2, r1
 8007980:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007982:	183b      	adds	r3, r7, r0
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	197a      	adds	r2, r7, r5
 8007988:	7812      	ldrb	r2, [r2, #0]
 800798a:	4914      	ldr	r1, [pc, #80]	@ (80079dc <UARTEx_SetNbDataToProcess+0xb4>)
 800798c:	5c8a      	ldrb	r2, [r1, r2]
 800798e:	435a      	muls	r2, r3
 8007990:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007992:	197b      	adds	r3, r7, r5
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	4a12      	ldr	r2, [pc, #72]	@ (80079e0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007998:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800799a:	0019      	movs	r1, r3
 800799c:	f7f8 fc44 	bl	8000228 <__divsi3>
 80079a0:	0003      	movs	r3, r0
 80079a2:	b299      	uxth	r1, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	226a      	movs	r2, #106	@ 0x6a
 80079a8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079aa:	19bb      	adds	r3, r7, r6
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	193a      	adds	r2, r7, r4
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	490a      	ldr	r1, [pc, #40]	@ (80079dc <UARTEx_SetNbDataToProcess+0xb4>)
 80079b4:	5c8a      	ldrb	r2, [r1, r2]
 80079b6:	435a      	muls	r2, r3
 80079b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80079ba:	193b      	adds	r3, r7, r4
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	4a08      	ldr	r2, [pc, #32]	@ (80079e0 <UARTEx_SetNbDataToProcess+0xb8>)
 80079c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079c2:	0019      	movs	r1, r3
 80079c4:	f7f8 fc30 	bl	8000228 <__divsi3>
 80079c8:	0003      	movs	r3, r0
 80079ca:	b299      	uxth	r1, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2268      	movs	r2, #104	@ 0x68
 80079d0:	5299      	strh	r1, [r3, r2]
}
 80079d2:	46c0      	nop			@ (mov r8, r8)
 80079d4:	46bd      	mov	sp, r7
 80079d6:	b005      	add	sp, #20
 80079d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079da:	46c0      	nop			@ (mov r8, r8)
 80079dc:	08008108 	.word	0x08008108
 80079e0:	08008110 	.word	0x08008110

080079e4 <__utoa>:
 80079e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e6:	000c      	movs	r4, r1
 80079e8:	0016      	movs	r6, r2
 80079ea:	b08d      	sub	sp, #52	@ 0x34
 80079ec:	2225      	movs	r2, #37	@ 0x25
 80079ee:	0007      	movs	r7, r0
 80079f0:	4915      	ldr	r1, [pc, #84]	@ (8007a48 <__utoa+0x64>)
 80079f2:	a802      	add	r0, sp, #8
 80079f4:	f000 f86e 	bl	8007ad4 <memcpy>
 80079f8:	1e62      	subs	r2, r4, #1
 80079fa:	1eb3      	subs	r3, r6, #2
 80079fc:	2500      	movs	r5, #0
 80079fe:	9201      	str	r2, [sp, #4]
 8007a00:	2b22      	cmp	r3, #34	@ 0x22
 8007a02:	d904      	bls.n	8007a0e <__utoa+0x2a>
 8007a04:	7025      	strb	r5, [r4, #0]
 8007a06:	002c      	movs	r4, r5
 8007a08:	0020      	movs	r0, r4
 8007a0a:	b00d      	add	sp, #52	@ 0x34
 8007a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a0e:	0038      	movs	r0, r7
 8007a10:	0031      	movs	r1, r6
 8007a12:	f7f8 fc05 	bl	8000220 <__aeabi_uidivmod>
 8007a16:	000b      	movs	r3, r1
 8007a18:	aa02      	add	r2, sp, #8
 8007a1a:	5cd3      	ldrb	r3, [r2, r3]
 8007a1c:	9a01      	ldr	r2, [sp, #4]
 8007a1e:	0029      	movs	r1, r5
 8007a20:	3501      	adds	r5, #1
 8007a22:	5553      	strb	r3, [r2, r5]
 8007a24:	003b      	movs	r3, r7
 8007a26:	0007      	movs	r7, r0
 8007a28:	429e      	cmp	r6, r3
 8007a2a:	d9f0      	bls.n	8007a0e <__utoa+0x2a>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	0022      	movs	r2, r4
 8007a30:	5563      	strb	r3, [r4, r5]
 8007a32:	000b      	movs	r3, r1
 8007a34:	1ac8      	subs	r0, r1, r3
 8007a36:	4283      	cmp	r3, r0
 8007a38:	dde6      	ble.n	8007a08 <__utoa+0x24>
 8007a3a:	7810      	ldrb	r0, [r2, #0]
 8007a3c:	5ce5      	ldrb	r5, [r4, r3]
 8007a3e:	7015      	strb	r5, [r2, #0]
 8007a40:	54e0      	strb	r0, [r4, r3]
 8007a42:	3201      	adds	r2, #1
 8007a44:	3b01      	subs	r3, #1
 8007a46:	e7f5      	b.n	8007a34 <__utoa+0x50>
 8007a48:	08008118 	.word	0x08008118

08007a4c <utoa>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	f7ff ffc9 	bl	80079e4 <__utoa>
 8007a52:	bd10      	pop	{r4, pc}

08007a54 <memset>:
 8007a54:	0003      	movs	r3, r0
 8007a56:	1882      	adds	r2, r0, r2
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d100      	bne.n	8007a5e <memset+0xa>
 8007a5c:	4770      	bx	lr
 8007a5e:	7019      	strb	r1, [r3, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	e7f9      	b.n	8007a58 <memset+0x4>

08007a64 <strncpy>:
 8007a64:	0003      	movs	r3, r0
 8007a66:	b530      	push	{r4, r5, lr}
 8007a68:	001d      	movs	r5, r3
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	d006      	beq.n	8007a7c <strncpy+0x18>
 8007a6e:	780c      	ldrb	r4, [r1, #0]
 8007a70:	3a01      	subs	r2, #1
 8007a72:	3301      	adds	r3, #1
 8007a74:	702c      	strb	r4, [r5, #0]
 8007a76:	3101      	adds	r1, #1
 8007a78:	2c00      	cmp	r4, #0
 8007a7a:	d1f5      	bne.n	8007a68 <strncpy+0x4>
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	189a      	adds	r2, r3, r2
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d100      	bne.n	8007a86 <strncpy+0x22>
 8007a84:	bd30      	pop	{r4, r5, pc}
 8007a86:	7019      	strb	r1, [r3, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	e7f9      	b.n	8007a80 <strncpy+0x1c>

08007a8c <__libc_init_array>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	2600      	movs	r6, #0
 8007a90:	4c0c      	ldr	r4, [pc, #48]	@ (8007ac4 <__libc_init_array+0x38>)
 8007a92:	4d0d      	ldr	r5, [pc, #52]	@ (8007ac8 <__libc_init_array+0x3c>)
 8007a94:	1b64      	subs	r4, r4, r5
 8007a96:	10a4      	asrs	r4, r4, #2
 8007a98:	42a6      	cmp	r6, r4
 8007a9a:	d109      	bne.n	8007ab0 <__libc_init_array+0x24>
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	f000 f823 	bl	8007ae8 <_init>
 8007aa2:	4c0a      	ldr	r4, [pc, #40]	@ (8007acc <__libc_init_array+0x40>)
 8007aa4:	4d0a      	ldr	r5, [pc, #40]	@ (8007ad0 <__libc_init_array+0x44>)
 8007aa6:	1b64      	subs	r4, r4, r5
 8007aa8:	10a4      	asrs	r4, r4, #2
 8007aaa:	42a6      	cmp	r6, r4
 8007aac:	d105      	bne.n	8007aba <__libc_init_array+0x2e>
 8007aae:	bd70      	pop	{r4, r5, r6, pc}
 8007ab0:	00b3      	lsls	r3, r6, #2
 8007ab2:	58eb      	ldr	r3, [r5, r3]
 8007ab4:	4798      	blx	r3
 8007ab6:	3601      	adds	r6, #1
 8007ab8:	e7ee      	b.n	8007a98 <__libc_init_array+0xc>
 8007aba:	00b3      	lsls	r3, r6, #2
 8007abc:	58eb      	ldr	r3, [r5, r3]
 8007abe:	4798      	blx	r3
 8007ac0:	3601      	adds	r6, #1
 8007ac2:	e7f2      	b.n	8007aaa <__libc_init_array+0x1e>
 8007ac4:	08008148 	.word	0x08008148
 8007ac8:	08008148 	.word	0x08008148
 8007acc:	0800814c 	.word	0x0800814c
 8007ad0:	08008148 	.word	0x08008148

08007ad4 <memcpy>:
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d100      	bne.n	8007ade <memcpy+0xa>
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	5ccc      	ldrb	r4, [r1, r3]
 8007ae0:	54c4      	strb	r4, [r0, r3]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	e7f8      	b.n	8007ad8 <memcpy+0x4>
	...

08007ae8 <_init>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	46c0      	nop			@ (mov r8, r8)
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr

08007af4 <_fini>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	46c0      	nop			@ (mov r8, r8)
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr
